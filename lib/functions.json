[
    {
        "_caller": "<p>\n<b>_caller()</b>\n       Description:  <b>version</b> of the program or session that invoked the\n                     currently running program; see <a href=\"/help.cgi?version\"><b>[P] version</b></a>\n           \n                     The current version at the time of this writing is 15.1,\n                     so 15.1 is the upper end of this range. If Stata 15.2\n                     were the current version, 15.2 would be the upper end of\n                     this range, and likewise, if Stata 16 were the current\n                     version, 16 would be the upper end of this range.  This\n                     is a function for use by programmers.\n       Range:        1 to 15.1\n</p>"
    },
    {
        "abbrev": "<p>\n<b>abbrev(</b><i>s</i>,<i>n</i><b>)</b>\n       Description:  name <i>s</i>, abbreviated to a length of <i>n</i>\n</p><p>\n                     Length is measured in the number of display columns, not\n                     in the number of characters.  For most users, the number\n                     of display columns equals the number of characters.  For\n                     a detailed discussion of display columns, see <b>[U]</b>\n<b>12.4.2.2 Displaying Unicode characters</b>.\n</p><p>\n                     If any of the characters of <i>s</i> are a period, \"<b>.</b>\", and <i>n</i> &lt;\n                     8, then the value <i>n</i> defaults to a value of 8.\n                     Otherwise, if <i>n</i> &lt; 5, then <i>n</i> defaults to a value of 5.\n                     If <i>n</i> is <i>missing</i>, <b>abbrev()</b> will return the entire string\n                     <i>s</i>.  <b>abbrev()</b> is typically used with variable names and\n                     variable names with factor-variable or time-series\n                     operators (the period case).\n        \n                     <b>abbrev(\"displacement\",8)</b> is <b>displa~t</b>.\n       Domain <i>s</i>:     strings\n       Domain <i>n</i>:     integers 5 to 32\n       Range:        strings\n</p>"
    },
    {
        "abs": "<p>\n<b>abs(</b><i>x</i><b>)</b>\n       Description:  the absolute value of <i>x</i>\n       Domain:       -8e+307 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "acos": "<p>\n<b>acos(</b><i>x</i><b>)</b>\n       Description:  the radian value of the arccosine of <i>x</i>\n       Domain:       -1 to 1\n       Range:        0 to pi\n</p>"
    },
    {
        "acosh": "<p>\n<b>acosh(</b><i>x</i><b>)</b>\n       Description:  the inverse hyperbolic cosine of <i>x</i>,\n                     <b>acosh(</b><i>x</i><b>)</b> = ln{<i>x</i>+sqrt(<i>x</i>*<i>x</i> - 1)}\n       Domain:       1 to 8.9e+307\n       Range:        0 to 709.77\n</p>"
    },
    {
        "asin": "<p>\n<b>asin(</b><i>x</i><b>)</b>\n       Description:  the radian value of the arcsine of <i>x</i>\n       Domain:       -1 to 1\n       Range:        -pi/2 to pi/2\n</p>"
    },
    {
        "asinh": "<p>\n<b>asinh(</b><i>x</i><b>)</b>\n       Description:  the inverse hyperbolic sine of <i>x</i>,\n                     <b>asinh(</b><i>x</i><b>)</b> = ln{<i>x</i>+sqrt(<i>x</i>*<i>x</i> + 1)}\n       Domain:       -8.9e+307 to 8.9e+307\n       Range:        -709.77 to 709.77\n</p>"
    },
    {
        "atan": "<p>\n<b>atan(</b><i>x</i><b>)</b>\n       Description:  the radian value of the arctangent of <i>x</i>\n       Domain:       -8e+307 to 8e+307\n       Range:        -pi/2 to pi/2\n</p>"
    },
    {
        "atan2": "<p>\n<b>atan2(</b><i>y</i>,<i>x</i><b>)</b>\n       Description:  the radian value of the arctangent of <i>y</i>/<i>x</i>, where the\n                     signs of the parameters <i>y</i> and <i>x</i> are used to determine\n                     the quadrant of the answer\n       Domain <i>y</i>:     -8e+307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        -pi to pi\n</p>"
    },
    {
        "atanh": "<p>\n<b>atanh(</b><i>x</i><b>)</b>\n       Description:  the inverse hyperbolic tangent of <i>x</i>, <b>atanh(</b><i>x</i><b>)</b> =\n                     (1/2){ln(1+<i>x</i>) - ln(1-<i>x</i>)}\n       Domain:       -1 to 1\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "autocode": "<p>\n<b>autocode(</b><i>x</i><b>,</b><i>n</i><b>,</b><i>x0</i><b>,</b><i>x1</i><b>)</b>\n       Description:  partitions the interval from <i>x0</i> to <i>x1</i> into <i>n</i>\n                     equal-length intervals and returns the upper bound of\n                     the interval that contains <i>x</i>\n</p><p>\n                     This function is an automated version of <a href=\"/help.cgi?recode()\"><b>recode()</b></a>.  See\n                     <b>[U] 25 Working with categorical data and factor</b>\n<b>variables</b> for an example.\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>n</i>:     integers 1 to 8e+307\n       Domain <i>x0</i>:    -8e+307 to 8e+307\n       Domain <i>x1</i>:    <i>x0</i> to 8e+307\n       Range:        <i>x0</i> to <i>x1</i>\n</p>"
    },
    {
        "betaden": "<p>\n<b>betaden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density of the beta distribution, where\n                     <i>a</i> and <i>b</i> are shape parameters; <b>0</b> if <i>x</i> &lt; 0 or <i>x</i> &gt; 1\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is 0 <u>&lt;</u> <i>x</i> <u>&lt;</u> 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "binomial": "<p>\n<b>binomial(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the probability of observing <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>k</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a> or fewer successes\n                     in <b>floor(</b><i>n</i><b>)</b> trials when the probability of a success on\n                     one trial is <i>p</i>; <b>0</b> if <i>k</i> &lt; 0; or <b>1</b> if <i>k</i> &gt; <i>n</i>\n       Domain <i>n</i>:     0 to 1e+17\n       Domain <i>k</i>:     -8e+307 to 8e+307; interesting domain is 0 <u>&lt;</u> <i>k</i> &lt; <i>n</i>\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 1\n</p>"
    },
    {
        "binomial": "<p>\n<b>binomial(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the probability of observing <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>k</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a> or fewer successes\n                     in <b>floor(</b><i>n</i><b>)</b> trials when the probability of a success on\n                     one trial is <i>p</i>; <b>0</b> if <i>k</i> &lt; 0; or <b>1</b> if <i>k</i> &gt; <i>n</i>\n       Domain <i>n</i>:     0 to 1e+17\n       Domain <i>k</i>:     -8e+307 to 8e+307; interesting domain is 0 <u>&lt;</u> <i>k</i> &lt; <i>n</i>\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 1\n</p>"
    },
    {
        "binomialp": "<p>\n<b>binomialp(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the probability of observing <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>k</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a> successes in\n                     <b>floor(</b><i>n</i><b>)</b> trials when the probability of a success on one\n                     trial is <i>p</i>\n       Domain <i>n</i>:     1 to 1e+6\n       Domain <i>k</i>:     0 to n\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 1\n</p>"
    },
    {
        "binomialtail": "<p>\n<b>binomialtail(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the probability of observing <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>k</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a> or more successes\n                     in <b>floor(</b><i>n</i><b>)</b> trials when the probability of a success on\n                     one trial is <i>p</i>; <b>1</b> if <i>k</i> &lt; 0; or <b>0</b> if <i>k</i> &gt; <i>n</i>\n       Domain <i>n</i>:     0 to 1e+17\n       Domain <i>k</i>:     -8e+307 to 8e+307; interesting domain is 0 <u>&lt;</u> <i>k</i> &lt; <i>n</i>\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 1\n</p>"
    },
    {
        "binormal": "<p>\n<b>binormal(</b><i>h</i><b>,</b><i>k</i><b>,</b><i>r</i><b>)</b>\n       Description:  the joint cumulative distribution of the bivariate\n                     normal with correlation <i>r</i>\n        \n                     Cumulative over (-inf,<i>h</i>] x (-inf,<i>k</i>]\n       Domain <i>h</i>:     -8e+307 to 8e+307\n       Domain <i>k</i>:     -8e+307 to 8e+307\n       Domain <i>r</i>:     -1 to 1\n       Range:        0 to 1\n</p>"
    },
    {
        "bofd": "<p>\n<b>bofd(\"</b><i>cal</i><b>\",</b><i>e_d</i><b>)</b>\n       Description:  the <i>e_b</i> business date corresponding to <i>e_d</i>\n       Domain <i>cal</i>:   business calendar names and formats\n       Domain <i>e_d</i>:   <b>%td</b> as defined by business calendar named <i>cal</i>\n       Range:        as defined by business calendar named <i>cal</i>\n</p>"
    },
    {
        "byteorder": "<p>\n<b>byteorder()</b>\n       Description:  <b>1</b> if your computer stores numbers by using a hilo byte\n                     order and evaluates to <b>2</b> if your computer stores numbers\n                     by using a lohi byte order\n</p><p>\n                     Consider the number 1 written as a 2-byte integer.  On\n                     some computers (called hilo), it is written as \"00 01\",\n                     and on other computers (called lohi), it is written as\n                     \"01 00\" (with the least significant byte written first).\n                     There are similar issues for 4-byte integers, 4-byte\n                     floats, and 8-byte floats.  Stata automatically handles\n                     byte-order differences for Stata-created files.  Users\n                     need not be concerned about this issue.  Programmers\n                     producing custom binary files can use <b>byteorder()</b> to\n                     determine the native byte ordering; see <a href=\"/help.cgi?file\"><b>[P] file</b></a>.\n       Range:        1 and 2\n</p>"
    },
    {
        "c": "<p>\n<b>c(</b><i>name</i><b>)</b>\n       Description:  the value of the system or constant result <b>c(</b><i>name</i><b>)</b>\n        \n                     See <a href=\"/help.cgi?creturn\"><b>[P] creturn</b></a>.  Referencing <b>c(</b><i>name</i><b>)</b> will return an\n                     error if the result does not exist.\n       Domain:       names\n       Range:        real values, strings, or <i>missing</i>\n</p>"
    },
    {
        "cauchy": "<p>\n<b>cauchy(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative Cauchy distribution with location\n                     parameter <i>a</i> and scale parameter <i>b</i>\n       Domain <i>a</i>:     -1e+300 to 1e+300\n       Domain <i>b</i>:     1e-100 to 1e+300\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "cauchyden": "<p>\n<b>cauchyden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density of the Cauchy distribution with\n                     location parameter <i>a</i> and scale parameter <i>b</i>\n       Domain <i>a</i>:     -1e+300 to 1e+300\n       Domain <i>b</i>:     1e-100 to 1e+300\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "cauchytail": "<p>\n<b>cauchytail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor) Cauchy\n                     distribution with location parameter <i>a</i> and scale\n                     parameter <i>b</i>\n</p><p>\n<b>cauchytail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = 1 - <b>cauchy(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Domain <i>a</i>:     -1e+300 to 1e+300\n       Domain <i>b</i>:     1e-100 to 1e+300\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "Cdhms": "<p>\n<b>Cdhms(</b><i>e_d</i><b>,</b><i>h</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  the <i>e_tC</i> datetime (ms. with leap seconds since 01jan1960\n                     00:00:00.000) corresponding to <i>e_d</i>, <i>h</i>, <i>m</i>, <i>s</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Domain <i>h</i>:     integers 0 to 23\n       Domain <i>m</i>:     integers 0 to 59\n       Domain <i>s</i>:     reals 0.000 to 60.999\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999) and <i>missing</i>\n</p>"
    },
    {
        "ceil": "<p>\n<b>ceil(</b><i>x</i><b>)</b>\n       Description:  the unique integer <i>n</i> such that <i>n</i> - 1 &lt; <i>x</i> <u>&lt;</u> <i>n</i>; <i>x</i> (not\n                     \"<b>.</b>\") if <i>x</i> is missing, meaning that <b>ceil(.a)</b> = <b>.a</b>\n</p><p>\n                     Also see <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>x</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a>, <a href=\"/help.cgi?int()\"><b>int(</b></a><a href=\"/help.cgi?int()\"><i>x</i></a><a href=\"/help.cgi?int()\"><b>)</b></a>, and <a href=\"/help.cgi?round()\"><b>round(</b></a><a href=\"/help.cgi?round()\"><i>x</i></a><a href=\"/help.cgi?round()\"><b>)</b></a>.\n       Domain:       -8e+307 to 8e+307\n       Range:        integers in -8e+307 to 8e+307\n</p>"
    },
    {
        "char": "<p>\n<b>char(</b><i>n</i><b>)</b>\n       Description:  the character corresponding to ASCII or extended ASCII\n                     code <i>n</i>; <b>\"\"</b> if <i>n</i> is not in the domain\n        \n                     Note: ASCII codes are from 0 to 127; extended ASCII\n                     codes are from 128 to 255.  Prior to Stata 14, the\n                     display of extended ASCII characters was encoding\n                     dependent.  For example, <b>char(128)</b> on Microsoft Windows\n                     using Windows-1252 encoding displayed the Euro symbol,\n                     but on Linux using ISO-Latin-1 encoding, <b>char(128)</b>\n                     displayed an invalid character symbol.  Beginning with\n                     Stata 14, Stata's display encoding is UTF-8 on all\n                     platforms.  The <b>char(128)</b> function is an invalid UTF-8\n                     sequence and thus will display a question mark.  There\n                     are two Unicode functions corresponding to <b>char()</b>:\n                     <b>uchar()</b> and <b>ustrunescape()</b>.  You can use <b>uchar(8364)</b> or\n                     <b>ustrunescape(\"\\u20AC\")</b> to display a Euro sign on all\n                     platforms.\n       Domain <i>n</i>:     integers 0 to 255\n       Range:        ASCII characters\n</p>"
    },
    {
        "chi2": "<p>\n<b>chi2(</b><i>df</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative chi-squared distribution with <i>df</i> degrees\n                     of freedom; <b>0</b> if <i>x</i> &lt; 0\n</p><p>\n<b>chi2(</b><i>df</i><b>,</b><i>x</i><b>)</b> = <a href=\"/help.cgi?gammap()\"><b>gammap(</b></a><a href=\"/help.cgi?gammap()\"><i>df</i></a><a href=\"/help.cgi?gammap()\">/2</a><a href=\"/help.cgi?gammap()\"><b>,</b></a><a href=\"/help.cgi?gammap()\"><i>x</i></a><a href=\"/help.cgi?gammap()\">/2</a><a href=\"/help.cgi?gammap()\"><b>)</b></a>\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "chi2den": "<p>\n<b>chi2den(</b><i>df</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density of the chi-squared distribution\n                     with <i>df</i> degrees of freedom; <b>0</b> if <i>x</i> &lt; 0\n                     <b>chi2den(</b><i>df</i><b>,</b><i>x</i><b>)</b> = <a href=\"/help.cgi?gammaden()\"><b>gammaden(</b></a><a href=\"/help.cgi?gammaden()\"><i>df</i></a><a href=\"/help.cgi?gammaden()\">/2</a><a href=\"/help.cgi?gammaden()\"><b>,</b></a><a href=\"/help.cgi?gammaden()\">2</a><a href=\"/help.cgi?gammaden()\"><b>,</b></a><a href=\"/help.cgi?gammaden()\">0</a><a href=\"/help.cgi?gammaden()\"><b>,</b></a><a href=\"/help.cgi?gammaden()\"><i>x</i></a><a href=\"/help.cgi?gammaden()\"><b>)</b></a>\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "chi2tail": "<p>\n<b>chi2tail(</b><i>df</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor)\n                     chi-squared distribution with <i>df</i> degrees of freedom; <b>1</b>\n                     if <i>x</i> &lt; 0\n</p><p>\n<b>chi2tail(</b><i>df</i><b>,</b><i>x</i><b>)</b> = 1 - <b>chi2(</b><i>df</i><b>,</b><i>x</i><b>)</b>\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "Chms": "<p>\n<b>Chms(</b><i>h</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  the <i>e_tC</i> datetime (ms. with leap seconds since 01jan1960\n                     00:00:00.000) corresponding to <i>h</i>, <i>m</i>, <i>s</i> on 01jan1960\n       Domain <i>h</i>:     integers 0 to 23\n       Domain <i>m</i>:     integers 0 to 59\n       Domain <i>s</i>:     reals 0.000 to 60.999\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999) and <i>missing</i>\n</p>"
    },
    {
        "cholesky": "<p>\n<b>cholesky(</b><i>M</i><b>)</b>\n       Description:  the Cholesky decomposition of the matrix:\n                     if <i>R</i> = <b>cholesky(</b><i>S</i><b>)</b>, then <i>RR</i>^T = <i>S</i>\n</p><p>\n<i>R</i>^T indicates the transpose of <i>R</i>.\n                     Row and column names are obtained from <i>M</i>.\n       Domain:       <i>n</i> x <i>n</i>, positive-definite, symmetric matrices\n       Range:        <i>n</i> x <i>n</i> lower-triangular matrices\n</p>"
    },
    {
        "chop": "<p>\n<b>chop(</b><i>x</i><b>,</b><i>tol</i><b>)</b>\n       Description:  <b>round(</b><i>x</i><b>)</b> if <b>abs(</b><i>x</i><b>-round(</b><i>x</i><b>))</b> &lt; <i>tol</i>; otherwise, <i>x</i>; or <i>x</i> if\n                     <i>x</i> is missing\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>tol</i>:   -8e+307 to 8e+307\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "clip": "<p>\n<b>clip(</b><i>x</i><b>,</b><i>a</i><b>,</b><i>b</i><b>)</b>\n       Description:  <i>x</i> if <i>a</i> &lt; <i>x</i> &lt; <i>b</i>, <i>b</i> if <i>x</i> <u>&gt;</u> <i>b</i>, <i>a</i> if <i>x</i> <u>&lt;</u> <i>a</i>, or <i>missing</i> if <i>x</i>\n                     is missing or if <i>a</i> &gt; <i>b</i>; <i>x</i> if <i>x</i> is missing\n</p><p>\n                     If <i>a</i> or <i>b</i> is missing, this is interpreted as <i>a</i> = -inf or\n                     <i>b</i> = +inf, respectively.\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>a</i>:     -8e+307 to 8e+307\n       Domain <i>b</i>:     -8e+307 to 8e+307\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "Clock": "<p>\n<b>Clock(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_tC</i> datetime (ms. with leap seconds since 01jan1960\n                     00:00:00.000) corresponding to <i>s1</i> based on <i>s2</i> and <i>Y</i>\n</p><p>\n                     Function <b>Clock()</b> works the same as function <b>clock()</b>\n                     except that <b>Clock()</b> returns a leap second-adjusted <b>%tC</b>\n                     value rather than an unadjusted <b>%tc</b> value.  Use <b>Clock()</b>\n                     only if original time values have been adjusted for leap\n                     seconds.\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999) and <i>missing</i>\n</p><p>\n<b>clock(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_tc</i> datetime (ms. since 01jan1960 00:00:00.000)\n                     corresponding to <i>s1</i> based on <i>s2</i> and <i>Y</i>\n</p><p>\n<i>s1</i> contains the date, time, or both, recorded as a\n                     string, in virtually any format. Months can be spelled\n                     out, abbreviated (to three characters), or indicated as\n                     numbers; years can include or exclude the century;\n                     blanks and punctuation are allowed.\n</p><p>\n<i>s2</i> is any permutation of <b>M</b>, <b>D</b>, [<i>##</i>]<b>Y</b>, <b>h</b>, <b>m</b>, and <b>s</b>, with\n                     their order defining the order that month, day, year,\n                     hour, minute, and second occur (and whether they occur)\n                     in <i>s1</i>.  <i>##</i>, if specified, indicates the default century\n                     for two-digit years in <i>s1</i>.  For instance, <i>s2</i> = <b>\"MD19Y</b>\n<b>hm\"</b> would translate <i>s1</i> = <b>\"11/15/91 21:14\"</b> as 15nov1991\n                     21:14.  The space in <b>\"MD19Y hm\"</b> was not significant and\n                     the string would have translated just as well with\n                     <b>\"MD19Yhm\"</b>.\n</p><p>\n<i>Y</i> provides an alternate way of handling two-digit years.\n                     <i>Y</i> specifies the largest year that is to be returned when\n                     a two-digit year is encountered; see <a href=\"/help.cgi?date()\"><b>date()</b></a>.  If neither\n                     <i>##</i> nor <i>Y</i> is specified, <b>clock()</b> returns <i>missing</i> when it\n                     encounters a two-digit year.\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999) and <i>missing</i>\n</p>"
    },
    {
        "cloglog": "<p>\n<b>cloglog(</b><i>x</i><b>)</b>\n       Description:  the complementary log-log of <i>x</i>\n<b>cloglog(</b><i>x</i><b>)</b> = ln{-ln(1-<i>x</i>)}\n       Domain:       0 to 1\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "Cmdyhms": "<p>\n<b>Cmdyhms(</b><i>M</i><b>,</b><i>D</i><b>,</b><i>Y</i><b>,</b><i>h</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  the <i>e_tC</i> datetime (ms. with leap seconds since 01jan1960\n                     00:00:00.000) corresponding to <i>M</i>, <i>D</i>, <i>Y</i>, <i>h</i>, <i>m</i>, <i>s</i>\n       Domain <i>M</i>:     integers 1 to 12\n       Domain <i>D</i>:     integers 1 to 31\n       Domain <i>Y</i>:     integers 0100 to 9999 (but probably 1800 to 2100)\n       Domain <i>h</i>:     integers 0 to 23\n       Domain <i>m</i>:     integers 0 to 59\n       Domain <i>s</i>:     reals 0.000 to 60.999\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999) and <i>missing</i>\n</p>"
    },
    {
        "Cofc": "<p>\n<b>Cofc(</b><i>e_tc</i><b>)</b>\n       Description:  the <i>e_tC</i> datetime (ms. with leap seconds since 01jan1960\n                     00:00:00.000) of <i>e_tc</i> (ms. without leap seconds since\n                     01jan1960 00:00:00.000)\n       Domain <i>e_tc</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999)\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999)\n</p><p>\n<b>cofC(</b><i>e_tC</i><b>)</b>\n       Description:  the <i>e_tc</i> datetime (ms. without leap seconds since\n                     01jan1960 00:00:00.000) of <i>e_tC</i> (ms. with leap seconds\n                     since 01jan1960 00:00:00.000)\n       Domain <i>e_tC</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999)\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999)\n</p>"
    },
    {
        "Cofd": "<p>\n<b>Cofd(</b><i>e_d</i><b>)</b>\n       Description:  the <i>e_tC</i> datetime (ms. with leap seconds since 01jan1960\n                     00:00:00.000) of date <i>e_d</i> at time 00:00:00.000\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999)\n</p><p>\n<b>cofd(</b><i>e_d</i><b>)</b>\n       Description:  the <i>e_tc</i> datetime (ms. since 01jan1960 00:00:00.000) of\n                     date <i>e_d</i> at time 00:00:00.000\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999)\n</p>"
    },
    {
        "coleqnumb": "<p>\n<b>coleqnumb(</b><i>M</i><b>,</b><i>s</i><b>)</b>\n       Description:  the equation number of <i>M</i> associated with column equation\n                     <i>s</i>; <i>missing</i> if the column equation cannot be found\n       Domain <i>M</i>:     matrices\n       Domain <i>s</i>:     strings\n       Range:        integer scalars 1 to <b>matsize</b> or <i>missing</i>\n</p>"
    },
    {
        "collatorlocale": "<p>\n<b>collatorlocale(</b><i>loc</i><b>,</b><i>type</i><b>)</b> \n       Description:  the most closely related locale supported by ICU from\n                     <i>loc</i> if <i>type</i> is <b>1</b>; the actual locale where the collation\n                     data comes from if <i>type</i> is <b>2</b>\n</p><p>\n                     For any other <i>type</i>, <i>loc</i> is returned in a canonicalized\n                     form.\n</p><p>\n<b>collatorlocale(\"en_us_texas\", 0)</b> = <b>en_US_TEXAS</b>\n<b>collatorlocale(\"en_us_texas\", 1)</b> = <b>en_US</b>\n<b>collatorlocale(\"en_us_texas\", 2)</b> = <b>root</b>\n       Domain <i>loc</i>:   strings of locale name\n       Domain <i>type</i>:  integers\n       Range:        strings\n</p>"
    },
    {
        "collatorversion": "<p>\n<b>collatorversion(</b><i>loc</i><b>)</b> \n       Description:  the version string of a collator based on locale <i>loc</i>\n</p><p>\n                     The Unicode standard is constantly adding more\n                     characters and the sort key format may change as well.\n                     This can cause <a href=\"/help.cgi?f_ustrsortkey\"><b>ustrsortkey()</b></a> and <a href=\"/help.cgi?f_ustrsortkeyex\"><b>ustrsortkeyex()</b></a> to\n                     produce incompatible sort keys between different\n                     versions of International Components for Unicode.  The\n                     version string can be used for versioning the sort keys\n                     to indicate when saved sort keys must be regenerated.\n       Range:        strings\n</p>"
    },
    {
        "collatorlocale": "<p>\n<b>collatorlocale(</b><i>loc</i><b>,</b><i>type</i><b>)</b> \n       Description:  the most closely related locale supported by ICU from\n                     <i>loc</i> if <i>type</i> is <b>1</b>; the actual locale where the collation\n                     data comes from if <i>type</i> is <b>2</b>\n</p><p>\n                     For any other <i>type</i>, <i>loc</i> is returned in a canonicalized\n                     form.\n</p><p>\n<b>collatorlocale(\"en_us_texas\", 0)</b> = <b>en_US_TEXAS</b>\n<b>collatorlocale(\"en_us_texas\", 1)</b> = <b>en_US</b>\n<b>collatorlocale(\"en_us_texas\", 2)</b> = <b>root</b>\n       Domain <i>loc</i>:   strings of locale name\n       Domain <i>type</i>:  integers\n       Range:        strings\n</p>"
    },
    {
        "collatorversion": "<p>\n<b>collatorversion(</b><i>loc</i><b>)</b> \n       Description:  the version string of a collator based on locale <i>loc</i>\n</p><p>\n                     The Unicode standard is constantly adding more\n                     characters and the sort key format may change as well.\n                     This can cause <a href=\"/help.cgi?f_ustrsortkey\"><b>ustrsortkey()</b></a> and <a href=\"/help.cgi?f_ustrsortkeyex\"><b>ustrsortkeyex()</b></a> to\n                     produce incompatible sort keys between different\n                     versions of International Components for Unicode.  The\n                     version string can be used for versioning the sort keys\n                     to indicate when saved sort keys must be regenerated.\n       Range:        strings\n</p>"
    },
    {
        "colnfreeparms": "<p>\n<b>colnfreeparms(</b><i>M</i><b>)</b>\n       Description:  the number of free parameters in columns of <i>M</i>\n       Domain <i>M</i>:     matrices\n       Range:        integer scalars 0 to <b>matsize</b>\n</p>"
    },
    {
        "colnumb": "<p>\n<b>colnumb(</b><i>M</i><b>,</b><i>s</i><b>)</b>\n       Description:  the column number of <i>M</i> associated with column name <i>s</i>;\n                     <i>missing</i> if the column cannot be found\n       Domain <i>M</i>:     matrices\n       Domain <i>s</i>:     strings\n       Range:        integer scalars 1 to <b>matsize</b> or <i>missing</i>\n</p>"
    },
    {
        "colsof": "<p>\n<b>colsof(</b><i>M</i><b>)</b>\n       Description:  the number of columns of <i>M</i>\n       Domain:       matrices\n       Range:        integer scalars 1 to <b>matsize</b>\n</p>"
    },
    {
        "comb": "<p>\n<b>comb(</b><i>n</i><b>,</b><i>k</i><b>)</b>\n       Description:  the combinatorial function <i>n</i>!/{<i>k</i>!(<i>n</i> - <i>k</i>)!}\n       Domain <i>n</i>:     integers 1 to 1e+305\n       Domain <i>k</i>:     integers 0 to <i>n</i>\n       Range:        0 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "cond": "<p>\n<b>cond(</b><i>x</i><b>,</b><i>a</i><b>,</b><i>b</i>[<b>,</b><i>c</i>]<b>)</b>\n       Description:  <i>a</i> if <i>x</i> is true and nonmissing, <i>b</i> if <i>x</i> is false, and <i>c</i> if\n                     <i>x</i> is <i>missing</i>; <i>a</i> if <i>c</i> is not specified and <i>x</i> evaluates to\n                     <i>missing</i>\n</p><p>\n                     Note that expressions such as <i>x</i>&gt;2 will never evaluate to\n                     <i>missing</i>.\n</p><p>\n<b>cond(x&gt;2,50,70)</b> returns <b>50</b> if <b>x</b> &gt; <b>2</b> (includes <b>x</b> <u>&gt;</u> <b>.</b>)\n                     <b>cond(x&gt;2,50,70)</b> returns <b>70</b> if <b>x</b> <u>&lt;</u> <b>2</b>\n</p><p>\n                     If you need a case for missing values in the above\n                     examples, try\n</p><p>\n<b>cond(missing(x), ., cond(x&gt;2,50,70))</b> returns <b>.</b> if <b>x</b> is\n                     <i>missing</i>, returns <b>50</b> if <b>x</b> &gt; <b>2</b>, and returns <b>70</b> if <b>x</b> <u>&lt;</u> <b>2</b>\n</p><p>\n                     If the first argument is a scalar that may contain a\n                     missing value or a variable containing missing values,\n                     the fourth argument has an effect.\n</p><p>\n<b>cond(wage,1,0,.)</b> returns <b>1</b> if <b>wage</b> is not zero and not\n                     missing\n                     <b>cond(wage,1,0,.)</b> returns <b>0</b> if <b>wage</b> is zero\n                     <b>cond(wage,1,0,.)</b> returns <b>.</b> if <b>wage</b> is <i>missing</i>\n</p><p>\n                     Caution: If the first argument to <b>cond()</b> is a logical\n                     expression, that is, <b>cond(x&gt;2,50,70,.)</b>, the fourth\n                     argument is never reached.\n       Domain <i>x</i>:     -8e+307 to 8e+307 or <i>missing</i>; 0 means false, otherwise\n                     interpreted as true\n       Domain <i>a</i>:     numbers and strings\n       Domain <i>b</i>:     numbers if <i>a</i> is a number; strings if <i>a</i> is a string\n       Domain <i>c</i>:     numbers if <i>a</i> is a number; strings if <i>a</i> is a string\n       Range:        <i>a</i>, <i>b</i>, and <i>c</i>\n</p>"
    },
    {
        "corr": "<p>\n<b>corr(</b><i>M</i><b>)</b>\n       Description:  the correlation matrix of the variance matrix\n</p><p>\n                     Row and column names are obtained from <i>M</i>.\n       Domain:       <i>n</i> x <i>n</i> symmetric variance matrices\n       Range:        <i>n</i> x <i>n</i> symmetric correlation matrices\n</p>"
    },
    {
        "cos": "<p>\n<b>cos(</b><i>x</i><b>)</b>\n       Description:  the cosine of <i>x</i>, where <i>x</i> is in radians\n       Domain:       -1e+18 to 1e+18\n       Range:        -1 to 1\n</p>"
    },
    {
        "cosh": "<p>\n<b>cosh(</b><i>x</i><b>)</b>\n       Description:  the hyperbolic cosine of <i>x</i>,\n                     <b>cosh(</b><i>x</i><b>)</b> = {exp(<i>x</i>) + exp(-<i>x</i>)}/2\n       Domain:       -709 to 709\n       Range:        1 to 4.11e+307\n</p>"
    },
    {
        "date": "<p>\n<b>date(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) corresponding to <i>s1</i>\n                     based on <i>s2</i> and <i>Y</i>\n</p><p>\n<i>s1</i> contains the date, recorded as a string, in virtually\n                     any format.  Months can be spelled out, abbreviated (to\n                     three characters), or indicated as numbers; years can\n                     include or exclude the century; blanks and punctuation\n                     are allowed.\n</p><p>\n<i>s2</i> is any permutation of <b>M</b>, <b>D</b>, and [<i>##</i>]<i>Y</i>, with their\n                     order defining the order that month, day, and year occur\n                     in <i>s1</i>.  <i>##</i>, if specified, indicates the default century\n                     for two-digit years in <i>s1</i>.  For instance, <i>s2</i>=<b>\"MD19Y\"</b>\n                     would translate <i>s1</i>=<b>\"11/15/91\"</b> as 15nov1991.\n</p><p>\n<i>Y</i> provides an alternate way of handling two-digit years.\n                     When a two-digit year is encountered, the largest year,\n                     <i>topyear</i>, that does not exceed <i>Y</i> is returned.\n</p><p>\n<b>date(\"1/15/08\",\"MDY\",1999)</b> = 15jan1908\n                            <b>date(\"1/15/08\",\"MDY\",2019)</b> = 15jan2008\n</p><p>\n<b>date(\"1/15/51\",\"MDY\",2000)</b> = 15jan1951\n                            <b>date(\"1/15/50\",\"MDY\",2000)</b> = 15jan1950\n                            <b>date(\"1/15/49\",\"MDY\",2000)</b> = 15jan1949\n</p><p>\n<b>date(\"1/15/01\",\"MDY\",2050)</b> = 15jan2001\n                            <b>date(\"1/15/00\",\"MDY\",2050)</b> = 15jan2000\n</p><p>\n                     If neither <i>##</i> nor <i>Y</i> is specified, <b>date()</b> returns <i>missing</i>\n                     when it encounters a two-digit year. See <a href=\"/help.cgi?datetime+translation#twodigit\"><i>Working with</i></a>\n<a href=\"/help.cgi?datetime+translation#twodigit\"><i>two-digit years</i></a> in <a href=\"/help.cgi?datetime+translation\"><b>[D] datetime translation</b></a> for more\n                     information.\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549) or <i>missing</i>\n</p><p>\n<b>daily(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  a synonym for <b>date(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n</p>"
    },
    {
        "date": "<p>\n<b>date(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) corresponding to <i>s1</i>\n                     based on <i>s2</i> and <i>Y</i>\n</p><p>\n<i>s1</i> contains the date, recorded as a string, in virtually\n                     any format.  Months can be spelled out, abbreviated (to\n                     three characters), or indicated as numbers; years can\n                     include or exclude the century; blanks and punctuation\n                     are allowed.\n</p><p>\n<i>s2</i> is any permutation of <b>M</b>, <b>D</b>, and [<i>##</i>]<i>Y</i>, with their\n                     order defining the order that month, day, and year occur\n                     in <i>s1</i>.  <i>##</i>, if specified, indicates the default century\n                     for two-digit years in <i>s1</i>.  For instance, <i>s2</i>=<b>\"MD19Y\"</b>\n                     would translate <i>s1</i>=<b>\"11/15/91\"</b> as 15nov1991.\n</p><p>\n<i>Y</i> provides an alternate way of handling two-digit years.\n                     When a two-digit year is encountered, the largest year,\n                     <i>topyear</i>, that does not exceed <i>Y</i> is returned.\n</p><p>\n<b>date(\"1/15/08\",\"MDY\",1999)</b> = 15jan1908\n                            <b>date(\"1/15/08\",\"MDY\",2019)</b> = 15jan2008\n</p><p>\n<b>date(\"1/15/51\",\"MDY\",2000)</b> = 15jan1951\n                            <b>date(\"1/15/50\",\"MDY\",2000)</b> = 15jan1950\n                            <b>date(\"1/15/49\",\"MDY\",2000)</b> = 15jan1949\n</p><p>\n<b>date(\"1/15/01\",\"MDY\",2050)</b> = 15jan2001\n                            <b>date(\"1/15/00\",\"MDY\",2050)</b> = 15jan2000\n</p><p>\n                     If neither <i>##</i> nor <i>Y</i> is specified, <b>date()</b> returns <i>missing</i>\n                     when it encounters a two-digit year. See <a href=\"/help.cgi?datetime+translation#twodigit\"><i>Working with</i></a>\n<a href=\"/help.cgi?datetime+translation#twodigit\"><i>two-digit years</i></a> in <a href=\"/help.cgi?datetime+translation\"><b>[D] datetime translation</b></a> for more\n                     information.\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549) or <i>missing</i>\n</p><p>\n<b>daily(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  a synonym for <b>date(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n</p>"
    },
    {
        "day": "<p>\n<b>day(</b><i>e_d</i><b>)</b>\n       Description:  the numeric day of the month corresponding to <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        integers 1 to 31 or <i>missing</i>\n</p>"
    },
    {
        "det": "<p>\n<b>det(</b><i>M</i><b>)</b>\n       Description:  the determinant of matrix <i>M</i>\n       Domain:       <i>n</i> x <i>n</i> (square) matrices\n       Range:        scalars -8e+307 to 8e+307\n</p>"
    },
    {
        "dgammapda": "<p>\n<b>dgammapda(</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the partial derivative of the cumulative gamma\n                     distribution <b>gammap(</b><i>a</i><b>,</b><i>x</i><b>)</b> with respect to <i>a</i>, for <i>a</i> &gt; 0; <b>0</b>\n                     if <i>x</i> &lt; 0\n       Domain <i>a</i>:     1e-7 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        -16 to 0\n</p>"
    },
    {
        "dgammapdada": "<p>\n<b>dgammapdada(</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the 2nd partial derivative of the cumulative gamma\n                     distribution <b>gammap(</b><i>a</i><b>,</b><i>x</i><b>)</b> with respect to <i>a</i>, for <i>a</i> &gt; 0; <b>0</b>\n                     if <i>x</i> &lt; 0\n       Domain <i>a</i>:     1e-7 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        -0.02 to 4.77e+5\n</p>"
    },
    {
        "dgammapdadx": "<p>\n<b>dgammapdadx(</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the 2nd partial derivative of the cumulative gamma\n                     distribution <b>gammap(</b><i>a</i><b>,</b><i>x</i><b>)</b> with respect to <i>a</i> and <i>x</i>, for <i>a</i>\n                     &gt; 0; <b>0</b> if <i>x</i> &lt; 0\n       Domain <i>a</i>:     1e-7 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        -0.04 to 8e+307\n</p>"
    },
    {
        "dgammapdx": "<p>\n<b>dgammapdx(</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the partial derivative of the cumulative gamma\n                     distribution <b>gammap(</b><i>a</i><b>,</b><i>x</i><b>)</b> with respect to <i>x</i>, for <i>a</i> &gt; 0; <b>0</b>\n                     if <i>x</i> &lt; 0\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "dgammapdxdx": "<p>\n<b>dgammapdxdx(</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the 2nd partial derivative of the cumulative gamma\n                     distribution <b>gammap(</b><i>a</i><b>,</b><i>x</i><b>)</b> with respect to <i>x</i>, for <i>a</i> &gt; 0; <b>0</b>\n                     if <i>x</i> &lt; 0\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1e+40\n</p>"
    },
    {
        "dhms": "<p>\n<b>dhms(</b><i>e_d</i><b>,</b><i>h</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  the <i>e_tc</i> datetime (ms. since 01jan1960 00:00:00.000)\n                     corresponding to <i>e_d</i>, <i>h</i>, <i>m</i>, <i>s</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Domain <i>h</i>:     integers 0 to 23\n       Domain <i>m</i>:     integers 0 to 59\n       Domain <i>s</i>:     reals 0.000 to 59.999\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999) and <i>missing</i>\n</p>"
    },
    {
        "diag": "<p>\n<b>diag(</b><i>M</i><b>)</b>\n       Description:  the square, diagonal matrix created from the row or\n                     column vector\n</p><p>\n                     Row and column names are obtained from the column names\n                     of <i>M</i> if <i>M</i> is a row vector or from the row names of <i>M</i> if\n                     <i>M</i> is a column vector.\n       Domain:       1 x <i>n</i> and <i>n</i> x 1 vectors\n       Range:        <i>n</i> x <i>n</i> diagonal matrices\n</p>"
    },
    {
        "diag0cnt": "<p>\n<b>diag0cnt(</b><i>M</i><b>)</b>\n       Description:  the number of zeros on the diagonal of <i>M</i>\n       Domain:       <i>n</i> x <i>n</i> (square) matrices\n       Range:        integer scalars 0 to <i>n</i>\n</p>"
    },
    {
        "digamma": "<p>\n<b>digamma(</b><i>x</i><b>)</b>\n       Description:  the <b>digamma()</b> function\n</p><p>\n                     This is the derivative of <b>lngamma(</b><i>x</i><b>)</b>.  The <b>digamma(</b><i>x</i><b>)</b>\n                     function is sometimes called the psi function.\n       Domain:       -1e+15 to 8e+307\n       Range:        -8e+307 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "dofb": "<p>\n<b>dofb(</b><i>e_b</i><b>,\"</b><i>cal</i><b>\")</b>\n       Description:  the <i>e_d</i> datetime corresponding to <i>e_b</i>\n       Domain <i>e_b</i>:   <b>%tb</b> as defined by business calendar named <i>cal</i>\n       Domain <i>cal</i>:   business calendar names and formats\n       Range:        as defined by business calendar named <i>cal</i>\n</p>"
    },
    {
        "dofC": "<p>\n<b>dofC(</b><i>e_tC</i><b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) of datetime <i>e_tC</i>\n                     (ms. with leap seconds since 01jan1960 00:00:00.000)\n       Domain <i>e_tC</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999)\n       Range:        <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n</p><p>\n<b>dofc(</b><i>e_tc</i><b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) of datetime <i>e_tC</i>\n                     (ms. since 01jan1960 00:00:00.000)\n       Domain <i>e_tc</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999)\n       Range:        <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n</p>"
    },
    {
        "dofh": "<p>\n<b>dofh(</b><i>e_h</i><b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) of the start of\n                     half-year <i>e_h</i>\n       Domain <i>e_h</i>:   <b>%th</b> dates 0100h1 to 9999h2 (integers -3,720 to 16,079)\n       Range:        <b>%td</b> dates 01jan0100 to 01jul9999 (integers -679,350 to\n                     2,936,366)\n</p>"
    },
    {
        "dofm": "<p>\n<b>dofm(</b><i>e_m</i><b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) of the start of\n                     month <i>e_m</i>\n       Domain <i>e_m</i>:   <b>%tm</b> dates 0100m1 to 9999m12 (integers -22,320 to 96,479)\n       Range:        <b>%td</b> dates 01jan0100 to 01dec9999 (integers -679,350 to\n                     2,936,519)\n</p>"
    },
    {
        "dofq": "<p>\n<b>dofq(</b><i>e_q</i><b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) of the start of\n                     quarter <i>e_q</i>\n       Domain <i>e_q</i>:   <b>%tq</b> dates 0100q1 to 9999q4 (integers -7,440 to 32,159)\n       Range:        <b>%td</b> dates 01jan0100 to 01oct9999 (integers -679,350 to\n                     2,936,458)\n</p>"
    },
    {
        "dofw": "<p>\n<b>dofw(</b><i>e_w</i><b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) of the start of week\n                     <i>e_w</i>\n       Domain <i>e_w</i>:   <b>%tw</b> dates 0100w1 to 9999w52 (integers -96,720 to\n                     418,079)\n       Range:        <b>%td</b> dates 01jan0100 to 24dec9999 (integers -679,350 to\n                     2,936,542)\n</p>"
    },
    {
        "dofy": "<p>\n<b>dofy(</b><i>e_y</i><b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) of 01jan in year <i>e_y</i>\n       Domain <i>e_y</i>:   <b>%ty</b> dates 0100 to 9999 (integers 0100 to 9999)\n       Range:        <b>%td</b> dates 01jan0100 to 01jan9999 (integers -679,350 to\n                     2,936,185)\n</p>"
    },
    {
        "dow": "<p>\n<b>dow(</b><i>e_d</i><b>)</b>\n       Description:  the numeric day of the week corresponding to date <i>e_d</i>; 0\n                     = Sunday, 1 = Monday, ..., 6 = Saturday\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        integers 0 to 6 or <i>missing</i>\n</p>"
    },
    {
        "doy": "<p>\n<b>doy(</b><i>e_d</i><b>)</b>\n       Description:  the numeric day of the year corresponding to date <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        integers 1 to 366 or <i>missing</i>\n</p>"
    },
    {
        "dunnettprob": "<p>\n<b>dunnettprob(</b><i>k</i><b>,</b><i>df</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative multiple range distribution that is used\n                     in Dunnett's multiple-comparison method with <i>k</i> ranges\n                     and <i>df</i> degrees of freedom; <b>0</b> if <i>x</i> &lt; 0\n</p><p>\n<b>dunnettprob()</b> is computed using an algorithm described\n                     in <a href=\"/help.cgi?density_functions#M1981\">Miller (1981)</a>.\n       Domain <i>k</i>:     2 to 1e+6\n       Domain <i>df</i>:    2 to 1e+6\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p><p>\n</p><p>\n<b><u>Reference</u></b>\n</p><p>\n    Miller, R. G.  1981.  <i>Simultaneous Statistical Inference</i>.  2nd ed.  New\n        York: Springer.\n</p>"
    },
    {
        "e": "<p>\n<b>e(</b><i>name</i><b>)</b>\n       Description:  the value of stored result <b>e(</b><i>name</i><b>)</b>; see <b>[U] 18.8</b>\n<b>Accessing results calculated by other programs</b>\n</p><p>\n<b>e(</b><i>name</i><b>)</b> = scalar missing if the stored result does not\n                         exist\n                     <b>e(</b><i>name</i><b>)</b> = specified matrix if the stored result is a\n                         matrix\n                     <b>e(</b><i>name</i><b>)</b> = scalar numeric value if the stored result is a\n                         scalar\n       Domain:       names\n       Range:        strings, scalars, matrices, or <i>missing</i>\n</p><p>\n<b>e(sample)</b>\n       Description:  <b>1</b> if the observation is in the estimation sample and <b>0</b>\n                     otherwise\n       Range:        0 to 1\n</p>"
    },
    {
        "el": "<p>\n<b>el(</b><i>s</i><b>,</b><i>i</i><b>,</b><i>j</i><b>)</b>\n       Description:  <i>s</i><b>[floor(</b><i>i</i><b>),floor(</b><i>j</i><b>)]</b>, the <i>i</i>,<i>j</i> element of the matrix\n                     named <i>s</i>; missing if <i>i</i> or <i>j</i> are out of range or if matrix\n                     <i>s</i> does not exist\n       Domain <i>s</i>:     strings containing matrix name\n       Domain <i>i</i>:     scalars 1 to <b>matsize</b>\n       Domain <i>j</i>:     scalars 1 to <b>matsize</b>\n       Range:        scalars -8e+307 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "epsdouble": "<p>\n<b>epsdouble()</b>\n       Description:  the machine precision of a double-precision number\n        \n                     If <i>d</i> &lt; <b>epsdouble()</b> and (double) <i>x</i> = 1, then <i>x</i> + <i>d</i> =\n                     (double) 1.  This function takes no arguments, but the\n                     parentheses must be included.\n       Range:        a double-precision number close to 0\n</p>"
    },
    {
        "epsfloat": "<p>\n<b>epsfloat()</b>\n       Description:  the machine precision of a floating-point number\n</p><p>\n                     If <i>d</i> &lt; <b>epsfloat()</b> and (float) <i>x</i> = 1, then <i>x</i> + <i>d</i> =\n                     (float) 1.  This function takes no arguments, but the\n                     parentheses must be included.\n       Range:        a floating-point number close to 0\n</p>"
    },
    {
        "exp": "<p>\n<b>exp(</b><i>x</i><b>)</b>\n       Description:  the exponential function of <i>e</i>^<i>x</i>\n</p><p>\n                     This function is the inverse of <b>ln(</b><i>x</i><b>)</b>.\n       Domain:       -8e+307 to 709\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "exponential": "<p>\n<b>exponential(</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative exponential distribution with scale <i>b</i>\n</p><p>\n                     The cumulative distribution function of the exponential\n                     distribution is\n</p><p>\n                                             1 - exp(-<i>x</i>/<i>b</i>)\n</p><p>\n                     for <i>x</i> <u>&gt;</u> 0 and 0 for <i>x</i> &lt; 0, where <i>b</i> is the scale and <i>x</i> is\n                     the value of an exponential variate.\n                     The mean of the exponential distribution is <i>b</i> and its\n                     variance is <i>b</i>^2.\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "exponentialden": "<p>\n<b>exponentialden(</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density function of the exponential\n                     distribution with scale <i>b</i>\n</p><p>\n                     The probability density function of the exponential\n                     distribution is\n</p><p>\n                                             1/<i>b</i> exp(-<i>x</i>/<i>b</i>)\n</p><p>\n                     where <i>b</i> is the scale and <i>x</i> is the value of an\n                     exponential variate.\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        1e-323 to 8e+307\n</p>"
    },
    {
        "exponentialtail": "<p>\n<b>exponentialtail(</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative exponential distribution with\n                     scale <i>b</i>\n</p><p>\n                     The reverse cumulative distribution function of the\n                     exponential distribution is\n</p><p>\n                                             exp(-<i>x</i>/<i>b</i>)\n</p><p>\n                     where <i>b</i> is the scale and <i>x</i> is the value of an\n                     exponential variate.\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "F": "<p>\n<b>F(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>)</b>\n       Description:  the cumulative F distribution with <i>df1</i> numerator and <i>df2</i>\n                     denominator degrees of freedom; <b>0</b> if <i>f</i> &lt; 0\n       Domain <i>df1</i>:   2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>df2</i>:   2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>f</i>:     -8e+307 to 8e+307; interesting domain is <i>f</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "Fden": "<p>\n<b>Fden(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>)</b>\n       Description:  the probability density function for the F distribution\n                     with <i>df1</i> numerator and <i>df2</i> denominator degrees of\n                     freedom; <b>0</b> if <i>f</i> &lt; 0\n       Domain <i>df1</i>:   1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>df2</i>:   1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>f</i>:     -8e+307 to 8e+307; interesting domain is <i>f</i> <u>&gt;</u> 0\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "fileexists": "<p>\n<b>fileexists(</b><i>f</i><b>)</b>\n       Description:  <b>1</b> if the file specified by <i>f</i> exists; otherwise, <b>0</b>\n</p><p>\n                     If the file exists but is not readable, <b>fileexists()</b>\n                     will still return <b>1</b>, because it does exist.  If the\n                     \"file\" is a directory, <b>fileexists()</b> will return <b>0</b>.\n       Domain:       filenames\n       Range:        0 and 1\n</p>"
    },
    {
        "fileread": "<p>\n<b>fileread(</b><i>f</i><b>)</b>\n       Description:  the contents of the file specified by <i>f</i>\n</p><p>\n                     If the file does not exist or an I/O error occurs while\n                     reading the file, then \"<b>fileread() error</b> <i>#</i>\" is returned,\n                     where <i>#</i> is a standard Stata error return code.\n       Domain:       filenames\n       Range:        strings\n</p>"
    },
    {
        "filereaderror": "<p>\n<b>filereaderror(</b><i>s</i><b>)</b>\n       Description:  <b>0</b> or positive integer, said value having the\n                     interpretation of a return code\n</p><p>\n                     It is used like this\n</p><p>\n<b>. generate strL</b> <i>s</i> <b>= fileread(</b><i>filename</i><b>) if</b>\n<b>fileexists(</b><i>filename</i><b>)</b>\n<b>. assert filereaderror(</b><i>s</i><b>)==0</b>\n</p><p>\n                     or this\n</p><p>\n<b>. generate strL</b> <i>s</i> <b>= fileread(</b><i>filename</i><b>) if</b>\n<b>fileexists(</b><i>filename</i><b>)</b>\n<b>. generate</b> <i>rc</i> <b>= filereaderror(</b><i>s</i><b>)</b>\n</p><p>\n                     That is, <b>filereaderror(</b><i>s</i><b>)</b> is used on the result returned\n                     by <b>fileread(</b><i>filename</i><b>)</b> to determine whether an I/O error\n                     occurred.\n</p><p>\n                     In the example, we only <b>fileread()</b> files that\n                     <b>fileexists()</b>.  That is not required.  If the file does\n                     not exist, that will be detected by <b>filereaderror()</b> as\n                     an error.  The way we showed the example, we did not\n                     want to read missing files as errors.  If we wanted to\n                     treat missing files as errors, we would have coded\n</p><p>\n<b>. generate strL</b> <i>s</i> <b>= fileread(</b><i>filename</i><b>)</b>\n<b>. assert filereaderror(</b><i>s</i><b>)==0</b>\n</p><p>\n                     or\n</p><p>\n<b>. generate strL</b> <i>s</i> <b>= fileread(</b><i>filename</i><b>)</b>\n<b>. generate</b> <i>rc</i> <b>= filereaderror(</b><i>s</i><b>)</b>\n       Domain:       strings\n       Range:        integers\n</p>"
    },
    {
        "filewrite": "<p>\n<b>filewrite(</b><i>f</i><b>,</b><i>s</i>[<b>,</b><i>r</i>]<b>)</b>\n       Description:  writes the string specified by <i>s</i> to the file specified\n                     by <i>f</i> and returns the number of bytes in the resulting\n                     file\n</p><p>\n                     If the optional argument <i>r</i> is specified as 1, the file\n                     specified by <i>f</i> will be replaced if it exists.  If <i>r</i> is\n                     specified as 2, the file specified by <i>f</i> will be appended\n                     to if it exists.  Any other values of <i>r</i> are treated as\n                     if <i>r</i> were not specified; that is, <i>f</i> will only be written\n                     to if it does not already exist.\n</p><p>\n                     When the file <i>f</i> is freshly created or is replaced, the\n                     value returned by <b>filewrite()</b> is the number of bytes\n                     written to the file, <b>strlen(</b><i>s</i><b>)</b>.  If <i>r</i> is specified as 2,\n                     and thus <b>filewrite()</b> is appending to an existing file,\n                     the value returned is the total number of bytes in the\n                     resulting file; that is, the value is the sum of the\n                     number of the bytes in the file as it existed before\n                     <b>filewrite()</b> was called and the number of bytes newly\n                     written to it, <b>strlen(</b><i>s</i><b>)</b>.\n</p><p>\n                     If the file exists and <i>r</i> is not specified as 1 or 2, or\n                     an error occurs while writing to the file, then a\n                     negative number (<i>#</i>) is returned, where <b>abs(</b><i>#</i><b>)</b> is a\n                     standard Stata error return code.\n       Domain <i>f</i>:     filenames\n       Domain <i>s</i>:     strings\n       Domain <i>r</i>:     integers 1 or 2\n       Range:        integers\n</p>"
    },
    {
        "float": "<p>\n<b>float(</b><i>x</i><b>)</b>\n       Description:  the value of <i>x</i> rounded to <b>float</b> precision\n</p><p>\n                     Although you may store your numeric variables as <b>byte</b>,\n                     <b>int</b>, <b>long</b>, <b>float</b>, or <b>double</b>, Stata converts all numbers\n                     to <b>double</b> before performing any calculations.\n                     Consequently, difficulties can arise in comparing\n                     numbers that have no finite binary representations.\n</p><p>\n                     For example, if the variable <b>x</b> is stored as a <b>float</b> and\n                     contains the value <b>1.1</b> (a repeating \"decimal\" in\n                     binary), the expression <b>x==1.1</b> will evaluate to <i>false</i>\n                     because the literal <b>1.1</b> is the <b>double</b> representation of\n                     1.1, which is different from the <b>float</b> representation\n                     stored in <b>x</b>.  (They differ by 2.384 x 10^(-8).) The\n                     expression <b>x==float(1.1)</b> will evaluate to <i>true</i> because\n                     the <b>float()</b> function converts the literal <b>1.1</b> to its\n                     <b>float</b> representation before it is compared with <b>x</b>. (See\n                     <b>[U] 13.12 Precision and problems therein</b> for more\n                     information.)\n       Domain:       -1e+38 to 1e+38\n       Range:        -1e+38 to 1e+38\n</p>"
    },
    {
        "floor": "<p>\n<b>floor(</b><i>x</i><b>)</b>\n       Description:  the unique integer <i>n</i> such that <i>n</i> <u>&lt;</u> <i>x</i> &lt; <i>n</i> + 1; <i>x</i> (not\n                     \"<b>.</b>\") if <i>x</i> is missing, meaning that <b>floor(.a)</b> = <b>.a</b>\n</p><p>\n                     Also see <a href=\"/help.cgi?ceil()\"><b>ceil(</b></a><a href=\"/help.cgi?ceil()\"><i>x</i></a><a href=\"/help.cgi?ceil()\"><b>)</b></a>, <a href=\"/help.cgi?int()\"><b>int(</b></a><a href=\"/help.cgi?int()\"><i>x</i></a><a href=\"/help.cgi?int()\"><b>)</b></a>, and <a href=\"/help.cgi?round()\"><b>round(</b></a><a href=\"/help.cgi?round()\"><i>x</i></a><a href=\"/help.cgi?round()\"><b>)</b></a>.\n       Domain:       -8e+307 to 8e+307\n       Range:        integers in -8e+307 to 8e+307\n</p>"
    },
    {
        "fmtwidth": "<p>\n<b>fmtwidth(</b><i>fmtstr</i><b>)</b>\n       Description:  the output length of the <b>%</b><i>fmt</i> contained in <i>fmtstr</i>;\n                     <i>missing</i> if <i>fmtstr</i> does not contain a valid <b>%</b><i>fmt</i>\n</p><p>\n                     For example, <b>fmtwidth(\"%9.2f\")</b> returns <b>9</b> and\n                     <b>fmtwidth(\"%tc\")</b> returns <b>18</b>.\n       Range:        strings\n</p>"
    },
    {
        "Ftail": "<p>\n<b>Ftail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor) F\n                     distribution with <i>df1</i> numerator and <i>df2</i> denominator\n                     degrees of freedom; <b>1</b> if <i>f</i> &lt; 0\n</p><p>\n<b>Ftail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>)</b> = 1 - <b>F(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>)</b>\n       Domain <i>df1</i>:   2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>df2</i>:   2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>f</i>:     -8e+307 to 8e+307; interesting domain is <i>f</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "gammaden": "<p>\n<b>gammaden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density function of the gamma\n                     distribution; <b>0</b> if <i>x</i> &lt; <i>g</i>\n</p><p>\n<i>a</i> is the shape parameter, <i>b</i> is the scale parameter, and\n                     <i>g</i> is the location parameter.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> <i>g</i>\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "gammap": "<p>\n<b>gammap(</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative gamma distribution with shape parameter\n                     <i>a</i>; <b>0</b> if <i>x</i> &lt; 0\n</p><p>\n                     The cumulative Poisson (the probability of observing <i>k</i>\n                     or fewer events if the expected is <i>x</i>) can be evaluated\n                     as <b>1-gammap(</b><i>k</i><b>+1,</b><i>x</i><b>)</b>. The reverse cumulative (the\n                     probability of observing <i>k</i> or more events) can be\n                     evaluated as <b>gammap(</b><i>k</i><b>,</b><i>x</i><b>)</b>.\n</p><p>\n<b>gammap()</b> is also known as the incomplete gamma function\n                     (ratio).\n     \n                     Probabilities for the three-parameter gamma distribution\n                     (see <a href=\"/help.cgi?gammaden()\"><b>gammaden()</b></a>) can be calculated by shifting and\n                     scaling <i>x</i>; that is, <b>gammap(</b><i>a</i><b>,</b>(<i>x</i> - <i>g</i>)/<i>b</i><b>)</b>.\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "gammaptail": "<p>\n<b>gammaptail(</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor) gamma\n                     distribution with shape parameter <i>a</i>; <b>1</b> if <i>x</i> &lt; 0\n</p><p>\n<b>gammaptail()</b> is also known as the complement to the\n                     incomplete gamma function (ratio).\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "hadamard": "<p>\n<b>hadamard(</b><i>M</i><b>,</b><i>N</i><b>)</b>\n       Description:  a matrix whose <i>i</i>, <i>j</i> element is <i>M</i>[<i>i</i>,<i>j</i>]*<i>N</i>[<i>i</i>,<i>j</i>] (if <i>M</i> and <i>N</i>\n                     are not the same size, this function reports a\n                     conformability error)\n       Domain <i>M</i>:     <i>m</i> x <i>n</i> matrices\n       Domain <i>N</i>:     <i>m</i> x <i>n</i> matrices\n       Range:        <i>m</i> x <i>n</i> matrices\n</p>"
    },
    {
        "halfyear": "<p>\n<b>halfyear(</b><i>e_d</i><b>)</b>\n       Description:  the numeric half of the year corresponding to date <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        integers 1, 2, or <i>missing</i>\n</p>"
    },
    {
        "halfyearly": "<p>\n<b>halfyearly(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_h</i> half-yearly date (half-years since 1960h1)\n                     corresponding to <i>s1</i> based on <i>s2</i> and <i>Y</i>; <i>Y</i> specifies\n                     <i>topyear</i>; see <a href=\"/help.cgi?date()\"><b>date()</b></a>\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings <b>\"HY\"</b> and <b>\"YH\"</b>; <b>Y</b> may be prefixed with <i>##</i>\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        <b>%th</b> dates 0100h1 to 9999h2 (integers -3,720 to 16,079)\n                     or <i>missing</i>\n</p>"
    },
    {
        "has_eprop": "<p>\n<b>has_eprop(</b><i>name</i><b>)</b>\n       Description:  <b>1</b> if <i>name</i> appears as a word in <b>e(properties)</b>; otherwise,\n                     <b>0</b>\n       Domain:       names\n       Range:        0 or 1\n</p>"
    },
    {
        "hh": "<p>\n<b>hh(</b><i>e_tc</i><b>)</b>\n       Description:  the hour corresponding to datetime <i>e_tc</i> (ms. since\n                     01jan1960 00:00:00.000)\n       Domain <i>e_tc</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999)\n       Range:        integers 0 through 23, <i>missing</i>\n</p>"
    },
    {
        "hhC": "<p>\n<b>hhC(</b><i>e_tC</i><b>)</b>\n       Description:  the hour corresponding to datetime <i>e_tC</i> (ms. with leap\n                     seconds since 01jan1960 00:00:00.000)\n       Domain <i>e_tC</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999)\n       Range:        integers 0 through 23, <i>missing</i>\n</p>"
    },
    {
        "hms": "<p>\n<b>hms(</b><i>h</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  the <i>e_tc</i> datetimes (ms. since 01jan1960 00:00:00.000)\n                     corresponding to <i>h</i>, <i>m</i>, <i>s</i> on 01jan1960\n       Domain <i>h</i>:     integers 0 to 23\n       Domain <i>m</i>:     integers 0 to 59\n       Domain <i>s</i>:     reals 0.000 to 59.999\n       Range:        datetimes 01jan1960 00:00:00.000 to 01jan1960\n                     23:59:59.999 (integers 0 to 86,399,999 or <i>missing</i>)\n</p>"
    },
    {
        "hofd": "<p>\n<b>hofd(</b><i>e_d</i><b>)</b>\n       Description:  the <i>e_h</i> half-yearly date (half years since 1960h1)\n                     containing date <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        <b>%th</b> dates 0100h1 to 9999h2 (integers -3,720 to 16,079)\n</p>"
    },
    {
        "hours": "<p>\n<b>hours(</b><i>ms</i><b>)</b>\n       Description:  <i>ms</i>/3,600,000\n       Domain <i>ms</i>:    real; milliseconds\n       Range:        real or <i>missing</i>\n</p>"
    },
    {
        "hypergeometric": "<p>\n<b>hypergeometric(</b><i>N</i><b>,</b><i>K</i><b>,</b><i>n</i><b>,</b><i>k</i><b>)</b>\n       Description:  the cumulative probability of the hypergeometric\n                     distribution\n        \n                     <i>N</i> is the population size, <i>K</i> is the number of elements in\n                     the population that have the attribute of interest, and\n                     <i>n</i> is the sample size.  Returned is the probability of\n                     observing <i>k</i> or fewer elements from a sample of size <i>n</i>\n                     that have the attribute of interest.\n       Domain <i>N</i>:     2 to 1e+5\n       Domain <i>K</i>:     1 to <i>N</i>-1\n       Domain <i>n</i>:     1 to <i>N</i>-1\n       Domain <i>k</i>:     <b>max(</b>0<b>,</b><i>n-N+K</i><b>)</b> to <b>min(</b><i>K</i><b>,</b><i>n</i><b>)</b>\n       Range:        0 to 1\n</p>"
    },
    {
        "hypergeometricp": "<p>\n<b>hypergeometricp(</b><i>N</i><b>,</b><i>K</i><b>,</b><i>n</i><b>,</b><i>k</i><b>)</b>\n       Description:  the hypergeometric probability of <i>k</i> successes out of a\n                     sample of size <i>n</i>, from a population of size <i>N</i> containing\n                     <i>K</i> elements that have the attribute of interest\n</p><p>\n                     Success is obtaining an element with the attribute of\n                     interest.\n       Domain <i>N</i>:     2 to 1e+5\n       Domain <i>K</i>:     1 to <i>N</i>-1\n       Domain <i>n</i>:     1 to <i>N</i>-1\n       Domain <i>k</i>:     <b>max(</b>0<b>,</b><i>n-N+K</i><b>)</b> to <b>min(</b><i>K</i><b>,</b><i>n</i><b>)</b>\n       Range:        0 to 1 (right exclusive)\n</p>"
    },
    {
        "I": "<p>\n<b>I(</b><i>n</i><b>)</b>\n       Description:  an <i>n</i> x <i>n</i> identity matrix if <i>n</i> is an integer; otherwise,\n                     a <b>round(</b><i>n</i><b>)</b> x <b>round(</b><i>n</i><b>)</b> identity matrix\n       Domain:       real scalars 1 to <b>matsize</b>\n       Range:        identity matrices\n</p>"
    },
    {
        "ibeta": "<p>\n<b>ibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative beta distribution with shape parameters <i>a</i>\n                     and <i>b</i>; <b>0</b> if <i>x</i> &lt; 0; <b>1</b> if <i>x</i> &gt; 1\n</p><p>\n<b>ibeta()</b> returns the regularized incomplete beta\n                     function, also known as the incomplete beta function\n                     ratio.  The incomplete beta function without\n                     regularization is given by\n                     <b>(gamma(</b><i>a</i><b>)*gamma(</b><i>b</i><b>)/gamma(</b><i>a</i><b>+</b><i>b</i><b>))*ibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n                     or, better when <i>a</i> or <i>b</i> might be large,\n                     <b>exp(lngamma(</b><i>a</i><b>)+lngamma(</b><i>b</i><b>)-lngamma(</b><i>a</i><b>+</b><i>b</i><b>))*ibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>.\n</p><p>\n                     Here is an example of the use of the regularized\n                     incomplete beta function.  Although Stata has a\n                     cumulative binomial function (see <a href=\"/help.cgi?f_binomiallc\"><b>binomial()</b></a>), the\n                     probability that an event occurs <i>k</i> or fewer times in <i>n</i>\n                     trials, when the probability of one event is <i>p</i>, can be\n                     evaluated as <b>cond(</b><i>k</i><b>==</b><i>n</i><b>,1,1-ibeta(</b><i>k</i><b>+1,</b><i>n</i><b>-</b><i>k</i><b>,</b><i>p</i><b>))</b>.  The\n                     reverse cumulative binomial (the probability that an\n                     event occurs <i>k</i> or more times) can be evaluated as\n                     <b>cond(</b><i>k</i><b>==0,1,ibeta(</b><i>k</i><b>,</b><i>n</i><b>-</b><i>k</i><b>+1,</b><i>p</i><b>))</b>.\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>b</i>:     1e-10 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is 0 <u>&lt;</u> <i>x</i> <u>&lt;</u> 1\n       Range:        0 to 1\n</p>"
    },
    {
        "ibetatail": "<p>\n<b>ibetatail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor) beta\n                     distribution with shape parameters <i>a</i> and <i>b</i>; <b>1</b> if <i>x</i> &lt; 0;\n                     <b>0</b> if <i>x</i> &gt; 1\n</p><p>\n<b>ibetatail()</b> is also known as the complement to the\n                     incomplete beta function (ratio).\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>b</i>:     1e-10 to 1e+17\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is 0 <u>&lt;</u> <i>x</i> <u>&lt;</u> 1\n       Range:        0 to 1\n</p>"
    },
    {
        "igaussian": "<p>\n<b>igaussian(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative inverse Gaussian distribution with mean <i>m</i>\n                     and shape parameter <i>a</i>; <b>0</b> if x <u>&lt;</u> 0\n       Domain <i>m</i>:     1e-323 to 8e+307\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "igaussianden": "<p>\n<b>igaussianden(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density of the inverse Gaussian\n                     distribution with mean <i>m</i> and shape parameter <i>a</i>; <b>0</b> if x <u>&lt;</u>\n                     0\n       Domain <i>m</i>:     1e-323 to 8e+307\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "igaussiantail": "<p>\n<b>igaussiantail(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor) inverse\n                     Gaussian distribution with mean <i>m</i> and shape parameter <i>a</i>;\n                     <b>1</b> if x <u>&lt;</u> 0\n</p><p>\n<b>igaussiantail(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>x</i><b>)</b> = 1 - <b>igaussian(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Domain <i>m</i>:     1e-323 to 8e+307\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "indexnot": "<p>\n<b>indexnot(</b><i>s1</i><b>,</b><i>s2</i><b>)</b>\n       Description:  the position in ASCII string <i>s1</i> of the first character\n                     of <i>s1</i> not found in ASCII string <i>s2</i>, or <b>0</b> if all\n                     characters of <i>s1</i> are found in <i>s2</i>\n</p><p>\n<b>indexnot()</b> is intended for use with only plain ASCII\n                     strings.  For Unicode characters beyond the plain ASCII\n                     range, the position and character are given in bytes,\n                     not characters.\n       Domain <i>s1</i>:    ASCII strings (to be searched)\n       Domain <i>s2</i>:    ASCII strings (to search for)\n       Range:        integers <u>&gt;</u> 0\n</p>"
    },
    {
        "inlist": "<p>\n<b>inlist(</b><i>z</i><b>,</b><i>a</i><b>,</b><i>b</i><b>,</b><i>...</i><b>)</b>\n       Description:  <b>1</b> if <i>z</i> is a member of the remaining arguments;\n                     otherwise, <b>0</b>\n         \n                     All arguments must be reals or all must be strings.  The\n                     number of arguments is between 2 and 255 for reals and\n                     between 2 and 10 for strings.\n       Domain:       all reals or all strings\n       Range:        0 or 1\n</p>"
    },
    {
        "inrange": "<p>\n<b>inrange(</b><i>z</i><b>,</b><i>a</i><b>,</b><i>b</i><b>)</b>\n       Description:  <b>1</b> if it is known that <i>a</i> <u>&lt;</u> <i>z</i> <u>&lt;</u> <i>b</i>; otherwise, <b>0</b>\n        \n                     The following ordered rules apply:\n                     <i>z</i> <u>&gt;</u> <b>.</b> returns <b>0</b>.\n                     <i>a</i> <u>&gt;</u> <b>.</b> and <i>b</i> = <b>.</b> returns <b>1</b>.\n                     <i>a</i> <u>&gt;</u> <b>.</b> returns <b>1</b> if <i>z</i> <u>&lt;</u> <i>b</i>; otherwise, it returns <b>0</b>.\n                     <i>b</i> <u>&gt;</u> <b>.</b> returns <b>1</b> if <i>a</i> <u>&lt;</u> <i>z</i>; otherwise, it returns <b>0</b>.\n                     Otherwise, <b>1</b> is returned if <i>a</i> <u>&lt;</u> <i>z</i> <u>&lt;</u> <i>b</i>.\n                     If the arguments are strings, \"<b>.</b>\" is interpreted as <b>\"\"</b>.\n       Domain:       all reals or all strings\n       Range:        0 or 1\n</p>"
    },
    {
        "int": "<p>\n<b>int(</b><i>x</i><b>)</b>\n       Description:  the integer obtained by truncating <i>x</i> toward 0 (thus,\n                     <b>int(5.2)</b> = 5 and <b>int(-5.8)</b> = -5); <i>x</i> (not \"<b>.</b>\") if <i>x</i> is\n                     missing, meaning that <b>int(.a)</b> = <b>.a</b>\n</p><p>\n                     One way to obtain the closest integer to <i>x</i> is\n                     <b>int(</b><i>x</i><b>+sign(</b><i>x</i><b>)/2)</b>, which simplifies to <b>int(</b><i>x</i><b>+0.5)</b> for <i>x</i> <u>&gt;</u>\n                     0.  However, use of the <b>round()</b> function is preferred.\n                     Also see <a href=\"/help.cgi?round()\"><b>round(</b></a><a href=\"/help.cgi?round()\"><i>x</i></a><a href=\"/help.cgi?round()\"><b>)</b></a>, <a href=\"/help.cgi?ceil()\"><b>ceil(</b></a><a href=\"/help.cgi?ceil()\"><i>x</i></a><a href=\"/help.cgi?ceil()\"><b>)</b></a>, and <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>x</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a>.\n       Domain:       -8e+307 to 8e+307\n       Range:        integers in -8e+307 to 8e+307\n</p><p>\n<b>trunc(</b><i>x</i><b>)</b>\n       Description:  a synonym for <a href=\"/help.cgi?int()\"><b>int(</b></a><a href=\"/help.cgi?int()\"><i>x</i></a><a href=\"/help.cgi?int()\"><b>)</b></a>\n</p>"
    },
    {
        "inv": "<p>\n<b>inv(</b><i>M</i><b>)</b>\n       Description:  the inverse of the matrix <i>M</i>\n</p><p>\n                     If <i>M</i> is singular, this will result in an error.\n</p><p>\n                     The function <a href=\"/help.cgi?invsym()\"><b>invsym()</b></a> should be used in preference to\n                     <b>inv()</b> because <b>invsym()</b> is more accurate.  The row names\n                     of the result are obtained from the column names of <i>M</i>,\n                     and the column names of the result are obtained from the\n                     row names of <i>M</i>.\n       Domain:       <i>n</i> x <i>n</i> nonsingular matrices\n       Range:        <i>n</i> x <i>n</i> matrices\n</p>"
    },
    {
        "invbinomial": "<p>\n<b>invbinomial(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse of the cumulative binomial; that is, the\n                     probability of success on one trial such that the\n                     probability of observing <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>k</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a> or fewer successes in\n                     <b>floor(</b><i>n</i><b>)</b> trials is <i>p</i>\n       Domain <i>n</i>:     1 to 1e+17\n       Domain <i>k</i>:     0 to <i>n</i> - 1\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        0 to 1\n</p>"
    },
    {
        "invbinomialtail": "<p>\n<b>invbinomialtail(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse of the right cumulative binomial; that is,\n                     the probability of success on one trial such that the\n                     probability of observing <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>k</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a> or more successes in\n                     <b>floor(</b><i>n</i><b>)</b> trials is <i>p</i>\n       Domain <i>n</i>:     1 to 1e+17\n       Domain <i>k</i>:     1 to <i>n</i>\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        0 to 1\n</p>"
    },
    {
        "invcauchy": "<p>\n<b>invcauchy(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse of <b>cauchy()</b>: if <b>cauchy(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then\n                     <b>invcauchy(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     -1e+300 to 1e+300\n       Domain <i>b</i>:     1e-100 to 1e+300\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invcauchytail": "<p>\n<b>invcauchytail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description   the inverse of <b>cauchytail()</b>: if <b>cauchytail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>,\n                     then <b>invcauchytail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     -1e+300 to 1e+300\n       Domain <i>b</i>:     1e-100 to 1e+300\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invchi2": "<p>\n<b>invchi2(</b><i>df</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse of <b>chi2()</b>: if <b>chi2(</b><i>df</i><b>,</b>x<b>)</b> = <i>p</i>, then\n                     <b>invchi2(</b><i>df</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invchi2tail": "<p>\n<b>invchi2tail(</b><i>df</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse of <b>chi2tail()</b>: if <b>chi2tail(</b><i>df</i><b>,</b>x<b>)</b> = <i>p</i>, then\n                     <b>invchi2tail(</b><i>df</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invcloglog": "<p>\n<b>invcloglog(</b><i>x</i><b>)</b>\n       Description:  the inverse of the complementary log-log function of <i>x</i>\n<b>invcloglog(</b><i>x</i><b>)</b> = 1 - exp{-exp(<i>x</i>)}\n       Domain:       -8e+307 to 8e+307\n       Range:        0 to 1 or <i>missing</i>\n</p>"
    },
    {
        "invdunnettprob": "<p>\n<b>invdunnettprob(</b><i>k</i><b>,</b><i>df</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative multiple range distribution that\n                     is used in Dunnett's multiple-comparison method with <i>k</i>\n                     ranges and <i>df</i> degrees of freedom\n        \n                     If <b>dunnettprob(</b><i>k</i><b>,</b><i>df</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invdunnettprob(</b><i>k</i><b>,</b><i>df</i><b>,</b><i>p</i><b>)</b>\n                     = <i>x</i>.\n        \n                     <b>invdunnettprob()</b> is computed using an algorithm\n                     described in <a href=\"/help.cgi?density_functions#M1981\">Miller (1981)</a>.\n       Domain <i>k</i>:     2 to 1e+6\n       Domain <i>df</i>:    2 to 1e+6\n       Domain <i>p</i>:     0 to 1 (right exclusive)\n       Range:        0 to 8e+307\n</p><p>\n</p><p>\n<b><u>Reference</u></b>\n</p><p>\n    Miller, R. G.  1981.  <i>Simultaneous Statistical Inference</i>.  2nd ed.  New\n        York: Springer.\n</p>"
    },
    {
        "invexponential": "<p>\n<b>invexponential(</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative exponential distribution with\n                     scale <i>b</i>: if <b>exponential(</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then\n                     <b>invexponential(</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        1e-323 to 8e+307\n</p>"
    },
    {
        "invexponentialtail": "<p>\n<b>invexponentialtail(</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative exponential distribution\n                     with scale <i>b</i>: if <b>exponentialtail(</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then\n                     <b>invexponential(</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        1e-323 to 8e+307\n</p>"
    },
    {
        "invF": "<p>\n<b>invF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative F distribution: if <b>F(</b><i>df1</i><b>,</b><i>df2</i><b>,</b>f<b>)</b> =\n                     <i>p</i>, then <b>invF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>p</i><b>)</b> = <i>f</i>\n       Domain <i>df1</i>:   2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>df2</i>:   2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invFtail": "<p>\n<b>invFtail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative (upper tail or survivor)\n                     F distribution: if <b>Ftail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b>f<b>)</b> = <i>p</i>, then\n                     <b>invFtail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>p</i><b>)</b> = f\n       Domain <i>df1</i>:   2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>df2</i>:   2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invgammap": "<p>\n<b>invgammap(</b><i>a</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative gamma distribution: if\n                     <b>gammap(</b><i>a</i><b>,</b>x<b>)</b> = <i>p</i>, then <b>invgammap(</b><i>a</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invgammaptail": "<p>\n<b>invgammaptail(</b><i>a</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative (upper tail or survivor)\n                     gamma distribution: if <b>gammaptail(</b><i>a</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then\n                     <b>invgammaptail(</b><i>a</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invibeta": "<p>\n<b>invibeta(</b><i>a</i><b>,</b><i>b</i>,<i>p</i><b>)</b>\n       Description:  the inverse cumulative beta distribution: if\n                     <b>ibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b>x<b>)</b> = <i>p</i>, then <b>invibeta(</b><i>a</i><b>,</b><i>b</i>,<i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>b</i>:     1e-10 to 1e+17\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 1\n</p>"
    },
    {
        "invibetatail": "<p>\n<b>invibetatail(</b><i>a</i><b>,</b><i>b</i>,<i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative (upper tail or survivor)\n                     beta distribution: if <b>ibetatail(</b><i>a</i><b>,</b><i>b</i><b>,</b>x<b>)</b> = <i>p</i>, then\n                     <b>invibetatail(</b><i>a</i><b>,</b><i>b</i>,<i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-10 to 1e+17\n       Domain <i>b</i>:     1e-10 to 1e+17\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 1\n</p>"
    },
    {
        "invigaussian": "<p>\n<b>invigaussian(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse of <b>igaussian()</b>: if <b>igaussian(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>x</i><b>)</b> = <i>p</i>,\n                     then <b>invigaussian(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>m</i>:     1e-323 to 8e+307\n       Domain <i>a</i>:     1e-323 to 1e+8\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invigaussiantail": "<p>\n<b>invigaussiantail(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>p</i><b>)</b>\n       Description   the inverse of <b>igaussiantail()</b>: if <b>igaussiantail(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>x</i><b>)</b>\n                     = <i>p</i>, then <b>invigaussiantail(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>m</i>:     1e-323 to 8e+307\n       Domain <i>a</i>:     1e-323 to 1e+8\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invlaplace": "<p>\n<b>invlaplace(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse of <b>laplace()</b>: if <b>laplace(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then\n                     <b>invlaplace(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>b</i>:     1e-307 to 8e+307\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invlaplacetail": "<p>\n<b>invlaplacetail(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description   the inverse of <b>laplacetail()</b>: if <b>laplacetail(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>,\n                     then <b>invlaplacetail(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>b</i>:     1e-307 to 8e+307\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invlogistic": "<p>\n<b>invlogistic(</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative logistic distribution: if\n                     <b>logistic(</b><i>x</i><b>)</b> = <i>p</i>, then <b>invlogistic(</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p><p>\n<b>invlogistic(</b><i>s</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative logistic distribution: if\n                     <b>logistic(</b><i>s</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invlogistic(</b><i>s</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p><p>\n<b>invlogistic(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative logistic distribution: if\n                     <b>logistic(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invlogistic(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invlogistictail": "<p>\n<b>invlogistictail(</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative logistic distribution:\n                     if <b>logistictail(</b><i>x</i><b>)</b> = <i>p</i>, then <b>invlogistictail(</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p><p>\n<b>invlogistictail(</b><i>s</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative logistic distribution:\n                     if <b>logistictail(</b><i>s</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invlogistictail(</b><i>s</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p><p>\n<b>invlogistictail(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative logistic distribution:\n                     if <b>logistictail(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invlogistictail(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>p</i><b>)</b>\n                     = <i>x</i>\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invlogit": "<p>\n<b>invlogit(</b><i>x</i><b>)</b>\n       Description:  the inverse of the logit function of <i>x</i>\n<b>invlogit(</b><i>x</i><b>)</b> = exp(<i>x</i>)/{1 + exp(<i>x</i>)}\n       Domain:       -8e+307 to 8e+307\n       Range:        0 to 1 or <i>missing</i>\n</p>"
    },
    {
        "invnbinomial": "<p>\n<b>invnbinomial(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>q</i><b>)</b>\n       Description:  the value of the negative binomial parameter, <i>p</i>, such\n                     that <i>q = </i><b>nbinomial(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n</p><p>\n<b>invnbinomial()</b> is evaluated using <a href=\"/help.cgi?invibeta()\"><b>invibeta()</b></a>.\n       Domain <i>n</i>:     1e-10 to 1e+17 (can be nonintegral)\n       Domain <i>k</i>:     0 to 2^53-1\n       Domain <i>q</i>:     0 to 1 (exclusive)\n       Range:        0 to 1\n</p>"
    },
    {
        "invnbinomialtail": "<p>\n<b>invnbinomialtail(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>q</i><b>)</b>\n       Description:  the value of the negative binomial parameter, <i>p</i>, such\n                     that <i>q = </i><b>nbinomialtail(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n</p><p>\n<b>invnbinomialtail()</b> is evaluated using <a href=\"/help.cgi?invibetatail()\"><b>invibetatail()</b></a>.\n       Domain <i>n</i>:     1e-10 to 1e+17 (can be nonintegral)\n       Domain <i>k</i>:     1 to 2^53-1\n       Domain <i>q</i>:     0 to 1 (exclusive)\n       Range:        0 to 1 (exclusive)\n</p>"
    },
    {
        "invnchi2": "<p>\n<b>invnchi2(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative noncentral chi-squared\n                     distribution: if <b>nchi2(</b><i>df</i><b>,</b><i>np</i><b>,</b>x<b>)</b> = <i>p</i>, then\n                     <b>invnchi2(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>df</i>:    2e-10 to 1e+6 (may be nonintegral)\n       Domain <i>np</i>:    0 to 10,000\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invnchi2tail": "<p>\n<b>invnchi2tail(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative (upper tail or survivor)\n                     noncentral chi-squared distribution: if\n                     <b>nchi2tail(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invnchi2tail(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>df</i>:    2e-10 to 1e+6 (may be nonintegral)\n       Domain <i>np</i>:    0 to 10,000\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invnF": "<p>\n<b>invnF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative noncentral F distribution: if\n                     <b>nF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>f</i><b>)</b> = <i>p</i>, then <b>invnF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b> = <i>f</i>\n       Domain <i>df1</i>:   1e-6 to 1e+6 (may be nonintegral)\n       Domain <i>df2</i>:   1e-6 to 1e+6 (may be nonintegral)\n       Domain <i>np</i>:    0 to 10,000\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invnFtail": "<p>\n<b>invnFtail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative (upper tail or survivor)\n                     noncentral F distribution: if <b>nFtail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>f</i><b>)</b> = <i>p</i>,\n                     then <b>invnFtail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b> = <i>f</i>\n       Domain <i>df1</i>:   1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>df2</i>:   1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>np</i>:    0 to 1,000\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "invnibeta": "<p>\n<b>invnibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative noncentral beta distribution: if\n                     <b>nibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>np</i><b>,</b>x<b>)</b> = <i>p</i>, then <b>invnibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>np</i>:    0 to 1,000\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 1\n</p>"
    },
    {
        "invnormal": "<p>\n<b>invnormal(</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative standard normal distribution: if\n                     <b>normal(</b><i>z</i><b>)</b> = <i>p</i>, then <b>invnormal(</b><i>p</i><b>)</b> = <i>z</i>\n       Domain:       1e-323 to 1 - 2^(-53)\n       Range:        -38.449394 to 8.2095362\n</p>"
    },
    {
        "invnt": "<p>\n<b>invnt(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative noncentral Student's t\n                     distribution:  if <b>nt(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>t</i><b>)</b> = <i>p</i>, then <b>invnt(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b> =\n                     <i>t</i>\n       Domain <i>df</i>:    1 to 1e+6 (may be nonintegral)\n       Domain <i>np</i>:    -1,000 to 1,000\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invnttail": "<p>\n<b>invnttail(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative (upper tail or survivor)\n                     noncentral Student's t distribution: if <b>nttail(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>t</i><b>)</b>\n                     = <i>p</i>, then <b>invnttail(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>p</i><b>)</b> = <i>t</i>\n       Domain <i>df</i>:    1 to 1e+6 (may be nonintegral)\n       Domain <i>np</i>:    -1,000 to 1,000\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+10 to 8e+10\n</p>"
    },
    {
        "invpoisson": "<p>\n<b>invpoisson(</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the Poisson mean such that the cumulative Poisson\n                     distribution evaluated at <i>k</i> is <i>p</i>: if <b>poisson(</b><i>m</i><b>,</b>k<b>)</b> = <i>p</i>,\n                     then <b>invpoisson(</b><i>k</i><b>,</b><i>p</i><b>)</b> = <i>m</i>\n</p><p>\n                     The inverse Poisson distribution function is evaluated\n                     using <a href=\"/help.cgi?invgammaptail()\"><b>invgammaptail()</b></a>.\n       Domain <i>k</i>:     0 to 2^53-1\n       Domain <i>p</i>:     0 to 1 (exclusive)\n       Range:        1.110e-16 to 2^53\n</p>"
    },
    {
        "invpoissontail": "<p>\n<b>invpoissontail(</b><i>k</i><b>,</b><i>q</i><b>)</b>\n       Description:  the Poisson mean such that the reverse cumulative\n                     Poisson distribution evaluated at <i>k</i> is <i>q</i>: if\n                     <b>poissontail(</b><i>m</i><b>,</b>k<b>)</b> = <i>q</i>, then <b>invpoissontail(</b><i>k</i><b>,</b><i>q</i><b>)</b> = <i>m</i>\n</p><p>\n                     The inverse of the reverse cumulative Poisson\n                     distribution function is evaluated using <a href=\"/help.cgi?invgammap()\"><b>invgammap()</b></a>.\n       Domain <i>k</i>:     0 to 2^53-1\n       Domain <i>q</i>:     0 to 1 (exclusive)\n       Range:        0 to 2^53 (left exclusive)\n</p>"
    },
    {
        "invsym": "<p>\n<b>invsym(</b><i>M</i><b>)</b>\n       Description:  the inverse of <i>M</i> if <i>M</i> is positive definite\n</p><p>\n                     If <i>M</i> is not positive definite, rows will be inverted\n                     until the diagonal terms are zero or negative; the rows\n                     and columns corresponding to these terms will be set to\n                     0, producing a g2 inverse.  The row names of the result\n                     are obtained from the column names of <i>M</i>, and the column\n                     names of the result are obtained from the row names of\n                     <i>M</i>.\n       Domain:       <i>n</i> x <i>n</i> symmetric matrices\n       Range:        <i>n</i> x <i>n</i> symmetric matrices\n</p>"
    },
    {
        "invt": "<p>\n<b>invt(</b><i>df</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative Student's t distribution: if\n                     <b>t(</b><i>df</i><b>,</b><i>t</i><b>)</b> = <i>p</i>, then <b>invt(</b><i>df</i><b>,</b><i>p</i><b>)</b> = <i>t</i>\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invttail": "<p>\n<b>invttail(</b><i>df</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative (upper tail or survivor)\n                     Student's t distribution: if <b>ttail(</b><i>df</i><b>,</b><i>t</i><b>)</b> = <i>p</i>, then\n                     <b>invttail(</b><i>df</i><b>,</b><i>p</i><b>)</b> = <i>t</i>\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>p</i>:     0 to 1\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "invtukeyprob": "<p>\n<b>invtukeyprob(</b><i>k</i><b>,</b><i>df</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative Tukey's Studentized range\n                     distribution with <i>k</i> ranges and <i>df</i> degrees of freedom\n</p><p>\n                     If <i>df</i> is a missing value, then the normal distribution\n                     is used instead of Student's t.  If <b>tukeyprob(</b><i>k</i><b>,</b><i>df</i><b>,</b>x<b>)</b> =\n                     <i>p</i>, then <b>invtukeyprob(</b><i>k</i><b>,</b><i>df</i><b>,</b><i>p</i><b>)</b> = x.\n        \n                     <b>invtukeyprob()</b> is computed using an algorithm described\n                     in <a href=\"/help.cgi?density_functions#M1981\">Miller (1981)</a>.\n       Domain <i>k</i>:     2 to 1e+6\n       Domain <i>df</i>:    2 to 1e+6\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 8e+307\n</p><p>\n</p><p>\n<b><u>Reference</u></b>\n</p><p>\n    Miller, R. G.  1981.  <i>Simultaneous Statistical Inference</i>.  2nd ed.  New\n        York: Springer.\n</p>"
    },
    {
        "invweibull": "<p>\n<b>invweibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative Weibull distribution with shape <i>a</i>\n                     and scale <i>b</i>: if <b>weibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then\n                     <b>invweibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        1e-323 to 8e+307\n</p><p>\n<b>invweibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative Weibull distribution with shape\n                     <i>a</i>, scale <i>b</i>, and location <i>g</i>: if <b>weibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b> = <i>p</i>,\n                     then <b>invweibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        <i>g</i>+<b>c(epsdouble)</b> to 8e+307\n</p>"
    },
    {
        "invweibullph": "<p>\n<b>invweibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative Weibull (proportional hazards)\n                     distribution with shape <i>a</i> and scale <i>b</i>: if\n                     <b>weibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invweibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        1e-323 to 8e+307\n</p><p>\n<b>invweibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse cumulative Weibull (proportional hazards)\n                     distribution with shape <i>a</i>, scale <i>b</i>, and location <i>g</i>: if\n                     <b>weibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invweibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        <i>g</i>+<b>c(epsdouble)</b> to 8e+307\n</p>"
    },
    {
        "invweibullphtail": "<p>\n<b>invweibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative Weibull (proportional\n                     hazards) distribution with shape <i>a</i> and scale <i>b</i>: if\n                     <b>weibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invweibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b> =\n                     <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        1e-323 to 8e+307\n</p><p>\n<b>invweibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative Weibull (proportional\n                     hazards) distribution with shape <i>a</i>, scale <i>b</i>, and\n                     location <i>g</i>: if <b>weibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then\n                     <b>invweibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        <i>g</i>+<b>c(epsdouble)</b> to 8e+307\n</p>"
    },
    {
        "invweibulltail": "<p>\n<b>invweibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative Weibull distribution with\n                     shape <i>a</i> and scale <i>b</i>: if <b>weibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then\n                     <b>invweibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>p</i><b>)</b> = <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        1e-323 to 8e+307\n</p><p>\n<b>invweibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>p</i><b>)</b>\n       Description:  the inverse reverse cumulative Weibull distribution with\n                     shape <i>a</i>, scale <i>b</i>, and location <i>g</i>: if\n                     <b>weibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>invweibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>p</i><b>)</b> =\n                     <i>x</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        <i>g</i>+<b>c(epsdouble)</b> to 8e+307\n</p>"
    },
    {
        "irecode": "<p>\n<b>irecode(</b><i>x</i><b>,</b><i>x1</i><b>,</b><i>x2</i><b>,</b><i>...</i><b>,</b><i>xn</i><b>)</b>\n       Description:  <i>missing</i> if <i>x</i> is missing or <i>x1</i>,...,<i>xn</i> is not weakly\n                     increasing; <b>0</b> if <i>x</i> <u>&lt;</u> <i>x1</i>; <b>1</b> if <i>x1</i> &lt; <i>x</i> <u>&lt;</u> <i>x2</i>; <b>2</b> if <i>x2</i> &lt; <i>x</i> <u>&lt;</u>\n<i>x3</i>; ...; <i>n</i> if <i>x</i> &gt; <i>xn</i>\n</p><p>\n                     Also see <a href=\"/help.cgi?autocode()\"><b>autocode()</b></a> and <a href=\"/help.cgi?recode()\"><b>recode()</b></a> for other styles of\n                     recode functions.\n</p><p>\n<b>irecode(3, -10, -5, -3, -3, 0, 15, .)</b> = <b>5</b>\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>xi</i>:    -8e+307 to 8e+307\n       Range:        nonnegative integers\n</p>"
    },
    {
        "issymmetric": "<p>\n<b>issymmetric(</b><i>M</i><b>)</b>\n       Description:  <b>1</b> if the matrix is symmetric; otherwise, <b>0</b>\n       Domain:       matrices\n       Range:        integers 0 and 1\n</p>"
    },
    {
        "J": "<p>\n<b>J(</b><i>r</i><b>,</b><i>c</i><b>,</b><i>z</i><b>)</b>\n       Description:  the <i>r</i> x <i>c</i> matrix containing elements <i>z</i>\n       Domain <i>r</i>:     integer scalars 1 to <b>matsize</b>\n       Domain <i>c</i>:     integer scalars 1 to <b>matsize</b>\n       Domain <i>z</i>:     scalars -8e+307 to 8e+307\n       Range:        <i>r</i> x <i>c</i> matrices\n</p>"
    },
    {
        "laplace": "<p>\n<b>laplace(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative Laplace distribution with mean <i>m</i> and\n                     scale parameter <i>b</i>\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>b</i>:     1e-307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "laplaceden": "<p>\n<b>laplaceden(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density of the Laplace distribution with\n                     mean <i>m</i> and scale parameter <i>b</i>\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>b</i>:     1e-307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "laplacetail": "<p>\n<b>laplacetail(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor) Laplace\n                     distribution with mean <i>m</i> and scale parameter <i>b</i>\n</p><p>\n<b>laplacetail(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = 1 - <b>laplace(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>b</i>:     1e-307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "ln": "<p>\n<b>ln(</b><i>x</i><b>)</b>\n       Description:  the natural logarithm, ln(<i>x</i>)\n</p><p>\n                     This function is the inverse of <b>exp(</b><i>x</i><b>)</b>.\n       Domain:       1e-323 to 8e+307\n       Range:        -744 to 709\n</p>"
    },
    {
        "lncauchyden": "<p>\n<b>lncauchyden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the natural logarithm of the density of the Cauchy\n                     distribution with location parameter <i>a</i> and scale\n                     parameter <i>b</i>\n       Domain <i>a</i>:     -1e+300 to 1e+300\n       Domain <i>b</i>:     1e-100 to 1e+300\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        -1650 to 230\n</p>"
    },
    {
        "lnfactorial": "<p>\n<b>lnfactorial(</b><i>n</i><b>)</b>\n       Description:  the natural log of <i>n</i> factorial = ln(<i>n</i>!)\n</p><p>\n                     To calculate <i>n</i>!, use <b>round(exp(lnfactorial(</b><i>n</i><b>)),1)</b> to\n                     ensure that the result is an integer.  Logs of\n                     factorials are generally more useful than the factorials\n                     themselves because of overflow problems.\n       Domain:       integers 0 to 1e+305\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "lngamma": "<p>\n<b>lngamma(</b><i>x</i><b>)</b>\n       Description:  the natural log of the gamma function of <i>x</i>\n        \n                     For integer values of <i>x</i> &gt; 0, this is ln((<i>x</i>-1)!).\n</p><p>\n<b>lngamma(</b><i>x</i><b>)</b> for <i>x</i> &lt; 0 returns a number such that\n                     <b>exp(lngamma(</b><i>x</i><b>))</b> is equal to the absolute value of the\n                     gamma function.  That is, <b>lngamma(</b><i>x</i><b>)</b> always returns a\n                     real (not complex) result.\n       Domain:       -2,147,483,648 to 1e+305 (excluding negative integers)\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "lnigammaden": "<p>\n<b>lnigammaden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the natural logarithm of the inverse gamma density,\n                     where <i>a</i> is the shape parameter and <i>b</i> is the scale\n                     parameter\n       Domain <i>a</i>:     1e-300 to 1e+300\n       Domain <i>b</i>:     1e-300 to 1e+300\n       Domain <i>x</i>:     1e-300 to 8e+307\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "lnigaussianden": "<p>\n<b>lnigaussianden(</b><i>m</i><b>,</b><i>a</i><b>,</b><i>x</i><b>)</b>\n       Description:  the natural logarithm of the inverse Gaussian density\n                     with mean <i>m</i> and shape parameter <i>a</i>\n       Domain <i>m</i>:     1e-323 to 8e+307\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     1e-323 to 8e+307\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "lniwishartden": "<p>\n<b>lniwishartden(</b><i>df</i><b>,</b><i>V</i><b>,</b><i>X</i><b>)</b>\n       Description:  the natural logarithm of the density of the inverse\n                     Wishart distribution; missing if <i>df</i> &lt;= <i>n</i>-1\n</p><p>\n<i>df</i> denotes the degrees of freedom, <i>V</i> is the scale\n                     matrix, and <i>X</i> is the inverse Wishart random matrix.\n       Domain <i>df</i>:    1 to 1e+100 (may be nonintegral)\n       Domain <i>V</i>:     <i>n</i> x <i>n</i>, positive-definite, symmetric matrices\n       Domain <i>X</i>:     <i>n</i> x <i>n</i>, positive-definite, symmetric matrices\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "lnlaplaceden": "<p>\n<b>lnlaplaceden(</b><i>m</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the natural logarithm of the density of the Laplace\n                     distribution with mean <i>m</i> and scale parameter <i>b</i>\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>b</i>:     1e-307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        -8e+307 to 707\n</p>"
    },
    {
        "lnmvnormalden": "<p>\n<b>lnmvnormalden(</b><i>M</i><b>,</b><i>V</i><b>,</b><i>X</i><b>)</b>\n       Description:  the natural logarithm of the multivariate normal density\n</p><p>\n<i>M</i> is the mean vector, <i>V</i> is the covariance matrix, and <i>X</i>\n                     is the random vector.\n       Domain <i>M</i>:     <i>1</i> x <i>n</i> and <i>n</i> x <i>1</i> vectors\n       Domain <i>V</i>:     <i>n</i> x <i>n</i>, positive-definite, symmetric matrices\n       Domain <i>X</i>:     <i>1</i> x <i>n</i> and <i>n</i> x <i>1</i> vectors\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "lnnormal": "<p>\n<b>lnnormal(</b><i>z</i><b>)</b>\n       Description:  the natural logarithm of the cumulative standard normal\n                     distribution\n       Domain:       -1e+99 to 8e+307\n       Range:        -5e+197 to 0\n</p>"
    },
    {
        "lnnormalden": "<p>\n<b>lnnormalden(</b><i>z</i><b>)</b>\n       Description:  the natural logarithm of the standard normal density\n       Domain:       -1e+154 to 1e+154\n       Range:        -5e+307 to -0.91893853 = <b>lnnormalden(0)</b>\n</p><p>\n<b>lnnormalden(</b><i>x</i><b>,</b><i>s</i><b>)</b>\n       Description:  the natural logarithm of the normal density with mean 0\n                     and standard deviation <i>s</i>\n</p><p>\n<b>lnnormalden(</b><i>x</i><b>,1)</b> = <b>lnnormalden(</b><i>x</i><b>)</b> and\n                     <b>lnnormalden(</b><i>x</i><b>,</b><i>s</i><b>)</b> = <b>lnnormalden(</b><i>x/s</i><b>)</b> - ln(<i>s</i>)\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Range:        -5e+307 to 742.82799\n</p><p>\n<b>lnnormalden(</b><i>x</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  the natural logarithm of the normal density with mean <i>m</i>\n                     and standard deviation <i>s</i>\n</p><p>\n<b>lnnormalden(</b><i>x</i><b>,0,</b><i>s</i><b>)</b> = <b>lnnormalden(</b><i>x</i><b>,</b><i>s</i><b>)</b> and\n                     <b>lnnormalden(</b><i>x</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b> = <b>lnnormalden(</b>(<i>x</i>-<i>m</i>)/<i>s</i><b>) -</b> ln(<i>s</i>)\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Range:        1e-323 to 8e+307\n</p>"
    },
    {
        "lnwishartden": "<p>\n<b>lnwishartden(</b><i>df</i><b>,</b><i>V</i><b>,</b><i>X</i><b>)</b>\n       Description:  the natural logarithm of the density of the Wishart\n                     distribution; missing if <i>df</i> &lt;= <i>n</i>-1\n</p><p>\n<i>df</i> denotes the degrees of freedom, <i>V</i> is the scale\n                     matrix, and <i>X</i> is the Wishart random matrix.\n       Domain <i>df</i>:    1 to 1e+100 (may be nonintegral)\n       Domain <i>V</i>:     <i>n</i> x <i>n</i>, positive-definite, symmetric matrices\n       Domain <i>X</i>:     <i>n</i> x <i>n</i>, positive-definite, symmetric matrices\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "log": "<p>\n<b>log(</b><i>x</i><b>)</b>\n       Description:  the natural logarithm, ln(<i>x</i>); thus, a synonym for <a href=\"/help.cgi?ln()\"><b>ln(</b></a><a href=\"/help.cgi?ln()\"><i>x</i></a><a href=\"/help.cgi?ln()\"><b>)</b></a>\n       Domain:       1e-323 to 8e+307\n       Range:        -744 to 709\n</p>"
    },
    {
        "log10": "<p>\n<b>log10(</b><i>x</i><b>)</b>\n       Description:  the base-10 logarithm of <i>x</i>\n       Domain:       1e-323 to 8e+307\n       Range:        -323 to 308\n</p>"
    },
    {
        "logistic": "<p>\n<b>logistic(</b><i>x</i><b>)</b>\n       Description:  the cumulative logistic distribution with mean 0 and\n                     standard deviation pi/sqrt(3)\n</p><p>\n<b>logistic(</b><i>x</i><b>)</b> = <b>logistic(1,</b><i>x</i><b>)</b> = <b>logistic(0,1,</b><i>x</i><b>)</b>, where <i>x</i>\n                     is the value of a logistic random variable.\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p><p>\n<b>logistic(</b><i>s</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative logistic distribution with mean 0, scale\n                     <i>s</i>, and standard deviation <i>s</i> pi/sqrt(3)\n</p><p>\n<b>logistic(</b><i>s</i><b>,</b><i>x</i><b>)</b> = <b>logistic(0,</b><i>s</i><b>,</b><i>x</i><b>)</b>, where <i>s</i> is the scale\n                     and <i>x</i> is the value of a logistic random variable.\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p><p>\n<b>logistic(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative logistic distribution with mean <i>m</i>, scale\n                     <i>s</i>, and standard deviation <i>s</i> pi/sqrt(3)\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "logisticden": "<p>\n<b>logisticden(</b><i>x</i><b>)</b>\n       Description:  the density of the logistic distribution with mean 0 and\n                     standard deviation pi/sqrt(3)\n</p><p>\n<b>logisticden(</b><i>x</i><b>)</b> = <b>logisticden(1,</b><i>x</i><b>)</b> = <b>logisticden(0,1,</b><i>x</i><b>)</b>,\n                     where <i>x</i> is the value of a logistic random variable.\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 0.25\n</p><p>\n<b>logisticden(</b><i>s</i><b>,</b><i>x</i><b>)</b>\n       Description:  the density of the logistic distribution with mean 0,\n                     scale <i>s</i>, and standard deviation <i>s</i> pi/sqrt(3)\n</p><p>\n<b>logisticden(</b><i>s</i><b>,</b><i>x</i><b>)</b> = <b>logisticden(0,</b><i>s</i><b>,</b><i>x</i><b>)</b>, where <i>s</i> is the\n                     scale and <i>x</i> is the value of a logistic random variable.\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 8e+307\n</p><p>\n<b>logisticden(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>x</i><b>)</b>\n       Description:  the density of the logistic distribution with mean <i>m</i>,\n                     scale <i>s</i>, and standard deviation <i>s</i> pi/sqrt(3)\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "logistictail": "<p>\n<b>logistictail(</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative logistic distribution with mean 0\n                     and standard deviation pi/sqrt(3)\n</p><p>\n<b>logistictail(</b><i>x</i><b>)</b> = <b>logistictail(1,</b><i>x</i><b>)</b> =\n                     <b>logistictail(0,1,</b><i>x</i><b>)</b>, where <i>x</i> is the value of a logistic\n                     random variable.\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p><p>\n<b>logistictail(</b><i>s</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative logistic distribution with mean\n                     0, scale <i>s</i>, and standard deviation <i>s</i> pi/sqrt(3)\n</p><p>\n<b>logistictail(</b><i>s</i><b>,</b><i>x</i><b>)</b> = <b>logistictail(0,</b><i>s</i><b>,</b><i>x</i><b>)</b>, where <i>s</i> is the\n                     scale and <i>x</i> is the value of a logistic random variable.\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p><p>\n<b>logistictail(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative logistic distribution with mean\n                     <i>m</i>, scale <i>s</i>, and standard deviation <i>s</i> pi/sqrt(3)\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "logit": "<p>\n<b>logit(</b><i>x</i><b>)</b>\n       Description:  the log of the odds ratio of <i>x</i>,\n                     <b>logit(</b><i>x</i><b>)</b> = ln{<i>x</i>/(1-<i>x</i>)}\n       Domain:       0 to 1 (exclusive)\n       Range:        -8e+307 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "matmissing": "<p>\n<b>matmissing(</b><i>M</i><b>)</b>\n       Description:  <b>1</b> if any elements of the matrix are missing; otherwise,\n                     <b>0</b>\n       Domain:       matrices\n       Range:        integers 0 and 1\n</p>"
    },
    {
        "matrix": "<p>\n<b>matrix(</b><i>exp</i><b>)</b>\n       Description:  restricts name interpretation to scalars and matrices;\n                     see <a href=\"/help.cgi?scalar()\"><b>scalar()</b></a>\n       Domain:       any value expression\n       Range:        evaluation of <i>exp</i>\n</p>"
    },
    {
        "matuniform": "<p>\n<b>matuniform(</b><i>r</i><b>,</b><i>c</i><b>)</b>\n       Description:  the <i>r</i> x <i>c</i> matrices containing uniformly distributed\n                     pseudorandom numbers on the interval (0,1)\n       Domain <i>r</i>:     integer scalars 1 to <b>matsize</b>\n       Domain <i>c</i>:     integer scalars 1 to <b>matsize</b>\n       Range:        <i>r</i> x <i>c</i> matrices\n</p>"
    },
    {
        "max": "<p>\n<b>max(</b><i>x1</i><b>,</b><i>x2</i><b>,</b><i>...</i><b>,</b><i>xn</i><b>)</b>\n       Description:  the maximum value of <i>x1</i>, <i>x2</i>, ..., <i>xn</i>\n</p><p>\n                     Unless all arguments are <i>missing</i>, missing values are\n                     ignored.\n                     <b>max(2,10,.,7)</b> = <b>10</b>\n<b>max(.,.,.)</b> = <b>.</b>\n       Domain <i>x1</i>:    -8e+307 to 8e+307 or <i>missing</i>\n       Domain <i>x2</i>:    -8e+307 to 8e+307 or <i>missing</i>\n       ...           \n       Domain <i>xn</i>:    -8e+307 to 8e+307 or <i>missing</i>\n       Range:        -8e+307 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "maxbyte": "<p>\n<b>maxbyte()</b>\n       Description:  the largest value that can be stored in storage type\n                     <b>byte</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one integer number\n</p>"
    },
    {
        "maxdouble": "<p>\n<b>maxdouble()</b>\n       Description:  the largest value that can be stored in storage type\n                     <b>double</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one double-precision number\n</p>"
    },
    {
        "maxfloat": "<p>\n<b>maxfloat()</b>\n       Description:  the largest value that can be stored in storage type\n                     <b>float</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one floating-point number\n</p>"
    },
    {
        "maxint": "<p>\n<b>maxint()</b>\n       Description:  the largest value that can be stored in storage type <b>int</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one integer number\n</p>"
    },
    {
        "maxlong": "<p>\n<b>maxlong()</b>\n       Description:  the largest value that can be stored in storage type\n                     <b>long</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one integer number\n</p>"
    },
    {
        "mdy": "<p>\n<b>mdy(</b><i>M</i><b>,</b><i>D</i><b>,</b><i>Y</i><b>)</b>\n       Description:  the <i>e_d</i> date (days since 01jan1960) corresponding to <i>M</i>,\n                     <i>D</i>, <i>Y</i>\n       Domain <i>M</i>:     integers 1 to 12\n       Domain <i>D</i>:     integers 1 to 31\n       Domain <i>Y</i>:     integers 0100 to 9999 (but probably 1800 to 2100)\n       Range:        <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549) or <i>missing</i>\n</p>"
    },
    {
        "mdyhms": "<p>\n<b>mdyhms(</b><i>M</i><b>,</b><i>D</i><b>,</b><i>Y</i><b>,</b><i>h</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  the <i>e_tc</i> datetime (ms. since 01jan1960 00:00:00.000)\n                     corresponding to <i>M</i>, <i>D</i>, <i>Y</i>, <i>h</i>, <i>m</i>, <i>s</i>\n       Domain <i>M</i>:     integers 1 to 12\n       Domain <i>D</i>:     integers 1 to 31\n       Domain <i>Y</i>:     integers 0100 to 9999 (but probably 1800 to 2100)\n       Domain <i>h</i>:     integers 0 to 23\n       Domain <i>m</i>:     integers 0 to 59\n       Domain <i>s</i>:     reals 0.000 to 59.999\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999) and <i>missing</i>\n</p>"
    },
    {
        "missing": "<p>\n<b>missing(</b><i>x1</i><b>,</b><i>x2</i><b>,</b><i>...</i><b>,</b><i>xn</i><b>)</b>\n       Description:  <b>1</b> if any of the arguments evaluates to <i>missing</i>;\n                     otherwise, <b>0</b>\n</p><p>\n                     Stata has two concepts. of missing values:  a numeric\n                     missing value (<b>.</b>, <b>.a</b>, <b>.b</b>, ..., <b>.z</b>) and a string missing\n                     value (<b>\"\"</b>).  <b>missing()</b> returns <b>1</b> (meaning <i>true</i>) if any\n                     expression <i>xi</i> evaluates to <i>missing</i>.  If <i>x</i> is numeric,\n                     <b>missing(</b><i>x</i><b>)</b> is equivalent to <i>x</i> <u>&gt;</u> <b>.</b>. If <i>x</i> is string,\n                     <b>missing(</b><i>x</i><b>)</b> is equivalent to <i>x</i><b>==\"\"</b>.\n       Domain <i>xi</i>:    any string or numeric expression\n       Range:        0 and 1\n</p><p>\n<b>mi(</b><i>x1</i><b>,</b><i>x2</i><b>,</b><i>...</i><b>,</b><i>xn</i><b>)</b>\n       Description:  a synonym for <a href=\"/help.cgi?missing()\"><b>missing(</b></a><a href=\"/help.cgi?missing()\"><i>x1</i></a><a href=\"/help.cgi?missing()\"><b>,</b></a><a href=\"/help.cgi?missing()\"><i>x2</i></a><a href=\"/help.cgi?missing()\"><b>,</b></a><a href=\"/help.cgi?missing()\"><i>...</i></a><a href=\"/help.cgi?missing()\"><b>,</b></a><a href=\"/help.cgi?missing()\"><i>xn</i></a><a href=\"/help.cgi?missing()\"><b>)</b></a>\n</p>"
    },
    {
        "min": "<p>\n<b>min(</b><i>x1</i><b>,</b><i>x2</i><b>,</b><i>...</i><b>,</b><i>xn</i><b>)</b>\n       Description:  the minimum value of <i>x1</i>, <i>x2</i>, ..., <i>xn</i>\n        \n                     Unless all arguments are <i>missing</i>, missing values are\n                     ignored.\n                     <b>min(2,10,.,7)</b> = <b>2</b>\n<b>min(.,.,.)</b> = <b>.</b>\n       Domain <i>x1</i>:    -8e+307 to 8e+307 or <i>missing</i>\n       Domain <i>x2</i>:    -8e+307 to 8e+307 or <i>missing</i>\n       ...           \n       Domain <i>xn</i>:    -8e+307 to 8e+307 or <i>missing</i>\n       Range:        -8e+307 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "minbyte": "<p>\n<b>minbyte()</b>\n       Description:  the smallest value that can be stored in storage type\n                     <b>byte</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one integer number\n</p>"
    },
    {
        "mindouble": "<p>\n<b>mindouble()</b>\n       Description:  the smallest value that can be stored in storage type\n                     <b>double</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one double-precision number\n</p>"
    },
    {
        "minfloat": "<p>\n<b>minfloat()</b>\n       Description:  the smallest value that can be stored in storage type\n                     <b>float</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one floating-point number\n</p>"
    },
    {
        "minint": "<p>\n<b>minint()</b>\n       Description:  the smallest value that can be stored in storage type\n                     <b>int</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one integer number\n</p>"
    },
    {
        "minlong": "<p>\n<b>minlong()</b>\n       Description:  the smallest value that can be stored in storage type\n                     <b>long</b>\n        \n                     This function takes no arguments, but the parentheses\n                     must be included.\n       Range:        one integer number\n</p>"
    },
    {
        "minutes": "<p>\n<b>minutes(</b><i>ms</i><b>)</b>\n       Description:  <i>ms</i>/60,000\n       Domain <i>ms</i>:    real; milliseconds\n       Range:        real or <i>missing</i>\n</p>"
    },
    {
        "missing": "<p>\n<b>missing(</b><i>x1</i><b>,</b><i>x2</i><b>,</b><i>...</i><b>,</b><i>xn</i><b>)</b>\n       Description:  <b>1</b> if any of the arguments evaluates to <i>missing</i>;\n                     otherwise, <b>0</b>\n</p><p>\n                     Stata has two concepts. of missing values:  a numeric\n                     missing value (<b>.</b>, <b>.a</b>, <b>.b</b>, ..., <b>.z</b>) and a string missing\n                     value (<b>\"\"</b>).  <b>missing()</b> returns <b>1</b> (meaning <i>true</i>) if any\n                     expression <i>xi</i> evaluates to <i>missing</i>.  If <i>x</i> is numeric,\n                     <b>missing(</b><i>x</i><b>)</b> is equivalent to <i>x</i> <u>&gt;</u> <b>.</b>. If <i>x</i> is string,\n                     <b>missing(</b><i>x</i><b>)</b> is equivalent to <i>x</i><b>==\"\"</b>.\n       Domain <i>xi</i>:    any string or numeric expression\n       Range:        0 and 1\n</p><p>\n<b>mi(</b><i>x1</i><b>,</b><i>x2</i><b>,</b><i>...</i><b>,</b><i>xn</i><b>)</b>\n       Description:  a synonym for <a href=\"/help.cgi?missing()\"><b>missing(</b></a><a href=\"/help.cgi?missing()\"><i>x1</i></a><a href=\"/help.cgi?missing()\"><b>,</b></a><a href=\"/help.cgi?missing()\"><i>x2</i></a><a href=\"/help.cgi?missing()\"><b>,</b></a><a href=\"/help.cgi?missing()\"><i>...</i></a><a href=\"/help.cgi?missing()\"><b>,</b></a><a href=\"/help.cgi?missing()\"><i>xn</i></a><a href=\"/help.cgi?missing()\"><b>)</b></a>\n</p>"
    },
    {
        "mm": "<p>\n<b>mm(</b><i>e_tc</i><b>)</b>\n       Description:  the minute corresponding to datetime <i>e_tc</i> (ms. since\n                     01jan1960 00:00:00.000)\n       Domain <i>e_tc</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999)\n       Range:        integers 0 through 59, <i>missing</i>\n</p>"
    },
    {
        "mmC": "<p>\n<b>mmC(</b><i>e_tC</i><b>)</b>\n       Description:  the minutes corresponding to datetime <i>e_tC</i> (ms. with\n                     leap seconds since 01jan1960 00:00:00.000)\n       Domain <i>e_tC</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999)\n       Range:        integers 0 through 59, <i>missing</i>\n</p>"
    },
    {
        "mod": "<p>\n<b>mod(</b><i>x</i><b>,</b><i>y</i><b>)</b>\n       Description:  the modulus of <i>x</i> with respect to <i>y</i>\n<b>mod(</b><i>x</i><b>,</b><i>y</i><b>)</b> = <i>x</i> - <i>y</i>*<b>floor(</b><i>x</i>/<i>y</i><b>)</b>\n<b>mod(</b><i>x</i><b>,0)</b> = <b>.</b>\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>y</i>:     0 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "mofd": "<p>\n<b>mofd(</b><i>e_d</i><b>)</b>\n       Description:  the <i>e_m</i> monthly date (months since 1960m1) containing\n                     date <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        <b>%tm</b> dates 0100m1 to 9999m12 (integers -22,320 to 96,479)\n</p>"
    },
    {
        "month": "<p>\n<b>month(</b><i>e_d</i><b>)</b>\n       Description:  the numeric month corresponding to date <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        integers 1 to 12 or <i>missing</i>\n</p>"
    },
    {
        "monthly": "<p>\n<b>monthly(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_m</i> monthly date (months since 1960m1) corresponding\n                     to <i>s1</i> based on <i>s2</i> and <i>Y</i>; <i>Y</i> specifies <i>topyear</i>; see <a href=\"/help.cgi?date()\"><b>date()</b></a>\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings <b>\"MY\"</b> and <b>\"YM\"</b>; <b>Y</b> may be prefixed with <i>##</i>\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        <b>%tm</b> dates 0100m1 to 9999m12 (integers -22,320 to 96,479)\n                     or <i>missing</i>\n</p>"
    },
    {
        "mreldif": "<p>\n<b>mreldif(</b><i>X</i><b>,</b><i>Y</i><b>)</b>\n       Description:  the relative difference of <i>X</i> and <i>Y</i>\n       Domain <i>X</i>:     matrices\n       Domain <i>Y</i>:     matrices with same number of rows and columns as <i>X</i>\n       Range:        scalars -8e+307 to 8e+307\n</p>"
    },
    {
        "msofhours": "<p>\n<b>msofhours(</b><i>h</i><b>)</b>\n       Description:  <i>h</i> x 3,600,000\n       Domain <i>h</i>:     real; hours\n       Range:        real or <i>missing</i>; milliseconds\n</p>"
    },
    {
        "msofminutes": "<p>\n<b>msofminutes(</b><i>m</i><b>)</b>\n       Description:  <i>m</i> x 60,000\n       Domain <i>m</i>:     real; minutes\n       Range:        real or <i>missing</i>; milliseconds\n</p>"
    },
    {
        "msofseconds": "<p>\n<b>msofseconds(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> x 1,000\n       Domain <i>s</i>:     real; seconds\n       Range:        real or <i>missing</i>; milliseconds\n</p>"
    },
    {
        "nbetaden": "<p>\n<b>nbetaden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>np</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density function of the noncentral beta\n                     distribution; <b>0</b> if <i>x</i> &lt; 0 or <i>x</i> &gt; 1\n                     \n                     <i>a</i> and <i>b</i> are shape parameters, <i>np</i> is the noncentrality\n                     parameter, and <i>x</i> is the value of a beta random variable.\n</p><p>\n<b>nbetaden(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>x</i><b>)</b> = <b>betaden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>, but <a href=\"/help.cgi?betaden()\"><b>betaden()</b></a> is the\n                     preferred function to use for the central beta\n                     distribution. <b>nbetaden()</b> is computed using an algorithm\n                     described in <a href=\"/help.cgi?f_nbetaden#JKB1995\">Johnson, Kotz, and Balakrishnan (1995)</a>.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>np</i>:    0 to 1,000\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is 0 <u>&lt;</u> <i>x</i> <u>&lt;</u> 1\n       Range:        0 to 8e+307\n</p><p>\n</p><p>\n<b><u>Reference</u></b>\n</p><p>\n<a name=\"JKB1995\"></a>    Johnson, N. L., S. Kotz, and N. Balakrishnan.  1995.  <i>Continuous</i>\n<i>Univariate Distributions, Vol. 2</i>. 2nd ed.  New York: Wiley.\n</p>"
    },
    {
        "nbinomial": "<p>\n<b>nbinomial(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the cumulative probability of the negative binomial\n                     distribution\n        \n                     <i>n</i> can be nonintegral.  When <i>n</i> is an integer, <b>nbinomial()</b>\n                     returns the probability of observing <i>k</i> or fewer failures\n                     before the <i>n</i>th success, when the probability of a\n                     success on one trial is <i>p</i>.\n</p><p>\n                     The negative binomial distribution function is evaluated\n                     using <a href=\"/help.cgi?ibeta()\"><b>ibeta()</b></a>.\n       Domain <i>n</i>:     1e-10 to 1e+17 (can be nonintegral)\n       Domain <i>k</i>:     0 to 2^53-1\n       Domain <i>p</i>:     0 to 1 (left exclusive)\n       Range:        0 to 1\n</p>"
    },
    {
        "nbinomialp": "<p>\n<b>nbinomialp(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the negative binomial probability\n</p><p>\n                     When <i>n</i> is an integer, <b>nbinomialp()</b> returns the\n                     probability of observing exactly <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>k</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a> failures\n                     before the <i>n</i>th success when the probability of a success\n                     on one trial is <i>p</i>.\n       Domain <i>n</i>:     1e-10 to 1e+6 (can be nonintegral)\n       Domain <i>k</i>:     0 to 1e+10\n       Domain <i>p</i>:     0 to 1 (left exclusive)\n       Range:        0 to 1\n</p>"
    },
    {
        "nbinomialtail": "<p>\n<b>nbinomialtail(</b><i>n</i><b>,</b><i>k</i><b>,</b><i>p</i><b>)</b>\n       Description:  the reverse cumulative probability of the negative\n                     binomial distribution\n        \n                     When <i>n</i> is an integer, <b>nbinomialtail()</b> returns the\n                     probability of observing <i>k</i> or more failures before the\n                     <i>n</i>th success, when the probability of a success on one\n                     trial is <i>p</i>.\n</p><p>\n                     The reverse negative binomial distribution function is\n                     evaluated using <a href=\"/help.cgi?ibetatail()\"><b>ibetatail()</b></a>.\n       Domain <i>n</i>:     1e-10 to 1e+17 (can be nonintegral)\n       Domain <i>k</i>:     0 to 2^53-1\n       Domain <i>p</i>:     0 to 1 (left exclusive)\n       Range:        0 to 1\n</p>"
    },
    {
        "nchi2": "<p>\n<b>nchi2(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative noncentral chi-squared distribution; <b>0</b> if\n                     <i>x</i> &lt; 0\n</p><p>\n<i>df</i> denotes the degrees of freedom, <i>np</i> is the\n                     noncentrality parameter, and <i>x</i> is the value of\n                     chi-squared.\n</p><p>\n<b>nchi2(</b><i>df</i><b>,0,</b><i>x</i><b>)</b> = <b>chi2(</b><i>df</i><b>,</b><i>x</i><b>)</b>, but <b>chi2()</b> is the preferred\n                     function to use for the central chi-squared\n                     distribution.\n       Domain <i>df</i>:    2e-10 to 1e+6 (may be nonintegral)\n       Domain <i>np</i>:    0 to 10,000\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p>"
    },
    {
        "nchi2den": "<p>\n<b>nchi2den(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density of the noncentral chi-squared\n                     distribution; <b>0</b> if <i>x</i> &lt;= 0\n        \n                     <i>df</i> denotes the degrees of freedom, <i>np</i> is the\n                     noncentrality parameter, and <i>x</i> is the value of\n                     chi-squared.\n</p><p>\n<b>nchi2den(</b><i>df</i><b>,0,</b><i>x</i><b>)</b> = <b>chi2den(</b><i>df</i><b>,</b><i>x</i><b>)</b>, but <a href=\"/help.cgi?chi2den()\"><b>chi2den()</b></a> is the\n                     preferred function to use for the central chi-squared\n                     distribution.\n       Domain <i>df</i>:    2e-10 to 1e+6 (may be nonintegral)\n       Domain <i>np</i>:    0 to 10,000\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "nchi2tail": "<p>\n<b>nchi2tail(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor)\n                     noncentral chi-squared distribution; <b>1</b> if <i>x</i> &lt; 0\n        \n                     <i>df</i> denotes the degrees of freedom, <i>np</i> is the\n                     noncentrality parameter, and <i>x</i> is the value of\n                     chi-squared.\n       Domain <i>df</i>:    2e-10 to 1e+6 (may be nonintegral)\n       Domain <i>np</i>:    0 to 10,000\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "nF": "<p>\n<b>nF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>f</i><b>)</b>\n       Description:  the cumulative noncentral F distribution with <i>df1</i>\n                     numerator and <i>df2</i> denominator degrees of freedom and\n                     noncentrality parameter <i>np</i>; <b>0</b> if <i>f</i> &lt; 0\n</p><p>\n<b>nF(</b><i>df1</i><b>,</b><i>df2</i><b>,0,</b><i>f</i><b>)</b> = <b>F(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>)</b>\n</p><p>\n<b>nF()</b> is computed using <a href=\"/help.cgi?nibeta()\"><b>nibeta()</b></a> based on the\n                     relationship between the noncentral beta and noncentral\n                     F distributions:\n                     <b>nF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>f</i><b>)</b> =\n                     <b>nibeta(</b><i>df1</i>/2<b>,</b> <i>df2</i>/2<b>,</b> <i>np</i><b>,</b> <i>df1</i>*<i>f</i>/{(<i>df1</i>*<i>f</i>)+<i>df2</i>}}<b>)</b>.\n</p><p>\n       Domain <i>df1</i>:   2e-10 to 1e+8 (may be nonintegral)\n       Domain <i>df2</i>:   2e-10 to 1e+8 (may be nonintegral)\n       Domain <i>np</i>:    0 to 10,000\n       Domain <i>f</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "nFden": "<p>\n<b>nFden(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>f</i><b>)</b>\n       Description:  the probability density function of the noncentral F\n                     density with <i>df1</i> numerator and <i>df2</i> denominator degrees\n                     of freedom and noncentrality parameter <i>np</i>; <b>0</b> if <i>f</i> &lt; 0\n</p><p>\n<b>nFden(</b><i>df1</i><b>,</b><i>df2</i><b>,0,</b><i>f</i><b>)</b> = <b>Fden(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>)</b>, but <a href=\"/help.cgi?Fden()\"><b>Fden()</b></a> is the\n                     preferred function to use for the central F\n                     distribution.\n</p><p>\n                     Also, if <i>F</i> follows the noncentral <i>F</i> distribution with\n                     <i>df1</i> and <i>df2</i> degrees of freedom and noncentrality\n                     parameter <i>np</i>, then\n</p><p>\n<i>df1 F</i>\n                               -----------\n                               <i>df2</i> + <i>df1 F</i>\n</p><p>\n                     follows a noncentral beta distribution with shape\n                     parameters <i>a</i>=<i>df1</i>/2, <i>b</i>=<i>df2</i>/2, and noncentrality parameter\n                     <i>np</i>, as given in <b>nbetaden()</b>.  <b>nFden()</b> is computed based\n                     on this relationship.\n       Domain <i>df1</i>:   1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>df2</i>:   1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>np</i>:    0 to 1,000\n       Domain <i>f</i>:     -8e+307 to 8e+307; interesting domain is <i>f</i> <u>&gt;</u> 0\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "nFtail": "<p>\n<b>nFtail(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>f</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor)\n                     noncentral F distribution with <i>df1</i> numerator and <i>df2</i>\n                     denominator degrees of freedom and noncentrality\n                     parameter <i>np</i>; <b>1</b> if <i>f</i> &lt; 0\n</p><p>\n<b>nFtail()</b> is computed using <b>nibeta()</b> based on the\n                     relationship between the noncentral beta and F\n                     distributions.  See <a href=\"/help.cgi?density+functions#JKB1995\">Johnson, Kotz, and Balakrishnan</a>\n<a href=\"/help.cgi?density+functions#JKB1995\">(1995)</a> for more details.\n       Domain <i>df1</i>:   1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>df2</i>:   1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>np</i>:    0 to 1,000\n       Domain <i>f</i>:     -8e+307 to 8e+307; interesting domain is <i>f</i> <u>&gt;</u> 0\n       Range:        0 to 1\n</p><p>\n</p><p>\n<b><u>Reference</u></b>\n</p><p>\n    Johnson, N. L., S. Kotz, and N. Balakrishnan. 1995.  <i>Continuous</i>\n<i>Univariate Distributions, Vol. 2</i>.  2nd ed. New York: Wiley.\n</p>"
    },
    {
        "nibeta": "<p>\n<b>nibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>np</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative noncentral beta distribution; <b>0</b> if <i>x</i> &lt; 0;\n                     <b>1</b> if <i>x</i> &gt; 1\n</p><p>\n<i>a</i> and <i>b</i> are shape parameters, <i>np</i> is the noncentrality\n                     parameter, and <i>x</i> is the value of a beta random variable.\n</p><p>\n<b>nibeta(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>x</i><b>)</b> = <b>ibeta(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>, but <a href=\"/help.cgi?ibeta()\"><b>ibeta()</b></a> is the\n                     preferred function to use for the central beta\n                     distribution. <b>nibeta()</b> is computed using an algorithm\n                     described in <a href=\"/help.cgi?f_nibeta#JKB1995\">Johnson, Kotz, and Balakrishnan (1995)</a>.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>np</i>:    0 to 10,000\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is 0 <u>&lt;</u> <i>x</i> <u>&lt;</u> 1\n       Range:        0 to 1\n</p><p>\n</p><p>\n<b><u>Reference</u></b>\n</p><p>\n<a name=\"JKB1995\"></a>    Johnson, N. L., S. Kotz, and N. Balakrishnan. 1995.  <i>Continuous</i>\n<i>Univariate Distributions, Vol. 2</i>.  2nd ed. New York: Wiley.\n</p>"
    },
    {
        "normal": "<p>\n<b>normal(</b><i>z</i><b>)</b>\n       Description:  the cumulative standard normal distribution\n       Domain:       -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "normalden": "<p>\n<b>normalden(</b><i>z</i><b>)</b>\n       Description:  the standard normal density\n       Domain:       -8e+307 to 8e+307\n       Range:        0 to 0.39894 ...\n</p><p>\n<b>normalden(</b><i>x</i><b>,</b><i>s</i><b>)</b>\n       Description:  the normal density with mean 0 and standard deviation <i>s</i>\n</p><p>\n<b>normalden(</b><i>x</i><b>,1)</b> = <b>normalden(</b><i>x</i><b>)</b> and\n                     <b>normalden(</b><i>x</i><b>,</b><i>s</i><b>)</b> = <b>normalden(</b><i>x</i>/<i>s</i><b>)</b>/<i>s</i>\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-308 to 8e+307\n       Range:        0 to 8e+307\n</p><p>\n<b>normalden(</b><i>x</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  the normal density with mean <i>m</i> and standard deviation <i>s</i>\n</p><p>\n<b>normalden(</b><i>x</i><b>,0,</b><i>s</i><b>)</b> = <b>normalden(</b><i>x</i><b>,</b><i>s</i><b>)</b> and\n                     <b>normalden(</b><i>x</i><b>,</b><i>m</i><b>,</b><i>s</i><b>)</b> = <b>normalden(</b>(<i>x</i>-<i>m</i>)/<i>s</i><b>)</b>/<i>s</i>\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>m</i>:     -8e+307 to 8e+307\n       Domain <i>s</i>:     1e-308 to 8e+307\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "npnchi2": "<p>\n<b>npnchi2(</b><i>df</i><b>,</b><i>x</i><b>,</b><i>p</i><b>)</b>\n       Description:  the noncentrality parameter, <i>np</i>, for the noncentral\n                     chi-squared: if <b>nchi2(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>x</i><b>)</b> = <i>p</i>, then <b>npnchi2(</b><i>df</i><b>,</b><i>x</i><b>,</b><i>p</i><b>)</b>\n                     = <i>np</i>\n       Domain <i>df</i>:    2e-10 to 1e+6 (may be nonintegral)\n       Domain <i>x</i>:     0 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 10,000\n</p>"
    },
    {
        "npnF": "<p>\n<b>npnF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>,</b><i>p</i><b>)</b>\n       Description:  the noncentrality parameter, <i>np</i>, for the noncentral F:\n                     if <b>nF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>np</i><b>,</b><i>f</i><b>)</b> = <i>p</i>, then <b>npnF(</b><i>df1</i><b>,</b><i>df2</i><b>,</b><i>f</i><b>,</b><i>p</i><b>)</b> = <i>np</i>\n       Domain <i>df1</i>:   2e-10 to 1e+6 (may be nonintegral)\n       Domain <i>df2</i>:   2e-10 to 1e+6 (may be nonintegral)\n       Domain <i>f</i>:     0 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        0 to 10,000\n</p>"
    },
    {
        "npnt": "<p>\n<b>npnt(</b><i>df</i><b>,</b><i>t</i><b>,</b><i>p</i><b>)</b>\n       Description:  the noncentrality parameter, <i>np</i>, for the noncentral\n                     Student's t distribution:  if <b>nt(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>t</i><b>)</b> = <i>p</i>, then\n                     <b>npnt(</b><i>df</i><b>,</b><i>t</i><b>,</b><i>p</i><b>)</b> = <i>np</i>\n       Domain <i>df</i>:    1e-100 to 1e+8 (may be nonintegral)\n       Domain <i>t</i>:     -8e+307 to 8e+307\n       Domain <i>p</i>:     0 to 1\n       Range:        -1,000 to 1,000\n</p>"
    },
    {
        "nt": "<p>\n<b>nt(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>t</i><b>)</b>\n       Description:  the cumulative noncentral Student's t distribution with\n                     <i>df</i> degrees of freedom and noncentrality parameter <i>np</i>\n</p><p>\n<b>nt(</b><i>df</i><b>,0,</b><i>t</i><b>)</b> = <b>t(</b><i>df</i><b>,</b><i>t</i><b>)</b>\n       Domain <i>df</i>:    1e-100 to 1e+10 (may be nonintegral)\n       Domain <i>np</i>:    -1,000 to 1,000\n       Domain <i>t</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "ntden": "<p>\n<b>ntden(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>t</i><b>)</b>\n       Description:  the probability density function of the noncentral\n                     Student's t distribution with <i>df</i> degrees of freedom and\n                     noncentrality parameter <i>np</i>\n       Domain <i>df</i>:    1e-100 to 1e+10 (may be nonintegral)\n       Domain <i>np</i>:    -1,000 to 1,000\n       Domain <i>t</i>:     -8e+307 to 8e+307\n       Range:        0 to 0.39894 ...\n</p>"
    },
    {
        "nttail": "<p>\n<b>nttail(</b><i>df</i><b>,</b><i>np</i><b>,</b><i>t</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor)\n                     noncentral Student's t distribution with <i>df</i> degrees of\n                     freedom and noncentrality parameter <i>np</i>\n       Domain <i>df</i>:    1e-100 to 1e+10 (may be nonintegral)\n       Domain <i>np</i>:    -1,000 to 1,000\n       Domain <i>t</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "nullmat": "<p>\n<b>nullmat(</b><i>matname</i><b>)</b>\n       Description:  use with the row-join (<b>,</b>) and column-join (<b>\\</b>) operators\n        \n                     Consider the following code fragment, which is an\n                     attempt to create the vector (1,2,3,4):\n</p><p>\n<b>forvalues i = 1/4 {</b>\n<b>                                   mat v = (v, `i')</b>\n<b>                           }</b>\n</p><p>\n                     The above program will not work because, the first time\n                     through the loop, <b>v</b> will not yet exist, and thus forming\n                     <b>(v, `i')</b> makes no sense.  <b>nullmat()</b> relaxes that\n                     restriction:\n</p><p>\n<b>forvalues i = 1/4 {</b>\n<b>                                   mat v = (nullmat(v), `i')</b>\n<b>                           }</b>\n</p><p>\n                     The <b>nullmat()</b> function informs Stata that if <b>v</b> does not\n                     exist, the function row-join is to be generalized.\n                     Joining nothing with <b>`i'</b> results in <b>(`i')</b>.  Thus the\n                     first time through the loop, <b>v</b> = (1) is formed.  The\n                     second time through, <b>v</b> does exist, so <b>v</b> = (1,2) is\n                     formed, and so on.\n</p><p>\n<b>nullmat()</b> can be used only with the <b>,</b> and <b>\\</b> operators.\n       Domain:       matrix names, existing and nonexisting\n       Range:        matrices including null if <i>matname</i> does not exist\n</p>"
    },
    {
        "plural": "<p>\n<b>plural(</b><i>n</i><b>,</b><i>s</i><b>)</b>\n       Description:  the plural of <i>s</i> if <i>n</i> != +/-1\n</p><p>\n                     The plural is formed by adding \"s\" to <i>s</i>.\n</p><p>\n<b>plural(1, \"horse\")</b> = <b>\"horse\"</b>\n<b>plural(2, \"horse\")</b> = <b>\"horses\"</b>\n       Domain <i>n</i>:     real numbers\n       Domain <i>s</i>:     strings\n       Range:        strings\n</p><p>\n<b>plural(</b><i>n</i><b>,</b><i>s1</i><b>,</b><i>s2</i><b>)</b>\n       Description:  the plural of <i>s1</i>, as modified by or replaced with <i>s2</i>, if\n                     <i>n</i> != +/-1\n</p><p>\n                     If <i>s2</i> begins with the character \"<b>+</b>\", the plural is\n                     formed by adding the remainder of <i>s2</i> to <i>s1</i>.  If <i>s2</i>\n                     begins with the character \"<b>-</b>\", the plural is formed by\n                     subtracting the remainder of <i>s2</i> from <i>s1</i>.  If <i>s2</i> begins\n                     with neither \"<b>+</b>\" nor \"<b>-</b>\", then the plural is formed by\n                     returning <i>s2</i>.\n</p><p>\n<b>plural(2, \"glass\", \"+es\")</b> = <b>\"glasses\"</b>\n<b>plural(1, \"mouse\", \"mice\")</b> = <b>\"mouse\"</b>\n<b>plural(2, \"mouse\", \"mice\")</b> = <b>\"mice\"</b>\n<b>plural(2, \"abcdefg\", \"-efg\")</b> = <b>\"abcd\"</b>\n       Domain <i>n</i>:     real numbers\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings\n       Range:        strings\n</p>"
    },
    {
        "poisson": "<p>\n<b>poisson(</b><i>m</i><b>,</b><i>k</i><b>)</b>\n       Description:  the probability of observing <b>floor(</b><i>k</i><b>)</b> or fewer outcomes\n                     that are distributed as Poisson with mean <i>m</i>\n</p><p>\n                     The Poisson distribution function is evaluated using \n                     <a href=\"/help.cgi?gammaptail()\"><b>gammaptail()</b></a>.\n       Domain <i>m</i>:     1e-10 to 2^53-1\n       Domain <i>k</i>:     0 to 2^53-1\n       Range:        0 to 1\n</p>"
    },
    {
        "poissonp": "<p>\n<b>poissonp(</b><i>m</i><b>,</b><i>k</i><b>)</b>\n       Description:  the probability of observing <b>floor(</b><i>k</i><b>)</b> outcomes that are\n                     distributed as Poisson with mean <i>m</i>\n</p><p>\n                     The Poisson probability function is evaluated using \n                     <a href=\"/help.cgi?gammaden()\"><b>gammaden()</b></a>.\n       Domain <i>m</i>:     1e-10 to 1e+8\n       Domain <i>k</i>:     0 to 1e+9\n       Range:        0 to 1\n</p>"
    },
    {
        "poissontail": "<p>\n<b>poissontail(</b><i>m</i><b>,</b><i>k</i><b>)</b>\n       Description:  the probability of observing <b>floor(</b><i>k</i><b>)</b> or more outcomes\n                     that are distributed as Poisson with mean <i>m</i>\n</p><p>\n                     The reverse cumulative Poisson distribution function is\n                     evaluated using <a href=\"/help.cgi?gammap()\"><b>gammap()</b></a>.\n       Domain <i>m</i>:     1e-10 to 2^53-1\n       Domain <i>k</i>:     0 to 2^53-1\n       Range:        0 to 1\n</p>"
    },
    {
        "qofd": "<p>\n<b>qofd(</b><i>e_d</i><b>)</b>\n       Description:  the <i>e_q</i> quarterly date (quarters since 1960q1)\n                     containing date <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        <b>%tq</b> dates 0100q1 to 9999q4 (integers -7,440 to 32,159)\n</p>"
    },
    {
        "quarter": "<p>\n<b>quarter(</b><i>e_d</i><b>)</b>\n       Description:  the numeric quarter of the year corresponding to date\n                     <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        integers 1 to 4 or <i>missing</i>\n</p>"
    },
    {
        "quarterly": "<p>\n<b>quarterly(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_q</i> quarterly date (quarters since 1960q1)\n                     corresponding to <i>s1</i> based on <i>s2</i> and <i>Y</i>; <i>Y</i> specifies\n                     <i>topyear</i>; see <a href=\"/help.cgi?date()\"><b>date()</b></a>\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings <b>\"QY\"</b> and <b>\"YQ\"</b>; <b>Y</b> may be prefixed with <i>##</i>\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        <b>%tq</b> dates 0100q1 to 9999q4 (integers -7,440 to 32,159)\n                     or <i>missing</i>\n</p>"
    },
    {
        "r": "<p>\n<b>r(</b><i>name</i><b>)</b>\n       Description:  the value of stored result <b>r(</b><i>name</i><b>)</b>; see <b>[U] 18.8</b>\n<b>Accessing results calculated by other programs</b>\n</p><p>\n<b>r(</b><i>name</i><b>)</b> = scalar missing if the stored result does not\n                         exist\n                     <b>r(</b><i>name</i><b>)</b> = specified matrix if the stored result is a\n                         matrix\n                     <b>r(</b><i>name</i><b>)</b> = scalar numeric value if the stored result is a\n                         scalar that can be interpreted as a number\n       Domain:       names\n       Range:        strings, scalars, matrices, or <i>missing</i>\n</p>"
    },
    {
        "rbeta": "<p>\n<b>rbeta(</b><i>a</i><b>,</b><i> b</i><b>)</b>\n       Description:  beta(<i>a</i>,<i>b</i>) random variates, where <i>a</i> and <i>b</i> are the beta\n                     distribution shape parameters\n</p><p>\n                     Besides using the standard methodology for generating\n                     random variates from a given distribution, <b>rbeta()</b> uses\n                     the specialized algorithms of Johnk (<a href=\"/help.cgi?rbeta()#G2003\">Gentle 2003</a>),\n                     Atkinson and Wittaker (<a href=\"/help.cgi?rbeta()#AW1970\">1970</a>, <a href=\"/help.cgi?rbeta()#AW1976\">1976</a>), <a href=\"/help.cgi?rbeta()#D1986\">Devroye (1986)</a>, and\n                     <a href=\"/help.cgi?rbeta()#SB1980\">Schmeiser and Babu (1980)</a>.\n       Domain <i>a</i>:     0.05 to 1e+5\n       Domain <i>b</i>:     0.15 to 1e+5\n       Range:        0 to 1 (exclusive)\n</p><p>\n</p><p>\n<a name=\"references\"></a><b><u>References</u></b>\n</p><p>\n<a name=\"AW1976\"></a>    Atkinson, A. C., and J. Whittaker.  1976.  A switching algorithm for the\n        generation of beta random variables with at least one parameter less\n        than 1.  <i>Journal of the Royal Statistical Society, Series A</i> 139:\n        462-467.\n</p><p>\n<a name=\"AW1970\"></a>    ------. 1970. Algorithm AS 134: The generation of beta random variables\n        with one parameter greater than and one parameter less than 1.\n        <i>Applied Statistics</i> 28: 90-93.\n</p><p>\n<a name=\"D1986\"></a>    Devroye, L.  1986.  <i>Non-uniform Random Variate Generation</i>.  New York:\n        Springer.\n</p><p>\n<a name=\"G2003\"></a>    Gentle, J. E.  2003.  <i>Random Number Generation and Monte Carlo Methods</i>.\n        2nd ed.  New York: Springer.\n</p><p>\n<a name=\"SB1980\"></a>    Schmeiser, B. W., and A. J. G. Babu.  1980.  Beta variate generation via\n        exponential majorizing functions.  <i>Operations Research</i> 28: 917-926.\n</p>"
    },
    {
        "rbinomial": "<p>\n<b>rbinomial(</b><i>n</i><b>,</b><i> p</i><b>)</b>\n       Description:  binomial(<i>n</i>,<i>p</i>) random variates, where <i>n</i> is the number of\n                     trials and <i>p</i> is the success probability\n</p><p>\n                     Besides using the standard methodology for generating\n                     random variates from a given distribution, <b>rbinomial()</b>\n                     uses the specialized algorithms of <a href=\"/help.cgi?rbinomial()#K1982\">Kachitvichyanukul</a>\n<a href=\"/help.cgi?rbinomial()#K1982\">(1982)</a>, <a href=\"/help.cgi?rbinomial()#KS1988\">Kachitvichyanukul and Schmeiser (1988)</a>, and <a href=\"/help.cgi?rbinomial()#K1986\">Kemp</a>\n<a href=\"/help.cgi?rbinomial()#K1986\">(1986)</a>.\n       Domain <i>n</i>:     1 to 1e+11\n       Domain <i>p</i>:     1e-8 to 1-1e-8\n       Range:        0 to <i>n</i>\n</p><p>\n</p><p>\n<a name=\"references\"></a><b><u>References</u></b>\n</p><p>\n<a name=\"K1982\"></a>    Kachitvichyanukul, V.  1982.  Computer Generation of Poisson, Binomial,\n        and Hypergeometric Random Variables.  PhD thesis, Purdue University.\n</p><p>\n<a name=\"KS1988\"></a>    Kachitvichyanukul, V., and B. Schmeiser.  1988.  Binomial random variate\n        generation.  <i>Communications of the Association for Computing</i>\n<i>Machinery</i> 31: 216-222.\n</p><p>\n<a name=\"K1986\"></a>    Kemp, C. D.  1986.  A modal method for generating binomial variates.\n        <i>Communications in Statistics: Theory and Methods</i> 15: 805-813.\n</p>"
    },
    {
        "rcauchy": "<p>\n<b>rcauchy(</b><i>a</i><b>,</b><i>b</i><b>)</b>\n       Description:  Cauchy(<i>a</i>,<i>b</i>) random variates, where <i>a</i> is the location\n                     parameter and <i>b</i> is the scale parameter\n       Domain <i>a</i>:     -1e+300 to 1e+300\n       Domain <i>b</i>:     1e-100 to 1e+300\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p>"
    },
    {
        "rchi2": "<p>\n<b>rchi2(</b><i>df</i><b>)</b>\n       Description:  chi-squared, with <i>df</i> degrees of freedom, random variates\n       Domain <i>df</i>:    2e-4 to 2e+8\n       Range:        0 to <b>c(maxdouble)</b>\n</p>"
    },
    {
        "real": "<p>\n<b>real(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> converted to numeric or <i>missing</i>\n</p><p>\n                     Also see <a href=\"/help.cgi?strofreal()\"><b>strofreal()</b></a>.\n</p><p>\n<b>real(\"5.2\")+1</b> = <b>6.2</b>\n<b>real(\"hello\")</b> = <b>.</b>\n       Domain <i>s</i>:     strings\n       Range:        -8e+307 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "recode": "<p>\n<b>recode(</b><i>x</i><b>,</b><i>x1</i><b>,</b><i>x2</i><b>,</b><i>...</i><b>,</b><i>xn</i><b>)</b>\n       Description:  <i>missing</i> if <i>x1</i>, <i>x2</i>, ..., <i>xn</i> is not weakly increasing; <i>x</i>\n                     if <i>x</i> is missing; <i>x1</i> if <i>x</i> <u>&lt;</u> <i>x1</i>; <i>x2</i> if <i>x</i> <u>&lt;</u> <i>x2</i>, ...;\n                     otherwise, <i>xn</i> if <i>x</i> &gt; <i>x1</i>, <i>x2</i>, ..., <i>xn-1</i>.  <i>xi</i> <u>&gt;</u> <b>.</b> is\n                     interpreted as <i>xi</i> = +inf\n</p><p>\n                     Also see <a href=\"/help.cgi?autocode()\"><b>autocode()</b></a> and <a href=\"/help.cgi?irecode()\"><b>irecode()</b></a> for other styles of\n                     recode functions.\n       Domain <i>x</i>:     -8e+307 to 8e+307 or <i>missing</i>\n       Domain <i>x1</i>:    -8e+307 to 8e+307\n       Domain <i>x2</i>:    <i>x1</i> to 8e+307\n       ...           \n       Domain <i>xn</i>:    <i>xn-1</i> to 8e+307\n       Range:        <i>x1</i>, <i>x2</i>, ..., <i>xn</i> or <i>missing</i>\n</p>"
    },
    {
        "regexm": "<p>\n<b>regexm(</b><i>s</i><b>,</b><i>re</i><b>)</b>\n       Description:  performs a match of a regular expression and evaluates\n                     to <b>1</b> if regular expression <i>re</i> is satisfied by the ASCII\n                     string <i>s</i>; otherwise, <b>0</b>\n</p><p>\n                     Regular expression syntax is based on Henry Spencer's\n                     NFA algorithm, and this is nearly identical to the\n                     POSIX.2 standard.  <i>s</i> and <i>re</i> may not contain binary 0\n                     (<b>\\0</b>).\n</p><p>\n<b>regexm()</b> is intended for use with only plain ASCII\n                     characters.  For Unicode characters beyond the plain\n                     ASCII range, the match is based on bytes.  For a\n                     character-based match, see <a href=\"/help.cgi?f_ustrregexm\"><b>ustrregexm()</b></a>.\n       Domain <i>s</i>:     ASCII strings\n       Domain <i>re</i>:    regular expression\n       Range:        ASCII strings\n</p>"
    },
    {
        "regexr": "<p>\n<b>regexr(</b><i>s1</i><b>,</b><i>re</i><b>,</b><i>s2</i><b>)</b>\n       Description:  replaces the first substring within ASCII string <i>s1</i> that\n                     matches <i>re</i> with ASCII string <i>s2</i> and returns the\n                     resulting string\n</p><p>\n                     If <i>s1</i> contains no substring that matches <i>re</i>, the\n                     unaltered <i>s1</i> is returned.  <i>s1</i> and the result of <b>regexr()</b>\n                     may be at most 1,100,000 characters long.  <i>s1</i>, <i>re</i>, and\n                     <i>s2</i> may not contain binary 0 (<b>\\0</b>).\n</p><p>\n<b>regexr()</b> is intended for use with only plain ASCII\n                     characters.  For Unicode characters beyond the plain\n                     ASCII range, the match is based on bytes and the result\n                     is restricted to 1,100,000 bytes.  For a character-based\n                     match, see <a href=\"/help.cgi?f_ustrregexrf\"><b>ustrregexrf()</b></a> or <a href=\"/help.cgi?f_ustrregexra\"><b>ustrregexra()</b></a>.\n       Domain <i>s1</i>:    ASCII strings\n       Domain <i>re</i>:    regular expression\n       Domain <i>s2</i>:    ASCII strings\n       Range:        ASCII strings\n</p>"
    },
    {
        "regexs": "<p>\n<b>regexs(</b><i>n</i><b>)</b>\n       Description:  subexpression <i>n</i> from a previous <b>regexm()</b> match, where\n                     0 <u>&lt;</u> <i>n</i> &lt; 10\n</p><p>\n                     Subexpression 0 is reserved for the entire string that\n                     satisfied the regular expression.  The returned\n                     subexpression may be at most 1,100,000 characters\n                     (bytes) long.\n       Domain <i>n</i>:     0 to 9\n       Range:        ASCII strings\n</p><p>\n</p><p>\n<a name=\"examples\"></a><b><u>Examples</u></b>\n</p><p>\n    Setup\n        <b>. sysuse auto</b>\n</p><p>\n    List makes and models of cars whose make begin with the capital letter\n    \"B\"\n        <b>. generate bbegin = regexm(make, \"^B\")</b>\n<b>. list make if bbegin == 1</b>\n</p><p>\n    Or, all on one line\n        <b>. list make if regexm(make, \"^B\") == 1</b>\n</p><p>\n    List makes and models of cars where the letters \"ck\" appear anywhere in\n    the make or model\n        <b>. list make if regexm(make, \"ck\") == 1</b>\n</p><p>\n    List makes and models of cars whose model ends with a digit\n        <b>. list make if regexm(make, \"[0-9]$\") == 1</b>\n</p><p>\n    Generate a new variable <b>make2</b> equal to <b>make</b>, then replace <b>make2</b> with\n    <b>\"found\"</b> if <b>make2</b> begins with the capital letter \"B\" and ends with a\n    three-digit number followed by a single lowercase letter\n        <b>. generate make2 = make</b>\n<b>. replace make2 = regexr(make2, \"^B.*[0-9][0-9][0-9][a-z]$\",</b> <b>\"found\")</b>\n<b>. list make make2 if make != make2</b>\n</p><p>\n    Convert a phone number of the form (123) 456-7890 to the form\n    123-456-7890:\n        <b>. clear</b>\n<b>. input str15 number</b>\n</p><p>\n                         number\n             1. \"(123) 456-7890\"\n             2. \"(800) STATAPC\"\n             3. end\n</p><p>\n<b>. gen str newnum = regexs(1) + \"-\" + regexs(2)</b> <b>if regexm(number,</b>\n<b>\"^\\(([0-9]+)\\) (.*)\")</b>\n<b>. list number newnum</b>\n</p>"
    },
    {
        "reldif": "<p>\n<b>reldif(</b><i>x</i><b>,</b><i>y</i><b>)</b>\n       Description:  the \"relative\" difference |<i>x</i>-<i>y</i>|/(|<i>y</i>|+1); <b>0</b> if both\n                     arguments are the same type of extended missing value;\n                     <i>missing</i> if only one argument is missing or if the two\n                     arguments are two different types of <i>missing</i>\n       Domain <i>x</i>:     -8e+307 to 8e+307 or <i>missing</i>\n       Domain <i>y</i>:     -8e+307 to 8e+307 or <i>missing</i>\n       Range:        -8e+307 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "replay": "<p>\n<b>replay()</b>\n       Description:  <b>1</b> if the first nonblank character of local macro <b>`0'</b> is\n                     a comma, or if <b>`0'</b> is empty\n</p><p>\n                     This is a function for use by programmers writing\n                     estimation commands; see <a href=\"/help.cgi?ereturn\"><b>[P] ereturn</b></a>.\n       Range:        integers 0 and 1, meaning <i>false</i> and <i>true</i>, respectively\n</p>"
    },
    {
        "return": "<p>\n<b>return(</b><i>name</i><b>)</b>\n       Description:  the value of the to-be-stored result <b>return(</b><i>name</i><b>)</b>; see\n                     <a href=\"/help.cgi?return\"><b>[P] return</b></a>\n</p><p>\n<b>return(</b><i>name</i><b>)</b> = scalar missing if the stored result\n                                       does not exist\n                         <b>return(</b><i>name</i><b>)</b> = specified matrix if the stored result\n                                       is a matrix\n                         <b>return(</b><i>name</i><b>)</b> = scalar numeric value if the stored\n                                       result is a scalar\n       Domain:       names\n       Range:        strings, scalars, matrices, or <i>missing</i>\n</p>"
    },
    {
        "rexponential": "<p>\n<b>rexponential(</b><i>b</i><b>)</b>\n       Description:  exponential random variates with scale <i>b</i>\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Range:        1e-323 to 8e+307\n</p>"
    },
    {
        "rgamma": "<p>\n<b>rgamma(</b><i>a</i><b>, </b><i>b</i><b>)</b>\n       Description:  gamma(<i>a</i>,<i>b</i>) random variates, where <i>a</i> is the gamma shape\n                     parameter and <i>b</i> is the scale parameter\n</p><p>\n                     Methods for generating gamma variates are taken from\n                     <a href=\"/help.cgi?rgamma()#AD1974\">Ahrens and Dieter (1974)</a>, <a href=\"/help.cgi?rgamma()#B1983\">Best (1983)</a>, and <a href=\"/help.cgi?rgamma()#SL1980\">Schmeiser and</a>\n<a href=\"/help.cgi?rgamma()#SL1980\">Lal (1980)</a>.\n       Domain <i>a</i>:     1e-4 to 1e+8\n       Domain <i>b</i>:     <b>c(smallestdouble)</b> to <b>c(maxdouble)</b>\n       Range:        0 to <b>c(maxdouble)</b>\n</p><p>\n</p><p>\n<a name=\"references\"></a><b><u>References</u></b>\n</p><p>\n<a name=\"AD1974\"></a>    Ahrens, J. H., and U. Dieter.  1974.  Computer methods for sampling from\n        gamma, beta, Poisson, and binomial distributions.  <i>Computing</i> 12:\n        223-246.\n</p><p>\n<a name=\"B1983\"></a>    Best, D. J.  1983.  A note on gamma variate generators with shape\n        parameters less than unity.  <i>Computing</i> 30: 185-188.\n</p><p>\n<a name=\"SL1980\"></a>    Schmeiser, B. W., and R. Lal. 1980.  Squeeze methods for generating gamma\n        variates.  <i>Journal of the American Statistical Association</i> 75:\n        679-682.\n</p>"
    },
    {
        "rhypergeometric": "<p>\n<b>rhypergeometric(</b><i>N</i><b>,</b><i> K</i><b>,</b><i> n</i><b>)</b>\n       Description:  hypergeometric random variates\n</p><p>\n                     The distribution parameters are integer valued, where <i>N</i>\n                     is the population size, <i>K</i> is the number of elements in\n                     the population that have the attribute of interest, and\n                     <i>n</i> is the sample size.\n</p><p>\n                     Besides using the standard methodology for generating\n                     random variates from a given distribution,\n                     <b>rhypergeometric()</b> uses the specialized algorithms of\n                     <a href=\"/help.cgi?rhypergeometric()#K1982\">Kachitvichyanukul (1982)</a> and <a href=\"/help.cgi?rhypergeometric()#KS1985\">Kachitvichyanukul and</a>\n<a href=\"/help.cgi?rhypergeometric()#KS1985\">Schmeiser (1985)</a>.\n       Domain <i>N</i>:     2 to 1e+6\n       Domain <i>K</i>:     1 to <i>N-1</i>\n       Domain <i>n</i>:     1 to <i>N-1</i>\n       Range:        <b>max(</b>0<b>,</b><i>n-N+K</i><b>)</b> to <b>min(</b><i>K,n</i><b>)</b>\n</p><p>\n</p><p>\n<a name=\"references\"></a><b><u>References</u></b>\n</p><p>\n<a name=\"K1982\"></a>    Kachitvichyanukul, V.  1982.  Computer Generation of Poisson, Binomial,\n        and Hypergeometric Random Variables.  PhD thesis, Purdue University.\n</p><p>\n<a name=\"KS1985\"></a>    Kachitvichyanukul, V., and B. Schmeiser.  1985.  Computer generation of\n        hypergeometric random variates.  <i>Journal of Statistical Computation</i>\n<i>and Simulation</i> 22: 127-145.\n</p>"
    },
    {
        "rigaussian": "<p>\n<b>rigaussian(</b><i>m</i><b>,</b><i>a</i><b>)</b>\n       Description:  inverse Gaussian random variates with mean <i>m</i> and shape\n                     parameter <i>a</i>\n</p><p>\n<b>rigaussian()</b> is based on a method proposed by <a href=\"/help.cgi?rigaussian()#MSH1976\">Michael,</a>\n<a href=\"/help.cgi?rigaussian()#MSH1976\">Schucany, and Haas (1976)</a>.\n       Domain <i>m</i>:     1e-10 to 1000\n       Domain <i>a</i>:     0.001 to 1e+10\n       Range:        0 to <b>c(maxdouble)</b>\n</p><p>\n</p><p>\n<b><u>Reference</u></b>\n</p><p>\n<a name=\"MSH1976\"></a>    Michael, J. R., W. R. Schucany, and R. W. Haas.  1976. Generating random\n        variates using transformations with multiple roots.  <i>American</i>\n<i>Statistician</i> 30: 88-90.\n</p>"
    },
    {
        "rlaplace": "<p>\n<b>rlaplace(</b><i>m</i><b>,</b><i>b</i><b>)</b>\n       Description:  Laplace(<i>m</i>,<i>b</i>) random variates with mean <i>m</i> and scale\n                     parameter <i>b</i>\n       Domain <i>m</i>:     -1e+300 to 1e+300\n       Domain <i>b</i>:     1e-300 to 1e+300\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p>"
    },
    {
        "rlogistic": "<p>\n<b>rlogistic()</b>\n       Description:  logistic variates with mean 0 and standard deviation\n                     pi/sqrt(3)\n</p><p>\n                     The variates <i>x</i> are generated by <i>x</i> = <b>invlogistic(0,1,</b><i>u</i><b>)</b>,\n                     where <i>u</i> is a random uniform(0,1) variate.\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p><p>\n<b>rlogistic(</b><i>s</i><b>)</b>\n       Description:  logistic variates with mean 0, scale <i>s</i>, and standard\n                     deviation <i>s</i>*pi/sqrt(3)\n</p><p>\n                     The variates <i>x</i> are generated by <i>x</i> = <b>invlogistic(0,</b><i>s</i><b>,</b><i>u</i><b>)</b>,\n                     where <i>u</i> is a random uniform(0,1) variate.\n       Domain <i>s</i>:     0 to <b>c(maxdouble)</b>\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p><p>\n<b>rlogistic(</b><i>m</i><b>,</b><i>s</i><b>)</b>\n       Description:  logistic variates with mean <i>m</i>, scale <i>s</i>, and standard\n                     deviation <i>s</i>*pi/sqrt(3)\n</p><p>\n                     The variates <i>x</i> are generated by <i>x</i> = <b>invlogistic(</b><i>m</i><b>,</b><i>s</i><b>,</b><i>u</i><b>)</b>,\n                     where <i>u</i> is a random uniform(0,1) variate.\n       Domain <i>m</i>:     <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n       Domain <i>s</i>:     0 to <b>c(maxdouble)</b>\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p>"
    },
    {
        "rnbinomial": "<p>\n<b>rnbinomial(</b><i>n</i><b>,</b><i> p</i><b>)</b>\n       Description:  negative binomial random variates\n</p><p>\n                     If <i>n</i> is integer valued, <b>rnbinomial()</b> returns the number\n                     of failures before the <i>n</i>th success, where the\n                     probability of success on a single trial is <i>p</i>.  <i>n</i> can\n                     also be nonintegral.\n       Domain <i>n</i>:     1e-4 to 1e+5\n       Domain <i>p</i>:     1e-4 to 1-1e-4\n       Range:        0 to 2^53-1\n</p>"
    },
    {
        "rnormal": "<p>\n<b>rnormal()</b>\n       Description:  standard normal (Gaussian) random variates, that is,\n                     variates from a normal distribution with a mean of 0 and\n                     a standard deviation of 1\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p><p>\n<b>rnormal(</b><i>m</i><b>)</b>\n       Description:  normal(<i>m</i>,1) (Gaussian) random variates, where <i>m</i> is the\n                     mean and the standard deviation is 1\n       Domain <i>m</i>:     <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p><p>\n<b>rnormal(</b><i>m</i><b>,</b><i> s</i><b>)</b>\n       Description:  normal(<i>m</i>,<i>s</i>) (Gaussian) random variates, where <i>m</i> is the\n                     mean and <i>s</i> is the standard deviation\n</p><p>\n                     The methods for generating normal (Gaussian) random\n                     variates are taken from <a href=\"/help.cgi?rnormal()#K1998\">Knuth (1998, 122-128)</a>;\n                     <a href=\"/help.cgi?rnormal()#MMB1964\">Marsaglia, MacLaren, and Bray (1964)</a>; and <a href=\"/help.cgi?rnormal()#W1977\">Walker (1977)</a>.\n       Domain <i>m</i>:     <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n       Domain <i>s</i>:     0 to <b>c(maxdouble)</b>\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p><p>\n</p><p>\n<a name=\"references\"></a><b><u>References</u></b>\n</p><p>\n<a name=\"K1998\"></a>    Knuth, D.  1998.  <i>The Art of Computer Programming, Volume 2:</i>\n<i>Seminumerical Algorithms</i>.  3rd ed.  Reading, MA: Addison Wesley.\n</p><p>\n<a name=\"MMB1964\"></a>    Marsaglia, G., M. D. MacLaren, and T. A. Bray.  1964.  A fast procedure\n        for generating normal random variables.  <i>Communications of the ACM</i> 7:\n        4-10.\n</p><p>\n<a name=\"W1977\"></a>    Walker, A. J.  1977.  An efficient method for generating discrete random\n        variables with general distributions.  <i>ACM Transactions on</i>\n<i>Mathematical Software</i> 3: 253-256.\n</p>"
    },
    {
        "round": "<p>\n<b>round(</b><i>x</i><b>,</b><i>y</i><b>)</b> or <b>round(</b><i>x</i><b>)</b>\n       Description:  <i>x</i> rounded in units of <i>y</i> or <i>x</i> rounded to the nearest\n                     integer if the argument <i>y</i> is omitted; <i>x</i> (not \"<b>.</b>\") if <i>x</i>\n                     is missing (meaning that <b>round(.a)</b> = <b>.a</b> and that\n                     <b>round(.a,</b><i>y</i><b>)</b> = <b>.a</b> if <i>y</i> is not missing) and if <i>y</i> is\n                     missing, then \"<b>.</b>\" is returned\n</p><p>\n                     For <i>y</i> = 1, or with <i>y</i> omitted, this amounts to the\n                     closest integer to <i>x</i>; <b>round(5.2,1)</b> is 5, as is\n                     <b>round(4.8,1)</b>; <b>round(-5.2,1)</b> is -5, as is <b>round(-4.8,1)</b>.\n                     The rounding definition is generalized for <i>y</i> != 1.  With\n                     <i>y</i> = 0.01, for instance, <i>x</i> is rounded to two decimal\n                     places; <b>round(sqrt(2),.01)</b> is 1.41. <i>y</i> may also be larger\n                     than 1; <b>round(28,5)</b> is 30, which is 28 rounded to the\n                     closest multiple of 5.  For <i>y</i> = 0, the function is\n                     defined as returning <i>x</i> unmodified.  Also see <a href=\"/help.cgi?int()\"><b>int(</b></a><a href=\"/help.cgi?int()\"><i>x</i></a><a href=\"/help.cgi?int()\"><b>)</b></a>,\n                     <a href=\"/help.cgi?ceil()\"><b>ceil(</b></a><a href=\"/help.cgi?ceil()\"><i>x</i></a><a href=\"/help.cgi?ceil()\"><b>)</b></a>, and <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>x</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a>.\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Domain <i>y</i>:     -8e+307 to 8e+307\n       Range:        -8e+307 to 8e+307\n</p>"
    },
    {
        "roweqnumb": "<p>\n<b>roweqnumb(</b><i>M</i><b>,</b><i>s</i><b>)</b>\n       Description:  the equation number of <i>M</i> associated with row equation <i>s</i>;\n                     <i>missing</i> if the row equation cannot be found\n       Domain <i>M</i>:     matrices\n       Domain <i>s</i>:     strings\n       Range:        integer scalars 1 to <b>matsize</b> or <i>missing</i>\n</p>"
    },
    {
        "rownfreeparms": "<p>\n<b>rownfreeparms(</b><i>M</i><b>)</b>\n       Description:  the number of free parameters in rows of <i>M</i>\n       Domain <i>M</i>:     matrices\n       Range:        integer scalars 0 to <b>matsize</b>\n</p>"
    },
    {
        "rownumb": "<p>\n<b>rownumb(</b><i>M</i><b>,</b><i>s</i><b>)</b>\n       Description:  the row number of <i>M</i> associated with row name <i>s</i>; <i>missing</i>\n                     if the row cannot be found\n       Domain <i>M</i>:     matrices\n       Domain <i>s</i>:     strings\n       Range:        integer scalars 1 to <b>matsize</b> or <i>missing</i>\n</p>"
    },
    {
        "rowsof": "<p>\n<b>rowsof(</b><i>M</i><b>)</b>\n       Description:  the number of rows of <i>M</i>\n       Domain:       matrices\n       Range:        integer scalars 1 to <b>matsize</b>\n</p>"
    },
    {
        "rpoisson": "<p>\n<b>rpoisson(</b><i>m</i><b>)</b>\n       Description:  Poisson(<i>m</i>) random variates, where <i>m</i> is the distribution\n                     mean\n</p><p>\n                     Poisson variates are generated using the probability\n                     integral transform methods of Kemp and Kemp (<a href=\"/help.cgi?rpoisson()#KK1990\">1990</a>, <a href=\"/help.cgi?rpoisson()#KK1991\">1991</a>)\n                     and the method of <a href=\"/help.cgi?rpoisson()#K1982\">Kachitvichyanukul (1982)</a>.\n       Domain <i>m</i>:     1e-6 to 1e+11\n       Range:        0 to 2^53-1\n</p><p>\n</p><p>\n<a name=\"references\"></a><b><u>References</u></b>\n</p><p>\n<a name=\"K1982\"></a>    Kachitvichyanukul, V.  1982.  Computer Generation of Poisson, Binomial,\n        and Hypergeometric Random Variables.  PhD thesis, Purdue University.\n</p><p>\n<a name=\"KK1990\"></a>    Kemp, A. W., and C. D. Kemp.  1990.  A composition-search algorithm for\n        low-parameter Poisson generation.  <i>Journal of Statistical Computation</i>\n<i>and Simulation</i> 35: 239-244.\n</p><p>\n<a name=\"KK1991\"></a>    Kemp, C. D., and A. W. Kemp.  1991.  Poisson random variate generation.\n        <i>Applied Statistics</i> 40: 143-158.\n</p>"
    },
    {
        "rt": "<p>\n<b>rt(</b><i>df</i><b>)</b>\n       Description:  Student's t random variates, where <i>df</i> is the degrees of\n                     freedom\n</p><p>\n                     Student's t variates are generated using the method of\n                     Kinderman and Monahan (<a href=\"/help.cgi?rt()#KM1977\">1977</a>, <a href=\"/help.cgi?rt()#KM1980\">1980</a>).\n       Domain <i>df</i>:    1 to 2^53-1\n       Range:        <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n</p><p>\n</p><p>\n<a name=\"references\"></a><b><u>References</u></b>\n</p><p>\n<a name=\"KM1977\"></a>    Kinderman, A. J., and J. F. Monahan.  1977.  Computer generation of\n        random variables using the ratio of uniform deviates.  <i>Association</i>\n<i>for Computing Machinery Transactions on Mathematical Software</i> 3:\n        257-260.\n</p><p>\n<a name=\"KM1980\"></a>    ------.  1980.  New methods for generating Student's t and gamma\n        variables.  <i>Computing</i> 25: 369-377.\n</p>"
    },
    {
        "runiform": "<p>\n<b>runiform()</b>\n       Description:  uniformly distributed random variates over the interval\n                     (0,1)\n</p><p>\n<b>runiform()</b> can be seeded with the <b>set seed</b> command; see\n                     <a href=\"/help.cgi?set_seed\"><b>[R] set seed</b></a>.\n       Range:        <b>c(epsdouble)</b> to 1-<b>c(epsdouble)</b>\n</p><p>\n<b>runiform(</b><i>a</i><b>,</b><i>b</i><b>)</b>\n       Description:  uniformly distributed random variates over the interval\n                     (<i>a</i>,<i>b</i>)\n       Domain <i>a</i>:     <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n       Domain <i>b</i>:     <b>c(mindouble)</b> to <b>c(maxdouble)</b>\n       Range:        <i>a</i>+<b>c(epsdouble)</b> to <i>b</i>-<b>c(epsdouble)</b>\n</p>"
    },
    {
        "runiformint": "<p>\n<b>runiformint(</b><i>a</i><b>,</b><i>b</i><b>)</b>\n       Description:  uniformly distributed random integer variates on the\n                     interval [<i>a</i>,<i>b</i>]\n</p><p>\n                     If <i>a</i> or <i>b</i> is nonintegral, <b>runiformint(</b><i>a</i><b>,</b><i>b</i><b>)</b> returns\n                     <b>runiformint(floor(</b><i>a</i><b>), floor(</b><i>b</i><b>))</b>.\n       Domain <i>a</i>:     -2^53 to 2^53 (may be nonintegral)\n       Domain <i>b</i>:     -2^53 to 2^53 (may be nonintegral)\n       Range:        -2^53 to 2^53\n</p>"
    },
    {
        "rweibull": "<p>\n<b>rweibull(</b><i>a</i><b>,</b><i>b</i><b>)</b>\n       Description:  Weibull variates with shape <i>a</i> and scale <i>b</i>\n</p><p>\n                     The variates <i>x</i> are generated by <i>x</i> =\n                     <b>invweibulltail(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>u</i><b>)</b>, where <i>u</i> is a random\n                     uniform(0,1) variate.\n       Domain <i>a</i>:     0.01 to 1e+6\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Range:        1e-323 to 8e+307\n</p><p>\n<b>rweibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>)</b>\n       Description:  Weibull variates with shape <i>a</i>, scale <i>b</i>, and location <i>g</i>\n</p><p>\n                     The variates <i>x</i> are generated by <i>x</i> =\n                     <b>invweibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>u</i><b>)</b>, where <i>u</i> is a random\n                     uniform(0,1) variate.\n       Domain <i>a</i>:     0.01 to 1e+6\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e-307 to 8e+307\n       Range:        <i>g</i>+<b>c(epsdouble)</b> to 8e+307\n</p><p>\n</p>"
    },
    {
        "rweibullph": "<p>\n<b>rweibullph(</b><i>a</i><b>,</b><i>b</i><b>)</b>\n       Description:  Weibull (proportional hazards) variates with shape <i>a</i> and\n                     scale <i>b</i>\n</p><p>\n                     The variates <i>x</i> are generated by <i>x</i> =\n                     <b>invweibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>u</i><b>)</b>, where <i>u</i> is a random\n                     uniform(0,1) variate.\n       Domain <i>a</i>:     0.01 to 1e+6\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Range:        1e-323 to 8e+307\n</p><p>\n<b>rweibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>)</b>\n       Description:  Weibull (proportional hazards) variates with shape <i>a</i>,\n                     scale <i>b</i>, and location <i>g</i>\n</p><p>\n                     The variates <i>x</i> are generated by <i>x</i> =\n                     <b>invweibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>u</i><b>)</b>, where <i>u</i> is a random\n                     uniform(0,1) variate.\n       Domain <i>a</i>:     0.01 to 1e+6\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e-307 to 8e+307\n       Range:        <i>g</i>+<b>c(epsdouble)</b> to 8e+307\n</p><p>\n</p>"
    },
    {
        "s": "<p>\n<b>s(</b><i>name</i><b>)</b>\n       Description:  the value of stored result <b>s(</b><i>name</i><b>)</b>; see <b>[U] 18.8</b>\n<b>Accessing results calculated by other programs</b>\n</p><p>\n<b>s(</b><i>name</i><b>)</b> = <b>.</b> if the stored result does not exist\n       Domain:       names\n       Range:        strings or <i>missing</i>\n</p>"
    },
    {
        "scalar": "<p>\n<b>scalar(</b><i>exp</i><b>)</b>\n       Description:  restricts name interpretation to scalars and matrices\n</p><p>\n                     Names in expressions can refer to names of variables in\n                     the dataset, names of matrices, or names of scalars.\n                     Matrices and scalars can have the same names as\n                     variables in the dataset.  If names conflict, Stata\n                     assumes that you are referring to the name of the\n                     variable in the dataset.\n</p><p>\n<a href=\"/help.cgi?matrix()\"><b>matrix()</b></a> and <b>scalar()</b> explicitly state that you are\n                     referring to matrices and scalars.  <b>matrix()</b> and\n                     <b>scalar()</b> are the same function; scalars and matrices may\n                     not have the same names and so cannot be confused.\n                     Typing <b>scalar(x)</b> makes it clear that you are referring\n                     to the scalar or matrix named <b>x</b> and not the variable\n                     named <b>x</b>, should there happen to be a variable of that\n                     name.\n       Domain:       any valid expression\n       Range:        evaluation of <i>exp</i>\n</p>"
    },
    {
        "seconds": "<p>\n<b>seconds(</b><i>ms</i><b>)</b>\n       Description:  <i>ms</i>/1,000\n       Domain <i>ms</i>:    real; milliseconds\n       Range:        real or <i>missing</i>\n</p>"
    },
    {
        "sign": "<p>\n<b>sign(</b><i>x</i><b>)</b>\n       Description:  the sign of <i>x</i>: -1 if <i>x</i> &lt; 0, 0 if <i>x</i> = 0, 1 if <i>x</i> &gt; 0, or\n                     <i>missing</i> if <i>x</i> is missing\n       Domain:       -8e+307 to 8e+307 or <i>missing</i>\n       Range:        -1, 0, 1 or <i>missing</i>\n</p>"
    },
    {
        "sin": "<p>\n<b>sin(</b><i>x</i><b>)</b>\n       Description:  the sine of <i>x</i>, where <i>x</i> is in radians\n       Domain:       -1e+18 to 1e+18\n       Range:        -1 to 1\n</p>"
    },
    {
        "sinh": "<p>\n<b>sinh(</b><i>x</i><b>)</b>\n       Description:  the hyperbolic sine of <i>x</i>,\n                     <b>sinh(</b><i>x</i><b>)</b> = {exp(<i>x</i>) - exp(-<i>x</i>)}/2\n       Domain:       -709 to 709\n       Range:        -4.11e+307 to 4.11e+307\n</p>"
    },
    {
        "smallestdouble": "<p>\n<b>smallestdouble()</b>\n       Description:  the smallest double-precision number greater than zero\n        \n                     If 0 &lt; <i>d</i> &lt; <b>smallestdouble()</b>, then <i>d</i> does not have full\n                     double precision; these are called the denormalized\n                     numbers.  This function takes no arguments, but the\n                     parentheses must be included.\n       Range:        a double-precision number close to 0\n</p>"
    },
    {
        "soundex": "<p>\n<b>soundex(</b><i>s</i><b>)</b>\n       Description:  the soundex code for a string, <i>s</i>\n</p><p>\n                     The soundex code consists of a letter followed by three\n                     numbers:  the letter is the first ASCII letter of the\n                     name and the numbers encode the remaining consonants.\n                     Similar sounding consonants are encoded by the same\n                     number.  Unicode characters beyond the plain ASCII range\n                     are ignored.\n</p><p>\n<b>soundex(\"Ashcraft\")</b> = <b>\"A226\"</b>\n<b>soundex(\"Robert\")</b> = <b>\"R163\"</b>\n<b>soundex(\"Rupert\")</b> = <b>\"R163\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings\n</p><p>\n<b>soundex_nara(</b><i>s</i><b>)</b>\n       Description:  the U.S. Census soundex code for a string, <i>s</i>\n</p><p>\n                     The soundex code consists of a letter followed by three\n                     numbers:  the letter is the first ASCII letter of the\n                     name and the numbers encode the remaining consonants.\n                     Similar sounding consonants are encoded by the same\n                     number.  Unicode characters beyond the plain ASCII range\n                     are ignored.\n</p><p>\n<b>soundex_nara(\"Ashcraft\")</b> = <b>\"A261\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings\n</p>"
    },
    {
        "soundex": "<p>\n<b>soundex(</b><i>s</i><b>)</b>\n       Description:  the soundex code for a string, <i>s</i>\n</p><p>\n                     The soundex code consists of a letter followed by three\n                     numbers:  the letter is the first ASCII letter of the\n                     name and the numbers encode the remaining consonants.\n                     Similar sounding consonants are encoded by the same\n                     number.  Unicode characters beyond the plain ASCII range\n                     are ignored.\n</p><p>\n<b>soundex(\"Ashcraft\")</b> = <b>\"A226\"</b>\n<b>soundex(\"Robert\")</b> = <b>\"R163\"</b>\n<b>soundex(\"Rupert\")</b> = <b>\"R163\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings\n</p><p>\n<b>soundex_nara(</b><i>s</i><b>)</b>\n       Description:  the U.S. Census soundex code for a string, <i>s</i>\n</p><p>\n                     The soundex code consists of a letter followed by three\n                     numbers:  the letter is the first ASCII letter of the\n                     name and the numbers encode the remaining consonants.\n                     Similar sounding consonants are encoded by the same\n                     number.  Unicode characters beyond the plain ASCII range\n                     are ignored.\n</p><p>\n<b>soundex_nara(\"Ashcraft\")</b> = <b>\"A261\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings\n</p>"
    },
    {
        "sqrt": "<p>\n<b>sqrt(</b><i>x</i><b>)</b>\n       Description:  the square root of <i>x</i>\n       Domain:       0 to 8e+307\n       Range:        0 to 1e+154\n</p>"
    },
    {
        "ss": "<p>\n<b>ss(</b><i>e_tc</i><b>)</b>\n       Description:  the second corresponding to datetime <i>e_tc</i> (ms. since\n                     01jan1960 00:00:00.000)\n       Domain <i>e_tc</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999)\n       Range:        real 0.000 through 59.999, <i>missing</i>\n</p>"
    },
    {
        "ssC": "<p>\n<b>ssC(</b><i>e_tC</i><b>)</b>\n       Description:  the second corresponding to datetime <i>e_tC</i> (ms. with leap\n                     seconds since 01jan1960 00:00:00.000)\n       Domain <i>e_tC</i>:  datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999)\n       Range:        real 0.000 through 60.999, <i>missing</i>\n</p>"
    },
    {
        "strcat": "<p>\n<b>strcat(</b><i>s1</i><b>,</b><i>s2</i><b>)</b>\n       Description:  there is no <b>strcat()</b> function; instead the addition\n                     operator is used to concatenate strings\n</p><p>\n<b>\"hello \" + \"world\"</b> = <b>\"hello world\"</b>\n<b>\"a\" + \"b\"</b> = <b>\"ab\"</b>\n<b>\"Caf\u00e9 \" + \"de Flore\"</b> = <b>\"Caf\u00e9 de Flore\"</b>\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings\n       Range:        strings\n</p>"
    },
    {
        "strdup": "<p>\n<b>strdup(</b><i>s1</i><b>,</b><i>n</i><b>)</b>\n       Description:  there is no <b>strdup()</b> function; instead the\n                     multiplication operator is used to create multiple\n                     copies of strings\n</p><p>\n<b>\"hello\" * 3</b> = <b>\"hellohellohello\"</b>\n<b>3 * \"hello\"</b> = <b>\"hellohellohello\"</b>\n<b>0 * \"hello\"</b> = <b>\"\"</b>\n<b>\"hello\" * 1</b> = <b>\"hello\"</b>\n<b>\"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \" * 2</b> = <b>\"\u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \u0417\u0434\u0440\u0430\u0432\u0441\u0442\u0432\u0443\u0439\u0442\u0435 \"</b>\n       Domain <i>s1</i>:    strings\n       Domain <i>n</i>:     nonnegative integers 0, 1, 2, ...\n       Range:        strings\n</p>"
    },
    {
        "strofreal": "<p>\n<b>strofreal(</b><i>n</i><b>)</b>\n       Description:  <i>n</i> converted to a string\n</p><p>\n                     Also see <a href=\"/help.cgi?real()\"><b>real()</b></a>.\n</p><p>\n<b>strofreal(4)+\"F\"</b> = <b>\"4F\"</b>\n<b>strofreal(1234567)</b> = <b>\"1234567\"</b>\n<b>strofreal(12345678)</b> = <b>\"1.23e+07\"</b>\n<b>strofreal(.)</b> = <b>\".\"</b>\n       Domain <i>n</i>:     -8e+307 to 8e+307 or <i>missing</i>\n       Range:        strings\n</p><p>\n</p>"
    },
    {
        "strofreal": "<p>\n<b>strofreal(</b><i>n</i><b>,</b><i>s</i><b>)</b>\n       Description:  <i>n</i> converted to a string using the specified display\n                     format\n</p><p>\n                     Also see <a href=\"/help.cgi?real()\"><b>real()</b></a>.\n</p><p>\n<b>strofreal(4,\"%9.2f\")</b> = <b>\"4.00\"</b>\n<b>strofreal(123456789,\"%11.0g\")</b> = <b>\"123456789\"</b>\n<b>strofreal(123456789,\"%13.0gc\")</b> = <b>\"123,456,789\"</b>\n<b>strofreal(0,\"%td\")</b> = <b>\"01jan1960\"</b>\n<b>strofreal(225,\"%tq\")</b> = <b>\"2016q2\"</b>\n<b>strofreal(225,\"not a format\")</b> = <b>\"\"</b>\n       Domain <i>n</i>:     -8e+307 to 8e+307 or <i>missing</i>\n       Domain <i>s</i>:     strings containing <b>%</b><i>fmt</i> numeric display format\n       Range:        strings\n</p>"
    },
    {
        "string": "<p>\n<b>string(</b><i>n</i><b>)</b>\n       Description:  a synonym for <b>strofreal(</b><i>n</i><b>)</b>\n</p>"
    },
    {
        "string": "<p>\n<b>string(</b><i>n</i><b>,</b><i>s</i><b>)</b>\n       Description:  a synonym for <b>strofreal(</b><i>n</i><b>,</b><i>s</i><b>)</b>\n</p>"
    },
    {
        "strtrim": "<p>\n<b>strtrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without leading and trailing blanks (ASCII space\n                     character <b>char(32)</b>); equivalent to <b>strltrim(strrtrim(</b><i>s</i><b>))</b>\n</p><p>\n<b>strtrim(\" this \")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without leading or trailing blanks\n</p>"
    },
    {
        "stritrim": "<p>\n<b>stritrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> with multiple, consecutive internal blanks (ASCII\n                     space character <b>char(32)</b>) collapsed to one blank\n</p><p>\n<b>stritrim(\"hello</b> <b>there\")</b> = <b>\"hello there\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with no multiple, consecutive internal blanks\n</p>"
    },
    {
        "strltrim": "<p>\n<b>strltrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without leading blanks (ASCII space character\n                     <b>char(32)</b>)\n</p><p>\n<b>strltrim(\" this\")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without leading blanks\n</p>"
    },
    {
        "strrtrim": "<p>\n<b>strrtrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without trailing blanks (ASCII space character\n                     <b>char(32)</b>)\n</p><p>\n<b>strrtrim(\"this \")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without trailing blanks\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrtrim()\"><b>ustrtrim()</b></a>, <a href=\"/help.cgi?ustrltrim()\"><b>ustrltrim()</b></a>, and <a href=\"/help.cgi?ustrrtrim()\"><b>ustrrtrim()</b></a> to remove Unicode\n    whitespace and blank characters.\n</p>"
    },
    {
        "strlen": "<p>\n<b>strlen(</b><i>s</i><b>)</b>\n       Description:  the number of characters in ASCII <i>s</i> or length in bytes\n</p><p>\n<b>strlen()</b> is intended for use with only plain ASCII\n                     characters and for use by programmers who want to obtain\n                     the byte-length of a string.  Note that any Unicode\n                     character beyond ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00e9</b> takes 2 bytes.\n</p><p>\n                     For the number of characters in a Unicode string, see\n                     <a href=\"/help.cgi?f_ustrlen\"><b>ustrlen()</b></a>.\n</p><p>\n<b>strlen(\"ab\")</b> = <b>2</b>\n<b>strlen(\"\u00e9\")</b> = <b>2</b>\n       Domain <i>s</i>:     strings\n       Range:        integers <u>&gt;</u> 0\n</p>"
    },
    {
        "strupper": "<p>\n<b>strupper(</b><i>s</i><b>)</b>\n       Description:  uppercase ASCII characters in string <i>s</i>\n</p><p>\n                     Unicode characters beyond the plain ASCII range are\n                     ignored.\n</p><p>\n<b>strupper(\"this\")</b> = <b>\"THIS\"</b>\n<b>strupper(\"caf\u00e9\")</b> = <b>\"CAF\u00e9\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with uppercased characters\n</p>"
    },
    {
        "strlower": "<p>\n<b>strlower(</b><i>s</i><b>)</b>\n       Description:  lowercase ASCII characters in string <i>s</i>\n</p><p>\n                     Unicode characters beyond the plain ASCII range are\n                     ignored.\n</p><p>\n<b>strlower(\"THIS\")</b> = <b>\"this\"</b>\n<b>strlower(\"CAF\u00c9\")</b> = <b>\"caf\u00c9\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with lowercased characters\n</p>"
    },
    {
        "strproper": "<p>\n<b>strproper(</b><i>s</i><b>)</b>\n       Description:  a string with the first ASCII letter and any other\n                     letters immediately following characters that are not\n                     letters capitalized; all other ASCII letters converted\n                     to lowercase\n</p><p>\n<b>strproper()</b> implements a form of titlecasing and is\n                     intended for use with only plain ASCII strings.  Unicode\n                     characters beyond ASCII are treated as characters that\n                     are not letters.  To titlecase strings with Unicode\n                     characters beyond the plain ASCII range or to implement\n                     language-sensitive rules for titlecasing, see\n                     <a href=\"/help.cgi?f_ustrtitle\"><b>ustrtitle()</b></a>.\n</p><p>\n<b>strproper(\"mR. joHn a. sMitH\")</b> = <b>\"Mr. John A. Smith\"</b>\n<b>strproper(\"jack o'reilly\")</b> = <b>\"Jack O'Reilly\"</b>\n<b>strproper(\"2-cent's worth\")</b> = <b>\"2-Cent'S Worth\"</b>\n<b>strproper(\"vous \u00eates\")</b> = <b>\"Vous \u00eaTes\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrupper()\"><b>ustrupper()</b></a> and <a href=\"/help.cgi?ustrlower()\"><b>ustrlower()</b></a> to convert Unicode characters\n    in a string to uppercase and lowercase.\n</p>"
    },
    {
        "strtrim": "<p>\n<b>strtrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without leading and trailing blanks (ASCII space\n                     character <b>char(32)</b>); equivalent to <b>strltrim(strrtrim(</b><i>s</i><b>))</b>\n</p><p>\n<b>strtrim(\" this \")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without leading or trailing blanks\n</p>"
    },
    {
        "stritrim": "<p>\n<b>stritrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> with multiple, consecutive internal blanks (ASCII\n                     space character <b>char(32)</b>) collapsed to one blank\n</p><p>\n<b>stritrim(\"hello</b> <b>there\")</b> = <b>\"hello there\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with no multiple, consecutive internal blanks\n</p>"
    },
    {
        "strltrim": "<p>\n<b>strltrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without leading blanks (ASCII space character\n                     <b>char(32)</b>)\n</p><p>\n<b>strltrim(\" this\")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without leading blanks\n</p>"
    },
    {
        "strrtrim": "<p>\n<b>strrtrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without trailing blanks (ASCII space character\n                     <b>char(32)</b>)\n</p><p>\n<b>strrtrim(\"this \")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without trailing blanks\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrtrim()\"><b>ustrtrim()</b></a>, <a href=\"/help.cgi?ustrltrim()\"><b>ustrltrim()</b></a>, and <a href=\"/help.cgi?ustrrtrim()\"><b>ustrrtrim()</b></a> to remove Unicode\n    whitespace and blank characters.\n</p>"
    },
    {
        "strmatch": "<p>\n<b>strmatch(</b><i>s1</i><b>,</b><i>s2</i><b>)</b>\n       Description:  <b>1</b> if <i>s1</i> matches the pattern <i>s2</i>; otherwise, <b>0</b>\n</p><p>\n<b>strmatch(\"17.4\",\"1??4\")</b> returns <b>1</b>.  In <i>s2</i>, <b>\"?\"</b> means\n                     that one character goes here, and <b>\"*\"</b> means that zero or\n                     more bytes go here.  Note that a Unicode character may\n                     contain multiple bytes; thus, using <b>\"*\"</b> with Unicode\n                     characters can infrequently result in matches that do\n                     not occur at a character boundary.\n</p><p>\n                     Also see <a href=\"/help.cgi?regexm()\"><b>regexm()</b></a>, <b>regexr()</b>, and <b>regexs()</b>.\n</p><p>\n<b>strmatch(\"caf\u00c3\u00a9\", \"caf?\")</b> = <b>1</b>\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings\n       Range:        integers 0 or 1\n</p>"
    },
    {
        "strofreal": "<p>\n<b>strofreal(</b><i>n</i><b>)</b>\n       Description:  <i>n</i> converted to a string\n</p><p>\n                     Also see <a href=\"/help.cgi?real()\"><b>real()</b></a>.\n</p><p>\n<b>strofreal(4)+\"F\"</b> = <b>\"4F\"</b>\n<b>strofreal(1234567)</b> = <b>\"1234567\"</b>\n<b>strofreal(12345678)</b> = <b>\"1.23e+07\"</b>\n<b>strofreal(.)</b> = <b>\".\"</b>\n       Domain <i>n</i>:     -8e+307 to 8e+307 or <i>missing</i>\n       Range:        strings\n</p><p>\n</p>"
    },
    {
        "strofreal": "<p>\n<b>strofreal(</b><i>n</i><b>,</b><i>s</i><b>)</b>\n       Description:  <i>n</i> converted to a string using the specified display\n                     format\n</p><p>\n                     Also see <a href=\"/help.cgi?real()\"><b>real()</b></a>.\n</p><p>\n<b>strofreal(4,\"%9.2f\")</b> = <b>\"4.00\"</b>\n<b>strofreal(123456789,\"%11.0g\")</b> = <b>\"123456789\"</b>\n<b>strofreal(123456789,\"%13.0gc\")</b> = <b>\"123,456,789\"</b>\n<b>strofreal(0,\"%td\")</b> = <b>\"01jan1960\"</b>\n<b>strofreal(225,\"%tq\")</b> = <b>\"2016q2\"</b>\n<b>strofreal(225,\"not a format\")</b> = <b>\"\"</b>\n       Domain <i>n</i>:     -8e+307 to 8e+307 or <i>missing</i>\n       Domain <i>s</i>:     strings containing <b>%</b><i>fmt</i> numeric display format\n       Range:        strings\n</p>"
    },
    {
        "string": "<p>\n<b>string(</b><i>n</i><b>)</b>\n       Description:  a synonym for <b>strofreal(</b><i>n</i><b>)</b>\n</p>"
    },
    {
        "string": "<p>\n<b>string(</b><i>n</i><b>,</b><i>s</i><b>)</b>\n       Description:  a synonym for <b>strofreal(</b><i>n</i><b>,</b><i>s</i><b>)</b>\n</p>"
    },
    {
        "strpos": "<p>\n<b>strpos(</b><i>s1</i><b>,</b><i>s2</i><b>)</b>\n       Description:  the position in <i>s1</i> at which <i>s2</i> is first found;\n                     otherwise, <b>0</b>\n<b>strpos()</b> is intended for use with only plain ASCII\n                     characters and for use by programmers who want to obtain\n                     the byte-position of <i>s2</i>.  Note that any Unicode\n                     character beyond ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00e9</b> takes 2 bytes.\n</p><p>\n                     To find the character position of <i>s2</i> in a Unicode\n                     string, see <a href=\"/help.cgi?f_ustrpos\"><b>ustrpos()</b></a>.\n</p><p>\n</p><p>\n<b>strpos(\"this\",\"is\")</b> = <b>3</b>\n<b>strpos(\"this\",\"it\")</b> = <b>0</b>\n       Domain <i>s1</i>:    strings (to be searched)\n       Domain <i>s2</i>:    strings (to search for)\n       Range:        integers <u>&gt;</u> 0\n</p>"
    },
    {
        "strrpos": "<p>\n<b>strrpos(</b><i>s1</i><b>,</b><i>s2</i><b>)</b>\n       Description:  the position in <i>s1</i> at which <i>s2</i> is last found; otherwise,\n                     <b>0</b>\n<b>strrpos()</b> is intended for use with only plain ASCII\n                     characters and for use by programmers who want to obtain\n                     the last byte-position of <i>s2</i>.  Note that any Unicode\n                     character beyond ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00e9</b> takes 2 bytes.\n</p><p>\n                     To find the last character position of <i>s2</i> in a Unicode\n                     string, see <a href=\"/help.cgi?f_ustrrpos\"><b>ustrrpos()</b></a>.\n</p><p>\n<b>strrpos(\"this\",\"is\")</b> = <b>3</b>\n<b>strrpos(\"this is\",\"is\")</b> = <b>6</b>\n<b>strrpos(\"this is\",\"it\")</b> = <b>0</b>\n       Domain <i>s1</i>:    strings (to be searched)\n       Domain <i>s2</i>:    strings (to search for)\n       Range:        integers <u>&gt;</u> 0\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrpos()\"><b>ustrpos()</b></a> and <a href=\"/help.cgi?ustrrpos()\"><b>ustrrpos()</b></a> to search based on characters\n    rather than on bytes.\n</p>"
    },
    {
        "strupper": "<p>\n<b>strupper(</b><i>s</i><b>)</b>\n       Description:  uppercase ASCII characters in string <i>s</i>\n</p><p>\n                     Unicode characters beyond the plain ASCII range are\n                     ignored.\n</p><p>\n<b>strupper(\"this\")</b> = <b>\"THIS\"</b>\n<b>strupper(\"caf\u00e9\")</b> = <b>\"CAF\u00e9\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with uppercased characters\n</p>"
    },
    {
        "strlower": "<p>\n<b>strlower(</b><i>s</i><b>)</b>\n       Description:  lowercase ASCII characters in string <i>s</i>\n</p><p>\n                     Unicode characters beyond the plain ASCII range are\n                     ignored.\n</p><p>\n<b>strlower(\"THIS\")</b> = <b>\"this\"</b>\n<b>strlower(\"CAF\u00c9\")</b> = <b>\"caf\u00c9\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with lowercased characters\n</p>"
    },
    {
        "strproper": "<p>\n<b>strproper(</b><i>s</i><b>)</b>\n       Description:  a string with the first ASCII letter and any other\n                     letters immediately following characters that are not\n                     letters capitalized; all other ASCII letters converted\n                     to lowercase\n</p><p>\n<b>strproper()</b> implements a form of titlecasing and is\n                     intended for use with only plain ASCII strings.  Unicode\n                     characters beyond ASCII are treated as characters that\n                     are not letters.  To titlecase strings with Unicode\n                     characters beyond the plain ASCII range or to implement\n                     language-sensitive rules for titlecasing, see\n                     <a href=\"/help.cgi?f_ustrtitle\"><b>ustrtitle()</b></a>.\n</p><p>\n<b>strproper(\"mR. joHn a. sMitH\")</b> = <b>\"Mr. John A. Smith\"</b>\n<b>strproper(\"jack o'reilly\")</b> = <b>\"Jack O'Reilly\"</b>\n<b>strproper(\"2-cent's worth\")</b> = <b>\"2-Cent'S Worth\"</b>\n<b>strproper(\"vous \u00eates\")</b> = <b>\"Vous \u00eaTes\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrupper()\"><b>ustrupper()</b></a> and <a href=\"/help.cgi?ustrlower()\"><b>ustrlower()</b></a> to convert Unicode characters\n    in a string to uppercase and lowercase.\n</p>"
    },
    {
        "strreverse": "<p>\n<b>strreverse(</b><i>s</i><b>)</b>\n       Description:  reverses the ASCII string <i>s</i>\n</p><p>\n<b>strreverse()</b> is intended for use with only plain ASCII\n                     characters.  For Unicode characters beyond ASCII range\n                     (code point greater than 127), the encoded bytes are\n                     reversed.\n</p><p>\n                     To reverse the characters of Unicode string, see\n                     <a href=\"/help.cgi?f_ustrreverse\"><b>ustrreverse()</b></a>.\n</p><p>\n<b>strreverse(\"hello\")</b> = <b>\"olleh\"</b>\n       Domain <i>s</i>:     ASCII strings\n       Range:        ASCII reversed strings\n</p>"
    },
    {
        "strpos": "<p>\n<b>strpos(</b><i>s1</i><b>,</b><i>s2</i><b>)</b>\n       Description:  the position in <i>s1</i> at which <i>s2</i> is first found;\n                     otherwise, <b>0</b>\n<b>strpos()</b> is intended for use with only plain ASCII\n                     characters and for use by programmers who want to obtain\n                     the byte-position of <i>s2</i>.  Note that any Unicode\n                     character beyond ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00e9</b> takes 2 bytes.\n</p><p>\n                     To find the character position of <i>s2</i> in a Unicode\n                     string, see <a href=\"/help.cgi?f_ustrpos\"><b>ustrpos()</b></a>.\n</p><p>\n</p><p>\n<b>strpos(\"this\",\"is\")</b> = <b>3</b>\n<b>strpos(\"this\",\"it\")</b> = <b>0</b>\n       Domain <i>s1</i>:    strings (to be searched)\n       Domain <i>s2</i>:    strings (to search for)\n       Range:        integers <u>&gt;</u> 0\n</p>"
    },
    {
        "strrpos": "<p>\n<b>strrpos(</b><i>s1</i><b>,</b><i>s2</i><b>)</b>\n       Description:  the position in <i>s1</i> at which <i>s2</i> is last found; otherwise,\n                     <b>0</b>\n<b>strrpos()</b> is intended for use with only plain ASCII\n                     characters and for use by programmers who want to obtain\n                     the last byte-position of <i>s2</i>.  Note that any Unicode\n                     character beyond ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00e9</b> takes 2 bytes.\n</p><p>\n                     To find the last character position of <i>s2</i> in a Unicode\n                     string, see <a href=\"/help.cgi?f_ustrrpos\"><b>ustrrpos()</b></a>.\n</p><p>\n<b>strrpos(\"this\",\"is\")</b> = <b>3</b>\n<b>strrpos(\"this is\",\"is\")</b> = <b>6</b>\n<b>strrpos(\"this is\",\"it\")</b> = <b>0</b>\n       Domain <i>s1</i>:    strings (to be searched)\n       Domain <i>s2</i>:    strings (to search for)\n       Range:        integers <u>&gt;</u> 0\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrpos()\"><b>ustrpos()</b></a> and <a href=\"/help.cgi?ustrrpos()\"><b>ustrrpos()</b></a> to search based on characters\n    rather than on bytes.\n</p>"
    },
    {
        "strtrim": "<p>\n<b>strtrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without leading and trailing blanks (ASCII space\n                     character <b>char(32)</b>); equivalent to <b>strltrim(strrtrim(</b><i>s</i><b>))</b>\n</p><p>\n<b>strtrim(\" this \")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without leading or trailing blanks\n</p>"
    },
    {
        "stritrim": "<p>\n<b>stritrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> with multiple, consecutive internal blanks (ASCII\n                     space character <b>char(32)</b>) collapsed to one blank\n</p><p>\n<b>stritrim(\"hello</b> <b>there\")</b> = <b>\"hello there\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with no multiple, consecutive internal blanks\n</p>"
    },
    {
        "strltrim": "<p>\n<b>strltrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without leading blanks (ASCII space character\n                     <b>char(32)</b>)\n</p><p>\n<b>strltrim(\" this\")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without leading blanks\n</p>"
    },
    {
        "strrtrim": "<p>\n<b>strrtrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without trailing blanks (ASCII space character\n                     <b>char(32)</b>)\n</p><p>\n<b>strrtrim(\"this \")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without trailing blanks\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrtrim()\"><b>ustrtrim()</b></a>, <a href=\"/help.cgi?ustrltrim()\"><b>ustrltrim()</b></a>, and <a href=\"/help.cgi?ustrrtrim()\"><b>ustrrtrim()</b></a> to remove Unicode\n    whitespace and blank characters.\n</p>"
    },
    {
        "strtoname": "<p>\n<b>strtoname(</b><i>s</i>[<b>,</b><i>p</i>]<b>)</b>\n       Description:  <i>s</i> translated into a Stata 13 compatible name\n</p><p>\n<b>strtoname()</b> results in a name that is truncated to 32\n                     bytes.  Each character in <i>s</i> that is not allowed in a\n                     Stata name is converted to an underscore character, <b>_</b>.\n                     If the first character in <i>s</i> is a numeric character and <i>p</i>\n                     is not 0, then the result is prefixed with an\n                     underscore.  Stata 14 names may be 32 characters; see\n                     <b>[U] 11.3 Naming conventions</b>.\n</p><p>\n<b>strtoname(\"name\")</b> = <b>\"name\"</b>\n<b>strtoname(\"a name\")</b> = <b>\"a_name\"</b>\n<b>strtoname(\"5\",1)</b> = <b>\"_5\"</b>\n<b>strtoname(\"5:30\",1)</b> = <b>\"_5_30\"</b>\n<b>strtoname(\"5\",0)</b> = <b>\"5\"</b>\n<b>strtoname(\"5:30\",0)</b> = <b>\"5_30\"</b>\n       Domain <i>s</i>:     strings\n       Domain <i>p</i>:     integers 0 or 1\n       Range:        strings\n</p>"
    },
    {
        "strtrim": "<p>\n<b>strtrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without leading and trailing blanks (ASCII space\n                     character <b>char(32)</b>); equivalent to <b>strltrim(strrtrim(</b><i>s</i><b>))</b>\n</p><p>\n<b>strtrim(\" this \")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without leading or trailing blanks\n</p>"
    },
    {
        "stritrim": "<p>\n<b>stritrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> with multiple, consecutive internal blanks (ASCII\n                     space character <b>char(32)</b>) collapsed to one blank\n</p><p>\n<b>stritrim(\"hello</b> <b>there\")</b> = <b>\"hello there\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with no multiple, consecutive internal blanks\n</p>"
    },
    {
        "strltrim": "<p>\n<b>strltrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without leading blanks (ASCII space character\n                     <b>char(32)</b>)\n</p><p>\n<b>strltrim(\" this\")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without leading blanks\n</p>"
    },
    {
        "strrtrim": "<p>\n<b>strrtrim(</b><i>s</i><b>)</b>\n       Description:  <i>s</i> without trailing blanks (ASCII space character\n                     <b>char(32)</b>)\n</p><p>\n<b>strrtrim(\"this \")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings without trailing blanks\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrtrim()\"><b>ustrtrim()</b></a>, <a href=\"/help.cgi?ustrltrim()\"><b>ustrltrim()</b></a>, and <a href=\"/help.cgi?ustrrtrim()\"><b>ustrrtrim()</b></a> to remove Unicode\n    whitespace and blank characters.\n</p>"
    },
    {
        "strupper": "<p>\n<b>strupper(</b><i>s</i><b>)</b>\n       Description:  uppercase ASCII characters in string <i>s</i>\n</p><p>\n                     Unicode characters beyond the plain ASCII range are\n                     ignored.\n</p><p>\n<b>strupper(\"this\")</b> = <b>\"THIS\"</b>\n<b>strupper(\"caf\u00e9\")</b> = <b>\"CAF\u00e9\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with uppercased characters\n</p>"
    },
    {
        "strlower": "<p>\n<b>strlower(</b><i>s</i><b>)</b>\n       Description:  lowercase ASCII characters in string <i>s</i>\n</p><p>\n                     Unicode characters beyond the plain ASCII range are\n                     ignored.\n</p><p>\n<b>strlower(\"THIS\")</b> = <b>\"this\"</b>\n<b>strlower(\"CAF\u00c9\")</b> = <b>\"caf\u00c9\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings with lowercased characters\n</p>"
    },
    {
        "strproper": "<p>\n<b>strproper(</b><i>s</i><b>)</b>\n       Description:  a string with the first ASCII letter and any other\n                     letters immediately following characters that are not\n                     letters capitalized; all other ASCII letters converted\n                     to lowercase\n</p><p>\n<b>strproper()</b> implements a form of titlecasing and is\n                     intended for use with only plain ASCII strings.  Unicode\n                     characters beyond ASCII are treated as characters that\n                     are not letters.  To titlecase strings with Unicode\n                     characters beyond the plain ASCII range or to implement\n                     language-sensitive rules for titlecasing, see\n                     <a href=\"/help.cgi?f_ustrtitle\"><b>ustrtitle()</b></a>.\n</p><p>\n<b>strproper(\"mR. joHn a. sMitH\")</b> = <b>\"Mr. John A. Smith\"</b>\n<b>strproper(\"jack o'reilly\")</b> = <b>\"Jack O'Reilly\"</b>\n<b>strproper(\"2-cent's worth\")</b> = <b>\"2-Cent'S Worth\"</b>\n<b>strproper(\"vous \u00eates\")</b> = <b>\"Vous \u00eaTes\"</b>\n       Domain <i>s</i>:     strings\n       Range:        strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?ustrupper()\"><b>ustrupper()</b></a> and <a href=\"/help.cgi?ustrlower()\"><b>ustrlower()</b></a> to convert Unicode characters\n    in a string to uppercase and lowercase.\n</p>"
    },
    {
        "subinstr": "<p>\n<b>subinstr(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>s3</i><b>,</b><i>n</i><b>)</b>\n       Description:  <i>s1</i>, where the first <i>n</i> occurrences in <i>s1</i> of <i>s2</i> have been\n                     replaced with <i>s3</i>\n<b>subinstr()</b> is intended for use with only plain ASCII\n                     characters and for use by programmers who want to\n                     perform byte-based substitution.  Note that any Unicode\n                     character beyond ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00c3\u00a9</b> takes 2 bytes.\n</p><p>\n                     To perform character-based replacement in Unicode\n                     strings, see <a href=\"/help.cgi?f_usubinstr\"><b>usubinstr()</b></a>.\n</p><p>\n                     If <i>n</i> is <i>missing</i>, all occurrences are replaced.\n</p><p>\n                     Also see <a href=\"/help.cgi?regexm()\"><b>regexm()</b></a>, <b>regexr()</b>, and <b>regexs()</b>.\n</p><p>\n<b>subinstr(\"this is the day\",\"is\",\"X\",1)</b> = <b>\"thX is the</b>\n<b>day\"</b>\n<b>subinstr(\"this is the hour\",\"is\",\"X\",2)</b> = <b>\"thX X the</b>\n<b>hour\"</b>\n<b>subinstr(\"this is this\",\"is\",\"X\",.)</b> = <b>\"thX X thX\"</b>\n       Domain <i>s1</i>:    strings (to be substituted into)\n       Domain <i>s2</i>:    strings (to be substituted from)\n       Domain <i>s3</i>:    strings (to be substituted with)\n       Domain <i>n</i>:     integers <u>&gt;</u> 0 or <i>missing</i>\n       Range:        strings\n</p>"
    },
    {
        "subinword": "<p>\n<b>subinword(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>s3</i><b>,</b><i>n</i><b>)</b>\n       Description:  <i>s1</i>, where the first <i>n</i> occurrences in <i>s1</i> of <i>s2</i> as a word\n                     have been replaced with <i>s3</i>\n</p><p>\n                     A word is defined as a space-separated token.  A token\n                     at the beginning or end of <i>s1</i> is considered\n                     space-separated.  This is different from Unicode word,\n                     which is a language unit based on either a set of\n                     word-boundary rules or dictionaries for several\n                     languages (Chinese, Japanese, and Thai).  If <i>n</i> is\n                     <i>missing</i>, all occurrences are replaced.\n        \n                     Also see <a href=\"/help.cgi?regexm()\"><b>regexm()</b></a>, <b>regexr()</b>, and <b>regexs()</b>.\n</p><p>\n<b>subinword(\"this is the day\",\"is\",\"X\",1)</b> = <b>\"this X the</b>\n<b>day\"</b>\n<b>subinword(\"this is the hour\",\"is\",\"X\",.)</b> = <b>\"this X the</b>\n<b>hour\"</b>\n<b>subinword(\"this is this\",\"th\",\"X\",.)</b> = <b>\"this is this\"</b>\n       Domain <i>s1</i>:    strings (to be substituted for)\n       Domain <i>s2</i>:    strings (to be substituted from)\n       Domain <i>s3</i>:    strings (to be substituted with)\n       Domain <i>n</i>:     integers <u>&gt;</u> 0 or <i>missing</i>\n       Range:        strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use function <a href=\"/help.cgi?usubinstr()\"><b>usubinstr()</b></a> if your string contains Unicode characters.\n</p>"
    },
    {
        "subinstr": "<p>\n<b>subinstr(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>s3</i><b>,</b><i>n</i><b>)</b>\n       Description:  <i>s1</i>, where the first <i>n</i> occurrences in <i>s1</i> of <i>s2</i> have been\n                     replaced with <i>s3</i>\n<b>subinstr()</b> is intended for use with only plain ASCII\n                     characters and for use by programmers who want to\n                     perform byte-based substitution.  Note that any Unicode\n                     character beyond ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00c3\u00a9</b> takes 2 bytes.\n</p><p>\n                     To perform character-based replacement in Unicode\n                     strings, see <a href=\"/help.cgi?f_usubinstr\"><b>usubinstr()</b></a>.\n</p><p>\n                     If <i>n</i> is <i>missing</i>, all occurrences are replaced.\n</p><p>\n                     Also see <a href=\"/help.cgi?regexm()\"><b>regexm()</b></a>, <b>regexr()</b>, and <b>regexs()</b>.\n</p><p>\n<b>subinstr(\"this is the day\",\"is\",\"X\",1)</b> = <b>\"thX is the</b>\n<b>day\"</b>\n<b>subinstr(\"this is the hour\",\"is\",\"X\",2)</b> = <b>\"thX X the</b>\n<b>hour\"</b>\n<b>subinstr(\"this is this\",\"is\",\"X\",.)</b> = <b>\"thX X thX\"</b>\n       Domain <i>s1</i>:    strings (to be substituted into)\n       Domain <i>s2</i>:    strings (to be substituted from)\n       Domain <i>s3</i>:    strings (to be substituted with)\n       Domain <i>n</i>:     integers <u>&gt;</u> 0 or <i>missing</i>\n       Range:        strings\n</p>"
    },
    {
        "subinword": "<p>\n<b>subinword(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>s3</i><b>,</b><i>n</i><b>)</b>\n       Description:  <i>s1</i>, where the first <i>n</i> occurrences in <i>s1</i> of <i>s2</i> as a word\n                     have been replaced with <i>s3</i>\n</p><p>\n                     A word is defined as a space-separated token.  A token\n                     at the beginning or end of <i>s1</i> is considered\n                     space-separated.  This is different from Unicode word,\n                     which is a language unit based on either a set of\n                     word-boundary rules or dictionaries for several\n                     languages (Chinese, Japanese, and Thai).  If <i>n</i> is\n                     <i>missing</i>, all occurrences are replaced.\n        \n                     Also see <a href=\"/help.cgi?regexm()\"><b>regexm()</b></a>, <b>regexr()</b>, and <b>regexs()</b>.\n</p><p>\n<b>subinword(\"this is the day\",\"is\",\"X\",1)</b> = <b>\"this X the</b>\n<b>day\"</b>\n<b>subinword(\"this is the hour\",\"is\",\"X\",.)</b> = <b>\"this X the</b>\n<b>hour\"</b>\n<b>subinword(\"this is this\",\"th\",\"X\",.)</b> = <b>\"this is this\"</b>\n       Domain <i>s1</i>:    strings (to be substituted for)\n       Domain <i>s2</i>:    strings (to be substituted from)\n       Domain <i>s3</i>:    strings (to be substituted with)\n       Domain <i>n</i>:     integers <u>&gt;</u> 0 or <i>missing</i>\n       Range:        strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use function <a href=\"/help.cgi?usubinstr()\"><b>usubinstr()</b></a> if your string contains Unicode characters.\n</p>"
    },
    {
        "substr": "<p>\n<b>substr(</b><i>s</i><b>,</b><i>n1</i><b>,</b><i>n2</i><b>)</b>\n       Description:  the substring of <i>s</i>, starting at <i>n1</i>, for a length of <i>n2</i>\n<b>substr()</b> is intended for use with only plain ASCII\n                     characters and for use by programmers who want to\n                     extract a subset of bytes from a string.  For those with\n                     plain ASCII text, <i>n1</i> is the starting character, and <i>n2</i>\n                     is the length of the string in characters.  For\n                     programmers, <b>substr()</b> is technically a byte-based\n                     function.  For plain ASCII characters, the two are\n                     equivalent but you can operate on byte values beyond\n                     that range.  Note that any Unicode character beyond\n                     ASCII range (code point greater than 127) takes more\n                     than 1 byte in the UTF-8 encoding; for example, <b>\u00c3\u00a9</b> takes\n                     2 bytes.\n</p><p>\n                     To obtain substrings of Unicode strings, see <a href=\"/help.cgi?f_usubstr\"><b>usubstr()</b></a>.\n</p><p>\n                     If <i>n1</i> &lt; 0, <i>n1</i> is interpreted as the distance from the\n                     end of the string; if <i>n2</i> = <b>.</b> (<i>missing</i>), the remaining\n                     portion of the string is returned.\n</p><p>\n<b>substr(\"abcdef\",2,3)</b> = <b>\"bcd\"</b>\n<b>substr(\"abcdef\",-3,2)</b> = <b>\"de\"</b>\n<b>substr(\"abcdef\",2,.)</b> = <b>\"bcdef\"</b>\n<b>substr(\"abcdef\",-3,.)</b> = <b>\"def\"</b>\n<b>substr(\"abcdef\",2,0)</b> = <b>\"\"</b>\n<b>substr(\"abcdef\",15,2)</b> = <b>\"\"</b>\n       Domain <i>s</i>:     strings\n       Domain <i>n1</i>:    integers &gt;= 1 and &lt;= -1\n       Domain <i>n2</i>:    integers &gt;= 1\n       Range:        strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    If your string contains Unicode characters, see <a href=\"/help.cgi?usubstr()\"><b>usubstr()</b></a> and <a href=\"/help.cgi?udsubstr()\"><b>udsubstr()</b></a>.\n</p>"
    },
    {
        "sum": "<p>\n<b>sum(</b><i>x</i><b>)</b>\n       Description:  the running sum of <i>x</i>, treating missing values as zero\n        \n                     For example, following the command <b>generate y=sum(x)</b>,\n                     the <i>j</i>th observation on <b>y</b> contains the sum of the first\n                     through <i>j</i>th observations on <b>x</b>.  See <a href=\"/help.cgi?egen\"><b>[D] egen</b></a> for an\n                     alternative sum function, <a href=\"/help.cgi?egen#total()\"><b>total()</b></a>, that produces a\n                     constant equal to the overall sum.\n       Domain:       all real numbers or <i>missing</i>\n       Range:        -8e+307 to 8e+307 (excluding <i>missing</i>)\n</p>"
    },
    {
        "sweep": "<p>\n<b>sweep(</b><i>M</i><b>,</b><i>i</i><b>)</b>\n       Description:  matrix <i>M</i> with <i>i</i>th row/column swept\n</p><p>\n                     The row and column names of the resultant matrix are\n                     obtained from <i>M</i>, except that the <i>n</i>th row and column\n                     names are interchanged.\n       Domain <i>M</i>:     <i>n</i> x <i>n</i> matrices\n       Domain <i>i</i>:     integer scalars 1 to <i>n</i>\n       Range:        <i>n</i> x <i>n</i> matrices\n</p>"
    },
    {
        "t": "<p>\n<b>t(</b><i>df</i><b>,</b><i>t</i><b>)</b>\n       Description:  the cumulative Student's t distribution with <i>df</i> degrees\n                     of freedom\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>t</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "tan": "<p>\n<b>tan(</b><i>x</i><b>)</b>\n       Description:  the tangent of <i>x</i>, where <i>x</i> is in radians\n       Domain:       -1e+18 to 1e+18\n       Range:        -1e+17 to 1e+17 or <i>missing</i>\n</p>"
    },
    {
        "tanh": "<p>\n<b>tanh(</b><i>x</i><b>)</b>\n       Description:  the hyperbolic tangent of <i>x</i>,\n                     <b>tanh(</b><i>x</i><b>)</b> = {exp(<i>x</i>) - exp(-<i>x</i>)}/{exp(<i>x</i>) + exp(-<i>x</i>)}\n       Domain:       -8e+307 to 8e+307\n       Range:        -1 to 1 or <i>missing</i>\n</p>"
    },
    {
        "tC": "<p>\n<b>tC(</b><i>l</i><b>)</b>\n       Description:  convenience function to make typing dates and times in\n                     expressions easier\n               \n                     Same as <b>tc()</b>, except returns leap second-adjusted\n                     values; for example, typing <b>tc(29nov2007 9:15)</b> is\n                     equivalent to typing <b>1511946900000</b>, whereas <b>tC(29nov2007</b>\n<b>9:15)</b> is <b>1511946923000</b>.\n       Domain <i>l</i>:     datetime literal strings 01jan0100 00:00:00.000 to\n                     31dec9999 23:59:59.999\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     &gt;253,717,919,999,999)\n</p><p>\n<b>tc(</b><i>l</i><b>)</b>\n       Description:  convenience function to make typing dates and times in\n                     expressions easier\n               \n                     For example, typing <b>tc(2jan1960 13:42)</b> is equivalent to\n                     typing <b>135720000</b>; the date but not the time may be\n                     omitted, and then 01jan1960 is assumed; the seconds\n                     portion of the time may be omitted and is assumed to be\n                     0.000; <b>tc(11:02)</b> is equivalent to typing <b>39720000</b>.\n       Domain <i>l</i>:     datetime literal strings 01jan0100 00:00:00.000 to\n                     31dec9999 23:59:59.999\n       Range:        datetimes 01jan0100 00:00:00.000 to 31dec9999\n                     23:59:59.999 (integers -58,695,840,000,000 to\n                     253,717,919,999,999)\n</p>"
    },
    {
        "td": "<p>\n<b>td(</b><i>l</i><b>)</b>\n       Description:  convenience function to make typing dates in expressions\n                     easier\n</p><p>\n                     For example, typing <b>td(2jan1960)</b> is equivalent to typing\n                     <b>1</b>.\n       Domain <i>l</i>:     date literal strings 01jan0100 to 31dec9999\n       Range:        <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n</p>"
    },
    {
        "tden": "<p>\n<b>tden(</b><i>df</i><b>,</b><i>t</i><b>)</b>\n       Description:  the probability density function of Student's t\n                     distribution\n       Domain <i>df</i>:    1e-323 to 8e+307 (may be nonintegral)\n       Domain <i>t</i>:     -8e+307 to 8e+307\n       Range:        0 to 0.39894 ...\n</p>"
    },
    {
        "th": "<p>\n<b>th(</b><i>l</i><b>)</b>\n       Description:  convenience function to make typing half-yearly dates in\n                     expressions easier\n</p><p>\n                     For example, typing <b>th(1960h2)</b> is equivalent to typing\n                     <b>1</b>.\n       Domain <i>l</i>:     half-year literal strings 0100h1 to 9999h2\n       Range:        <b>%th</b> dates 0100h1 to 9999h2 (integers -3,720 to 16,079)\n</p>"
    },
    {
        "tin": "<p>\n<b>tin(</b><i>d1</i><b>,</b> <i>d2</i><b>)</b>\n       Description:  <i>true</i> if <i>d1</i> <u>&lt;</u> <i>t</i> <u>&lt;</u> <i>d2</i>, where <i>t</i> is the time variable\n                     previously <b>tsset</b>\n</p><p>\n                     You must have previously <a href=\"/help.cgi?tsset\"><b>tsset</b></a> the data to use <b>tin()</b>.\n                     When you <b>tsset</b> the data, you specify a time variable <i>t</i>,\n                     and the format on <i>t</i> states how it is recorded.  You type\n                     <i>d1</i> and <i>d2</i> according to that format.\n</p><p>\n                     If <i>t</i> has a <b>%tc</b> format, you could type <b>tin(5jan1992</b>\n<b>11:15, 14apr2002 12:25)</b>.\n</p><p>\n                     If <i>t</i> has a <b>%td</b> format, you could type <b>tin(5jan1992,</b>\n<b>14apr2002)</b>.\n</p><p>\n                     If <i>t</i> has a <b>%tw</b> format, you could type <b>tin(1985w1,</b>\n<b>2002w15)</b>.\n</p><p>\n                     If <i>t</i> has a <b>%tm</b> format, you could type <b>tin(1985m1,</b>\n<b>2002m4)</b>.\n</p><p>\n                     If <i>t</i> has a <b>%tq</b> format, you could type <b>tin(1985q1,</b>\n<b>2002q2)</b>.\n</p><p>\n                     If <i>t</i> has a <b>%th</b> format, you could type <b>tin(1985h1,</b>\n<b>2002h1)</b>.\n</p><p>\n                     If <i>t</i> has a <b>%ty</b> format, you could type <b>tin(1985, 2002)</b>.\n</p><p>\n                     Otherwise, <i>t</i> is just a set of integers, and you could\n                     type <b>tin(12, 38)</b>.\n</p><p>\n                     The details of the <b>%t</b> format do not matter.  If your <i>t</i>\n                     is formatted <b>%tdnn/dd/yy</b> so that 5jan1992 displays as\n                     1/5/92, you would still type the date in day-month-year\n                     order:  <b>tin(5jan1992, 14apr2002)</b>.\n       Domain <i>d1</i>:    date or time literals or strings recorded in units of <i>t</i>\n                     previously <b>tsset</b> or blank to indicate no minimum date\n       Domain <i>d2</i>:    date or time literals or strings recorded in units of <i>t</i>\n                     previously <b>tsset</b> or blank to indicate no maximum date\n       Range:        0 and 1, 1 means <i>true</i>\n</p>"
    },
    {
        "tm": "<p>\n<b>tm(</b><i>l</i><b>)</b>\n       Description:  convenience function to make typing monthly dates in\n                     expressions easier\n               \n                     For example, typing <b>tm(1960m2)</b> is equivalent to typing\n                     <b>1</b>.\n       Domain <i>l</i>:     month literal strings 0100m1 to 9999m12\n       Range:        <b>%tm</b> dates 0100m1 to 9999m12 (integers -22,320 to 96,479)\n</p>"
    },
    {
        "tobytes": "<p>\n<b>tobytes(</b><i>s</i>[<b>,</b><i>n</i>]<b>)</b> \n       Description:  escaped decimal or hex digit strings of up to 200 bytes\n                     of <i>s</i>\n        \n                     The escaped decimal digit string is in the form of\n                     <b>\\dDDD</b>. The escaped hex digit string is in the form of\n                     <b>\\xhh</b>.  If <i>n</i> is not specified or is 0, the decimal form\n                     is produced.  Otherwise, the hex form is produced.\n</p><p>\n<b>tobytes(\"abc\")</b> = <b>\"\\d097\\d098\\d099\"</b>\n<b>tobytes(\"abc\", 1)</b> = <b>\"\\x61\\x62\\x63\"</b>\n<b>tobytes(\"caf\u00c3\u00a9\")</b> = <b>\"\\d099\\d097\\d102\\d195\\d169\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        strings\n</p>"
    },
    {
        "tq": "<p>\n<b>tq(</b><i>l</i><b>)</b>\n       Description:  convenience function to make typing quarterly dates in\n                     expressions easier\n               \n                     For example, typing <b>tq(1960q2)</b> is equivalent to typing\n                     <b>1</b>.\n       Domain <i>l</i>:     quarter literal strings 0100q1 to 9999q4\n       Range:        <b>%tq</b> dates 0100q1 to 9999q4 (integers -7,440 to 32,159)\n</p>"
    },
    {
        "trace": "<p>\n<b>trace(</b><i>M</i><b>)</b>\n       Description:  the trace of matrix <i>M</i>\n       Domain:       <i>n</i> x <i>n</i> (square) matrices\n       Range:        scalars -8e+307 to 8e+307\n</p>"
    },
    {
        "trigamma": "<p>\n<b>trigamma(</b><i>x</i><b>)</b>\n       Description:  the second derivative of <b>lngamma(</b><i>x</i><b>)</b>\n</p><p>\n                     The <b>trigamma()</b> function is the derivative of <b>digamma(</b><i>x</i><b>)</b>.\n       Domain:       -1e+15 to 8e+307\n       Range:        0 to 8e+307 or <i>missing</i>\n</p>"
    },
    {
        "int": "<p>\n<b>int(</b><i>x</i><b>)</b>\n       Description:  the integer obtained by truncating <i>x</i> toward 0 (thus,\n                     <b>int(5.2)</b> = 5 and <b>int(-5.8)</b> = -5); <i>x</i> (not \"<b>.</b>\") if <i>x</i> is\n                     missing, meaning that <b>int(.a)</b> = <b>.a</b>\n</p><p>\n                     One way to obtain the closest integer to <i>x</i> is\n                     <b>int(</b><i>x</i><b>+sign(</b><i>x</i><b>)/2)</b>, which simplifies to <b>int(</b><i>x</i><b>+0.5)</b> for <i>x</i> <u>&gt;</u>\n                     0.  However, use of the <b>round()</b> function is preferred.\n                     Also see <a href=\"/help.cgi?round()\"><b>round(</b></a><a href=\"/help.cgi?round()\"><i>x</i></a><a href=\"/help.cgi?round()\"><b>)</b></a>, <a href=\"/help.cgi?ceil()\"><b>ceil(</b></a><a href=\"/help.cgi?ceil()\"><i>x</i></a><a href=\"/help.cgi?ceil()\"><b>)</b></a>, and <a href=\"/help.cgi?floor()\"><b>floor(</b></a><a href=\"/help.cgi?floor()\"><i>x</i></a><a href=\"/help.cgi?floor()\"><b>)</b></a>.\n       Domain:       -8e+307 to 8e+307\n       Range:        integers in -8e+307 to 8e+307\n</p><p>\n<b>trunc(</b><i>x</i><b>)</b>\n       Description:  a synonym for <a href=\"/help.cgi?int()\"><b>int(</b></a><a href=\"/help.cgi?int()\"><i>x</i></a><a href=\"/help.cgi?int()\"><b>)</b></a>\n</p>"
    },
    {
        "ttail": "<p>\n<b>ttail(</b><i>df</i><b>,</b><i>t</i><b>)</b>\n       Description:  the reverse cumulative (upper tail or survivor)\n                     Student's t distribution; the probability T &gt; <i>t</i>\n       Domain <i>df</i>:    2e-10 to 2e+17 (may be nonintegral)\n       Domain <i>t</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p>"
    },
    {
        "tukeyprob": "<p>\n<b>tukeyprob(</b><i>k</i><b>,</b><i>df</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative Tukey's Studentized range distribution\n                     with <i>k</i> ranges and <i>df</i> degrees of freedom; <b>0</b> if <i>x</i> &lt; 0\n        \n                     If <i>df</i> is a missing value, then the normal distribution\n                     is used instead of Student's t.\n</p><p>\n<b>tukeyprob()</b> is computed using an algorithm described in\n                     <a href=\"/help.cgi?density_functions#M1981\">Miller (1981)</a>.\n       Domain <i>k</i>:     2 to 1e+6\n       Domain <i>df</i>:    2 to 1e+6\n       Domain <i>x</i>:     -8e+307 to 8e+307\n       Range:        0 to 1\n</p><p>\n</p><p>\n<b><u>Reference</u></b>\n</p><p>\n    Miller, R. G.  1981.  <i>Simultaneous Statistical Inference</i>.  2nd ed.  New\n        York: Springer.\n</p>"
    },
    {
        "tw": "<p>\n<b>tw(</b><i>l</i><b>)</b>\n       Description:  convenience function to make typing weekly dates in\n                     expressions easier\n               \n                     For example, typing <b>tw(1960w2)</b> is equivalent to typing\n                     <b>1</b>.\n       Domain <i>l</i>:     week literal strings 0100w1 to 9999w52\n       Range:        <b>%tw</b> dates 0100w1 to 9999w52 (integers -96,720 to\n                     418,079)\n</p>"
    },
    {
        "twithin": "<p>\n<b>twithin(</b><i>d1</i><b>,</b> <i>d2</i><b>)</b>\n       Description:  <i>true</i> if <i>d1</i> &lt; <i>t</i> &lt; <i>d2</i>, where <i>t</i> is the time variable\n                     previously <b>tsset</b>\n</p><p>\n                     See the <a href=\"/help.cgi?tin()\"><b>tin()</b></a> function; <b>twithin()</b> is similar, except the\n                     range is exclusive.\n       Domain <i>d1</i>:    date or time literals or strings recorded in units of <i>t</i>\n                     previously <b>tsset</b> or blank to indicate no minimum date\n       Domain <i>d2</i>:    date or time literals or strings recorded in units of <i>t</i>\n                     previously <b>tsset</b> or blank to indicate no maximum date\n       Range:        0 and 1, 1 means <i>true</i>\n</p>"
    },
    {
        "uchar": "<p>\n<b>uchar(</b><i>n</i><b>)</b>\n       Description:  the Unicode character corresponding to Unicode code\n                     point <i>n</i> or an empty string if <i>n</i> is beyond the Unicode\n                     code-point range\n</p><p>\n                     Note that <b>uchar()</b> takes the decimal value of the Unicode\n                     code point.  <b>ustrunescape()</b> takes an escaped hex digit\n                     string of the Unicode code point.  For example, both\n                     <b>uchar(8364)</b> and <b>ustrunescape(\"\\u20ac\")</b> produce the Euro\n                     sign.\n       Domain <i>n</i>:     integers <u>&gt;</u> 0\n       Range:        Unicode characters\n</p>"
    },
    {
        "udstrlen": "<p>\n<b>udstrlen(</b><i>s</i><b>)</b>\n       Description:  the number of display columns needed to display the\n                     Unicode string <i>s</i> in the Stata Results window\n        \n                     A Unicode character in the CJK (Chinese, Japanese, and\n                     Korean) encoding usually requires two display columns; a\n                     Latin character usually requires one column.  Any\n                     invalid UTF-8 sequence requires one column.\n</p><p>\n<b>udstrlen(\"\u4e2d\u503c\")</b> = <b>4</b>\n<b>ustrlen(\"\u4e2d\u503c\")</b> = <b>2</b>\n<b>strlen(\"\u4e2d\u503c\")</b> = <b>6</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        integers <u>&gt;</u> 0\n</p>"
    },
    {
        "udsubstr": "<p>\n<b>udsubstr(</b><i>s</i><b>,</b><i>n1</i><b>,</b><i>n2</i><b>)</b>\n       Description:  the Unicode substring of <i>s</i>, starting at character <i>n1</i>,\n                     for <i>n2</i> display columns\n</p><p>\n                     If <i>n2</i> = <b>.</b> (<i>missing</i>), the remaining portion of the\n                     Unicode string is returned.  If <i>n2</i> display columns from\n                     <i>n1</i> is in the middle of a Unicode character, the\n                     substring stops at the previous Unicode character.\n</p><p>\n<b>udsubstr(\"m\u00e9diane\",2,3)</b> = <b>\"\u00e9di\"</b>\n<b>udsubstr(\"\u4e2d\u503c\",1,1)</b> = <b>\"\"</b>\n<b>udsubstr(\"\u4e2d\u503c\",1,2)</b> = <b>\"\u4e2d\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n1</i>:    integers <u>&gt;</u> 1\n       Domain <i>n2</i>:    integers <u>&gt;</u> 1\n       Range:        Unicode strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use function <a href=\"/help.cgi?usubstr()\"><b>usubstr()</b></a> to extract a substring based on Unicode\n    characters.  Use function <a href=\"/help.cgi?substr()\"><b>substr()</b></a> to extract a substring based on bytes.\n</p>"
    },
    {
        "uisdigit": "<p>\n<b>uisdigit(</b><i>s</i><b>)</b>\n       Description:  <b>1</b> if the first Unicode character in <i>s</i> is a Unicode\n                     decimal digit; otherwise, <b>0</b>\n</p><p>\n                     A Unicode decimal digit is a Unicode character with the\n                     character property <b>Nd</b> according to the Unicode standard.\n                     The function returns <b>-1</b> if the string starts with an\n                     invalid UTF-8 sequence.\n       Domain <i>s</i>:     Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "uisletter": "<p>\n<b>uisletter(</b><i>s</i><b>)</b>\n       Description:  <b>1</b> if the first Unicode character in <i>s</i> is a Unicode\n                     letter; otherwise, <b>0</b>\n</p><p>\n                     A Unicode letter is a Unicode character with the\n                     character property <b>L</b> according to the Unicode standard.\n                     The function returns <b>-1</b> if the string starts with an\n                     invalid UTF-8 sequence.\n       Domain <i>s</i>:     Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "ustrcompare": "<p>\n<b>ustrcompare(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  compares two Unicode strings\n</p><p>\n                     The function returns <b>-1</b>, <b>1</b>, or <b>0</b> if <i>s1</i> is less than,\n                     greater than, or equal to <i>s2</i>.  The function may return a\n                     negative number other than -1 if an error happens.  The\n                     comparison is locale dependent.  For example, z &lt; \u00f6 in\n                     Swedish but \u00f6 &lt; z in German.  If <i>loc</i> is not specified,\n                     the default locale is used.  The comparison is diacritic\n                     and case sensitive.  If you need different behavior, for\n                     example, case-insensitive comparison, you should use the\n                     extended comparison function <b>ustrcompareex()</b>.  Unicode\n                     string comparison compares Unicode strings in a\n                     language-sensitive manner.  On the other hand, the <a href=\"/help.cgi?sort\"><b>sort</b></a>\n                     command compares strings in code-point (binary) order.\n                     For example, uppercase \"Z\" (code-point value 90) comes\n                     before lowercase \"a\" (code-point value 97) in code-point\n                     order but comes after \"a\" in any English dictionary.\n</p><p>\n<b>ustrcompare(\"z\", \"\u00f6\", \"sv\")</b> = <b>-1</b>\n<b>ustrcompare(\"z\", \"\u00f6\", \"de\")</b> =<b> 1</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "ustrsortkey": "<p>\n<b>ustrsortkey(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  generates a null-terminated byte array that can be used\n                     by the <a href=\"/help.cgi?sort\"><b>sort</b></a> command to produce the same order as\n                     <b>ustrcompare()</b>\n</p><p>\n                     The function may return an empty array if an error\n                     occurs.  The result is locale dependent.  If <i>loc</i> is not\n                     specified, the default locale is used.  The result is\n                     also diacritic and case sensitive.  If you need\n                     different behavior, for example, case-insensitive\n                     results, you should use the extended function\n                     <b>ustrsortkeyex()</b>. See <b>[U] 12.4.2.5 Sorting strings</b>\n<b>containing Unicode characters</b> for details and examples.\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        null-terminated byte array\n</p>"
    },
    {
        "ustrcompareex": "<p>\n<b>ustrcompareex(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>loc</i><b>,</b><i>st</i><b>,</b><i>case</i><b>,</b><i>cslv</i><b>,</b><i>norm</i><b>,</b><i>num</i><b>,</b><i>alt</i><b>,</b><i>fr</i><b>)</b>\n       Description:  compares two Unicode strings\n</p><p>\n                     The function returns <b>-1</b>, <b>1</b>, or <b>0</b> if <i>s1</i> is less than,\n                     greater than, or equal to <i>s2</i>.  The function may return a\n                     negative number other than <b>-1</b> if an error occurs.  The\n                     comparison is locale dependent.  For example, z &lt; \u00f6 in\n                     Swedish but \u00f6 &lt; z in German.  If <i>loc</i> is not specified,\n                     the default locale is used.\n</p><p>\n<i>st</i> controls the strength of the comparison.  Possible\n                     values are <b>1</b> (primary), <b>2</b> (secondary), <b>3</b> (tertiary), <b>4</b>\n                     (quaternary), or <b>5</b> (identical).  <b>-1</b> means to use the\n                     default value for the locale.  Any other numbers are\n                     treated as tertiary.  The primary difference represents\n                     base letter differences; for example, letter \"a\" and\n                     letter \"b\" have primary differences.  The secondary\n                     difference represents diacritical differences on the\n                     same base letter; for example, letters \"a\" and \"\u00e4\" have\n                     secondary differences.  The tertiary difference\n                     represents case differences of the same base letter; for\n                     example, letters \"a\" and \"A\" have tertiary differences.\n                     Quaternary strength is useful to distinguish between\n                     Katakana and Hiragana for the JIS 4061 collation\n                     standard.  Identical strength is essentially the\n                     code-point order of the string, hence, is rarely useful.\n</p><p>\n<b>ustrcompareex(\"caf\u00e9\",\"cafe\",\"fr\", 1, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>0</b>\n<b>ustrcompareex(\"caf\u00e9\",\"cafe\",\"fr\", 2, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", 3, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n</p><p>\n<i>case</i> controls the uppercase and lowercase letter order.\n                     Possible values are <b>0</b> (use order specified in tertiary\n                     strength), <b>1</b> (uppercase first), or <b>2</b> (lowercase first).\n                     <b>-1</b> means to use the default value for the locale.  Any\n                     other values are treated as <b>0</b>.\n</p><p>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", -1, 1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>-1</b>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", -1, 2, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n</p><p>\n<i>cslv</i> controls whether an extra case level between the\n                     secondary level and the tertiary level is generated.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  Combining this setting to be \"on\" and the\n                     strength setting to be primary can achieve the effect of\n                     ignoring the diacritical differences but preserving the\n                     case differences.  If the setting is \"on\", the result is\n                     also affected by the <i>case</i> setting.\n</p><p>\n<b>ustrcompareex(\"caf\u00e9\",\"Cafe\",\"fr\", 1, -1, 1, -1, -1, -1,</b>\n<b>-1)</b>=<b>-1</b>\n<b>ustrcompareex(\"caf\u00e9\",\"Cafe\",\"fr\", 1, 1, 1, -1, -1, -1,</b>\n<b>-1)</b>=<b>1</b>\n</p><p>\n<i>norm</i> controls whether the normalization check and\n                     normalizations are performed.  Possible values are <b>0</b>\n                     (off) or <b>1</b> (on).  <b>-1</b> means to use the default value for\n                     the locale.  Any other values are treated as <b>0</b>.  Most\n                     languages do not require normalization for comparison.\n                     Normalization is needed in languages that use multiple\n                     combining characters such as Arabic, ancient Greek, or\n                     Hebrew.\n</p><p>\n<i>num</i> controls how contiguous digit substrings are sorted.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  If the setting is \"on\", substrings\n                     consisting of digits are sorted based on the numeric\n                     value.  For example, \"100\" is after value \"20\" instead\n                     of before it.  Note that the digit substring is limited\n                     to 254 digits, and plus/minus signs, decimals, or\n                     exponents are not supported.\n</p><p>\n<b>ustrcompareex(\"100\", \"20\",\"en\", -1, -1, -1, -1, 0, -1,</b>\n<b>-1)</b>=<b>-1</b>\n<b>ustrcompareex(\"100\", \"20\",\"en\", -1, -1, -1, -1, 1, -1,</b>\n<b>-1)</b>=<b>1</b>\n</p><p>\n<i>alt</i> controls how spaces and punctuation characters are\n                     handled.  Possible values are <b>0</b> (use primary strength)\n                     or <b>1</b> (alternative handling).  Any other values are\n                     treated as <b>0</b>.  If the setting is <b>1</b> (alternative\n                     handling), \"onsite\", \"on-site\", and \"on site\" are\n                     considered equals.\n</p><p>\n<b>ustrcompareex(\"onsite\", \"on-site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 1, -1)</b>=<b>0</b>\n<b>ustrcompareex(\"onsite\", \"on site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 1, -1)</b>=<b>0</b>\n<b>ustrcompareex(\"onsite\", \"on-site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 0, -1)</b>=<b>1</b>\n</p><p>\n<i>fr</i> controls the direction of the secondary strength.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  All other values are\n                     treated as \"off\".  If the setting is \"on\", the\n                     diacritical letters are sorted backward.  Note that the\n                     setting is \"on\" by default only for Canadian French\n                     (locale <b>fr_CA</b>).\n</p><p>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,0)</b> = <b>-1</b>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,1)</b> = <b>1</b>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,-1)</b> = <b>1</b>\n<b>ustrcompareex(\"cot\u00e9\", \"c\u00f4te\",\"fr\",-1,-1,-1,-1,-1,-1,-1)</b>\n                         = <b>1</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>st</i>:    integers\n       Domain <i>case</i>:  integers\n       Domain <i>cslv</i>:  integers\n       Domain <i>norm</i>:  integers\n       Domain <i>num</i>:   integers\n       Domain <i>alt</i>:   integers\n       Domain <i>fr</i>:    integers\n       Range:        integers\n</p>"
    },
    {
        "ustrsortkeyex": "<p>\n<b>ustrsortkeyex(</b><i>s</i><b>,</b><i>loc</i><b>,</b><i>st</i><b>,</b><i>case</i><b>,</b><i>cslv</i><b>,</b><i>norm</i><b>,</b><i>num</i><b>,</b><i>alt</i><b>,</b><i>fr</i><b>)</b>\n       Description:  generates a null-terminated byte array that can be used\n                     by the <a href=\"/help.cgi?sort\"><b>sort</b></a> command to produce the same order as\n                     <b>ustrcompare()</b>\n        \n                     The function may return an empty array if an error\n                     occurs. The result is locale dependent.  If <i>loc</i> is not\n                     specified, the default locale is used.  See <b>[U] 12.4.2.5</b>\n<b>Sorting strings containing Unicode characters</b> for\n                     details and examples.\n</p><p>\n<i>st</i> controls the strength of the comparison.  Possible\n                     values are <b>1</b> (primary), <b>2</b> (secondary), <b>3</b> (tertiary), <b>4</b>\n                     (quaternary), or <b>5</b> (identical).  <b>-1</b> means to use the\n                     default value for the locale.  Any other numbers are\n                     treated as tertiary.  The primary difference represents\n                     base letter differences; for example, letter \"a\" and\n                     letter \"b\" have primary differences.  The secondary\n                     difference represents diacritical differences on the\n                     same base letter; for example, letters \"a\" and \"\u00e4\" have\n                     secondary differences.  The tertiary difference\n                     represents case differences of the same base letters;\n                     for example, letters \"a\" and \"A\" have tertiary\n                     differences.  Quaternary strength is useful to\n                     distinguish between Katakana and Hiragana for the JIS\n                     4061 collation standard.  Identical strength is\n                     essentially the code-point order of the string and,\n                     hence, is rarely useful.\n</p><p>\n<i>case</i> controls the uppercase and lowercase letter order.\n                     Possible values are <b>0</b> (use order specified in tertiary\n                     strength), <b>1</b> (uppercase first), or <b>2</b> (lowercase first).\n                     <b>-1</b> means to use the default value for the locale.  Any\n                     other values are treated as <b>0</b>.\n</p><p>\n<i>cslv</i> controls if an extra case level between the\n                     secondary level and the tertiary level is generated.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  Combining this setting to be \"on\" and the\n                     strength setting to be primary can achieve the effect of\n                     ignoring the diacritical differences but preserving the\n                     case differences.  If the setting is \"on\", the result is\n                     also affected by the <i>case</i> setting.\n</p><p>\n<i>norm</i> controls whether the normalization check and\n                     normalizations are performed.  Possible values are <b>0</b>\n                     (off) or <b>1</b> (on).  <b>-1</b> means to use the default value for\n                     the locale.  Any other values are treated as <b>0</b>.  Most\n                     languages do not require normalization for comparison.\n                     Normalization is needed in languages that use multiple\n                     combining characters such as Arabic, ancient Greek, or\n                     Hebrew.\n</p><p>\n<i>num</i> controls how contiguous digit substrings are sorted.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  If the setting is \"on\", substrings\n                     consisting of digits are sorted based on the numeric\n                     value.  For example, \"100\" is after \"20\" instead of\n                     before it.  Note that the digit substring is limited to\n                     254 digits, and plus/minus signs, decimals, or exponents\n                     are not supported.\n</p><p>\n<i>alt</i> controls how spaces and punctuation characters are\n                     handled.  Possible values are <b>0</b> (use primary strength)\n                     or <b>1</b> (alternative handling).  Any other values are\n                     treated as <b>0</b>.  If the setting is <b>1</b> (alternative\n                     handling), \"onsite\", \"on-site\", and \"on site\" are\n                     considered equals.\n</p><p>\n<i>fr</i> controls the direction of the secondary strength.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  All other values are\n                     treated as \"off\".  If the setting is \"on\", the\n                     diacritical letters are sorted backward.  Note that the\n                     setting is \"on\" by default only for Canadian French\n                     (locale <b>fr_CA</b>).\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>st</i>:    integers\n       Domain <i>case</i>:  integers\n       Domain <i>cslv</i>:  integers\n       Domain <i>norm</i>:  integers\n       Domain <i>num</i>:   integers\n       Domain <i>alt</i>:   integers\n       Domain <i>fr</i>:    integers\n       Range:        null-terminated byte array\n</p>"
    },
    {
        "ustrcompare": "<p>\n<b>ustrcompare(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  compares two Unicode strings\n</p><p>\n                     The function returns <b>-1</b>, <b>1</b>, or <b>0</b> if <i>s1</i> is less than,\n                     greater than, or equal to <i>s2</i>.  The function may return a\n                     negative number other than -1 if an error happens.  The\n                     comparison is locale dependent.  For example, z &lt; \u00f6 in\n                     Swedish but \u00f6 &lt; z in German.  If <i>loc</i> is not specified,\n                     the default locale is used.  The comparison is diacritic\n                     and case sensitive.  If you need different behavior, for\n                     example, case-insensitive comparison, you should use the\n                     extended comparison function <b>ustrcompareex()</b>.  Unicode\n                     string comparison compares Unicode strings in a\n                     language-sensitive manner.  On the other hand, the <a href=\"/help.cgi?sort\"><b>sort</b></a>\n                     command compares strings in code-point (binary) order.\n                     For example, uppercase \"Z\" (code-point value 90) comes\n                     before lowercase \"a\" (code-point value 97) in code-point\n                     order but comes after \"a\" in any English dictionary.\n</p><p>\n<b>ustrcompare(\"z\", \"\u00f6\", \"sv\")</b> = <b>-1</b>\n<b>ustrcompare(\"z\", \"\u00f6\", \"de\")</b> =<b> 1</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "ustrsortkey": "<p>\n<b>ustrsortkey(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  generates a null-terminated byte array that can be used\n                     by the <a href=\"/help.cgi?sort\"><b>sort</b></a> command to produce the same order as\n                     <b>ustrcompare()</b>\n</p><p>\n                     The function may return an empty array if an error\n                     occurs.  The result is locale dependent.  If <i>loc</i> is not\n                     specified, the default locale is used.  The result is\n                     also diacritic and case sensitive.  If you need\n                     different behavior, for example, case-insensitive\n                     results, you should use the extended function\n                     <b>ustrsortkeyex()</b>. See <b>[U] 12.4.2.5 Sorting strings</b>\n<b>containing Unicode characters</b> for details and examples.\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        null-terminated byte array\n</p>"
    },
    {
        "ustrcompareex": "<p>\n<b>ustrcompareex(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>loc</i><b>,</b><i>st</i><b>,</b><i>case</i><b>,</b><i>cslv</i><b>,</b><i>norm</i><b>,</b><i>num</i><b>,</b><i>alt</i><b>,</b><i>fr</i><b>)</b>\n       Description:  compares two Unicode strings\n</p><p>\n                     The function returns <b>-1</b>, <b>1</b>, or <b>0</b> if <i>s1</i> is less than,\n                     greater than, or equal to <i>s2</i>.  The function may return a\n                     negative number other than <b>-1</b> if an error occurs.  The\n                     comparison is locale dependent.  For example, z &lt; \u00f6 in\n                     Swedish but \u00f6 &lt; z in German.  If <i>loc</i> is not specified,\n                     the default locale is used.\n</p><p>\n<i>st</i> controls the strength of the comparison.  Possible\n                     values are <b>1</b> (primary), <b>2</b> (secondary), <b>3</b> (tertiary), <b>4</b>\n                     (quaternary), or <b>5</b> (identical).  <b>-1</b> means to use the\n                     default value for the locale.  Any other numbers are\n                     treated as tertiary.  The primary difference represents\n                     base letter differences; for example, letter \"a\" and\n                     letter \"b\" have primary differences.  The secondary\n                     difference represents diacritical differences on the\n                     same base letter; for example, letters \"a\" and \"\u00e4\" have\n                     secondary differences.  The tertiary difference\n                     represents case differences of the same base letter; for\n                     example, letters \"a\" and \"A\" have tertiary differences.\n                     Quaternary strength is useful to distinguish between\n                     Katakana and Hiragana for the JIS 4061 collation\n                     standard.  Identical strength is essentially the\n                     code-point order of the string, hence, is rarely useful.\n</p><p>\n<b>ustrcompareex(\"caf\u00e9\",\"cafe\",\"fr\", 1, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>0</b>\n<b>ustrcompareex(\"caf\u00e9\",\"cafe\",\"fr\", 2, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", 3, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n</p><p>\n<i>case</i> controls the uppercase and lowercase letter order.\n                     Possible values are <b>0</b> (use order specified in tertiary\n                     strength), <b>1</b> (uppercase first), or <b>2</b> (lowercase first).\n                     <b>-1</b> means to use the default value for the locale.  Any\n                     other values are treated as <b>0</b>.\n</p><p>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", -1, 1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>-1</b>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", -1, 2, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n</p><p>\n<i>cslv</i> controls whether an extra case level between the\n                     secondary level and the tertiary level is generated.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  Combining this setting to be \"on\" and the\n                     strength setting to be primary can achieve the effect of\n                     ignoring the diacritical differences but preserving the\n                     case differences.  If the setting is \"on\", the result is\n                     also affected by the <i>case</i> setting.\n</p><p>\n<b>ustrcompareex(\"caf\u00e9\",\"Cafe\",\"fr\", 1, -1, 1, -1, -1, -1,</b>\n<b>-1)</b>=<b>-1</b>\n<b>ustrcompareex(\"caf\u00e9\",\"Cafe\",\"fr\", 1, 1, 1, -1, -1, -1,</b>\n<b>-1)</b>=<b>1</b>\n</p><p>\n<i>norm</i> controls whether the normalization check and\n                     normalizations are performed.  Possible values are <b>0</b>\n                     (off) or <b>1</b> (on).  <b>-1</b> means to use the default value for\n                     the locale.  Any other values are treated as <b>0</b>.  Most\n                     languages do not require normalization for comparison.\n                     Normalization is needed in languages that use multiple\n                     combining characters such as Arabic, ancient Greek, or\n                     Hebrew.\n</p><p>\n<i>num</i> controls how contiguous digit substrings are sorted.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  If the setting is \"on\", substrings\n                     consisting of digits are sorted based on the numeric\n                     value.  For example, \"100\" is after value \"20\" instead\n                     of before it.  Note that the digit substring is limited\n                     to 254 digits, and plus/minus signs, decimals, or\n                     exponents are not supported.\n</p><p>\n<b>ustrcompareex(\"100\", \"20\",\"en\", -1, -1, -1, -1, 0, -1,</b>\n<b>-1)</b>=<b>-1</b>\n<b>ustrcompareex(\"100\", \"20\",\"en\", -1, -1, -1, -1, 1, -1,</b>\n<b>-1)</b>=<b>1</b>\n</p><p>\n<i>alt</i> controls how spaces and punctuation characters are\n                     handled.  Possible values are <b>0</b> (use primary strength)\n                     or <b>1</b> (alternative handling).  Any other values are\n                     treated as <b>0</b>.  If the setting is <b>1</b> (alternative\n                     handling), \"onsite\", \"on-site\", and \"on site\" are\n                     considered equals.\n</p><p>\n<b>ustrcompareex(\"onsite\", \"on-site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 1, -1)</b>=<b>0</b>\n<b>ustrcompareex(\"onsite\", \"on site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 1, -1)</b>=<b>0</b>\n<b>ustrcompareex(\"onsite\", \"on-site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 0, -1)</b>=<b>1</b>\n</p><p>\n<i>fr</i> controls the direction of the secondary strength.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  All other values are\n                     treated as \"off\".  If the setting is \"on\", the\n                     diacritical letters are sorted backward.  Note that the\n                     setting is \"on\" by default only for Canadian French\n                     (locale <b>fr_CA</b>).\n</p><p>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,0)</b> = <b>-1</b>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,1)</b> = <b>1</b>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,-1)</b> = <b>1</b>\n<b>ustrcompareex(\"cot\u00e9\", \"c\u00f4te\",\"fr\",-1,-1,-1,-1,-1,-1,-1)</b>\n                         = <b>1</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>st</i>:    integers\n       Domain <i>case</i>:  integers\n       Domain <i>cslv</i>:  integers\n       Domain <i>norm</i>:  integers\n       Domain <i>num</i>:   integers\n       Domain <i>alt</i>:   integers\n       Domain <i>fr</i>:    integers\n       Range:        integers\n</p>"
    },
    {
        "ustrsortkeyex": "<p>\n<b>ustrsortkeyex(</b><i>s</i><b>,</b><i>loc</i><b>,</b><i>st</i><b>,</b><i>case</i><b>,</b><i>cslv</i><b>,</b><i>norm</i><b>,</b><i>num</i><b>,</b><i>alt</i><b>,</b><i>fr</i><b>)</b>\n       Description:  generates a null-terminated byte array that can be used\n                     by the <a href=\"/help.cgi?sort\"><b>sort</b></a> command to produce the same order as\n                     <b>ustrcompare()</b>\n        \n                     The function may return an empty array if an error\n                     occurs. The result is locale dependent.  If <i>loc</i> is not\n                     specified, the default locale is used.  See <b>[U] 12.4.2.5</b>\n<b>Sorting strings containing Unicode characters</b> for\n                     details and examples.\n</p><p>\n<i>st</i> controls the strength of the comparison.  Possible\n                     values are <b>1</b> (primary), <b>2</b> (secondary), <b>3</b> (tertiary), <b>4</b>\n                     (quaternary), or <b>5</b> (identical).  <b>-1</b> means to use the\n                     default value for the locale.  Any other numbers are\n                     treated as tertiary.  The primary difference represents\n                     base letter differences; for example, letter \"a\" and\n                     letter \"b\" have primary differences.  The secondary\n                     difference represents diacritical differences on the\n                     same base letter; for example, letters \"a\" and \"\u00e4\" have\n                     secondary differences.  The tertiary difference\n                     represents case differences of the same base letters;\n                     for example, letters \"a\" and \"A\" have tertiary\n                     differences.  Quaternary strength is useful to\n                     distinguish between Katakana and Hiragana for the JIS\n                     4061 collation standard.  Identical strength is\n                     essentially the code-point order of the string and,\n                     hence, is rarely useful.\n</p><p>\n<i>case</i> controls the uppercase and lowercase letter order.\n                     Possible values are <b>0</b> (use order specified in tertiary\n                     strength), <b>1</b> (uppercase first), or <b>2</b> (lowercase first).\n                     <b>-1</b> means to use the default value for the locale.  Any\n                     other values are treated as <b>0</b>.\n</p><p>\n<i>cslv</i> controls if an extra case level between the\n                     secondary level and the tertiary level is generated.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  Combining this setting to be \"on\" and the\n                     strength setting to be primary can achieve the effect of\n                     ignoring the diacritical differences but preserving the\n                     case differences.  If the setting is \"on\", the result is\n                     also affected by the <i>case</i> setting.\n</p><p>\n<i>norm</i> controls whether the normalization check and\n                     normalizations are performed.  Possible values are <b>0</b>\n                     (off) or <b>1</b> (on).  <b>-1</b> means to use the default value for\n                     the locale.  Any other values are treated as <b>0</b>.  Most\n                     languages do not require normalization for comparison.\n                     Normalization is needed in languages that use multiple\n                     combining characters such as Arabic, ancient Greek, or\n                     Hebrew.\n</p><p>\n<i>num</i> controls how contiguous digit substrings are sorted.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  If the setting is \"on\", substrings\n                     consisting of digits are sorted based on the numeric\n                     value.  For example, \"100\" is after \"20\" instead of\n                     before it.  Note that the digit substring is limited to\n                     254 digits, and plus/minus signs, decimals, or exponents\n                     are not supported.\n</p><p>\n<i>alt</i> controls how spaces and punctuation characters are\n                     handled.  Possible values are <b>0</b> (use primary strength)\n                     or <b>1</b> (alternative handling).  Any other values are\n                     treated as <b>0</b>.  If the setting is <b>1</b> (alternative\n                     handling), \"onsite\", \"on-site\", and \"on site\" are\n                     considered equals.\n</p><p>\n<i>fr</i> controls the direction of the secondary strength.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  All other values are\n                     treated as \"off\".  If the setting is \"on\", the\n                     diacritical letters are sorted backward.  Note that the\n                     setting is \"on\" by default only for Canadian French\n                     (locale <b>fr_CA</b>).\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>st</i>:    integers\n       Domain <i>case</i>:  integers\n       Domain <i>cslv</i>:  integers\n       Domain <i>norm</i>:  integers\n       Domain <i>num</i>:   integers\n       Domain <i>alt</i>:   integers\n       Domain <i>fr</i>:    integers\n       Range:        null-terminated byte array\n</p>"
    },
    {
        "ustrfix": "<p>\n<b>ustrfix(</b><i>s</i>[<b>,</b><i>rep</i>]<b>)</b>\n       Description:  replaces each invalid UTF-8 sequence with a Unicode\n                     character\n        \n                     In the one-argument case, the Unicode replacement\n                     character <b>\\ufffd</b> is used.  In the two-argument case, the\n                     first Unicode character of <i>rep</i> is used.  If <i>rep</i> starts\n                     with an invalid UTF-8 sequence, then Unicode replacement\n                     character <b>\\ufffd</b> is used.  Note that an invalid UTF-8\n                     sequence can contain one byte or multiple bytes.\n</p><p>\n<b>ustrfix(char(200))</b> = <b>ustrunescape(\"\\ufffd\")</b>\n<b>ustrfix(\"ab\"+char(200)+\"cd\u00e9\", \"\")</b> = <b>\"abcd\u00e9\"</b>\n<b>ustrfix(\"ab\"+char(229)+char(174)+\"cd\u00e9\", \"\u00e9\")</b> = <b>\"ab\u00e9cd\u00e9\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>rep</i>:   Unicode character\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrto": "<p>\n<b>ustrto(</b><i>s</i><b>,</b><i>enc</i><b>,</b><i>mode</i><b>)</b> \n       Description:  converts the Unicode string <i>s</i> in UTF-8 encoding to a\n                     string in encoding <i>enc</i>\n        \n                     See <a href=\"/help.cgi?unicode_encoding\"><b>[D] unicode encoding</b></a> for details on available\n                     encodings.  Any invalid sequence in <i>s</i> is replaced with a\n                     Unicode replacement character <b>\\ufffd</b>.  <i>mode</i> controls how\n                     unsupported Unicode characters in the encoding <i>enc</i> are\n                     handled.  The possible values are <b>1</b>, which substitutes\n                     any unsupported characters with the <i>enc</i>'s substitution\n                     strings (the substitution character for both <b>ascii</b> and\n                     <b>latin1</b> is <b>char(26)</b>); <b>2</b>, which skips any unsupported\n                     characters; <b>3</b>, which stops at the first unsupported\n                     character and returns an empty string; or <b>4</b>, which\n                     replaces any unsupported character with an escaped hex\n                     digit sequence <b>\\uhhhh</b> or <b>\\Uhhhhhhhh</b>.  The hex digit\n                     sequence contains either 4 or 8 hex digits, depending if\n                     the Unicode character's code-point value is less than or\n                     greater than <b>\\uffff</b>.  Any other values are treated as <b>1</b>.\n</p><p>\n<b>ustrto(\"caf\u00e9\", \"ascii\", 1)</b> = <b>\"caf\"+char(26)</b>\n<b>ustrto(\"caf\u00e9\", \"ascii\", 2)</b> = <b>\"caf\"</b>\n<b>ustrto(\"caf\u00e9\", \"ascii\", 3)</b> = <b>\"\"</b>\n<b>ustrto(\"caf\u00e9\", \"ascii\", 4)</b> = <b>\"caf\\u00E9\"</b>\n<b>ustrto()</b> can be used to removed diacritical marks from\n                     base letters.  First, normalize the Unicode string to\n                     <b>NFD</b> form using <b>ustrnormalize()</b>, and then call <b>ustrto()</b>\n                     with value <b>2</b> to skip all non-ASCII characters.\n</p><p>\n                     Also see <a href=\"/help.cgi?ustrfrom()\"><b>ustrfrom()</b></a>.\n</p><p>\n<b>ustrto(ustrnormalize(\"caf\u00e9\", \"nfd\"), \"ascii\", 2)</b> =\n                         <b>\"cafe\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>enc</i>:   Unicode strings\n       Domain <i>mode</i>:  integers\n       Range:        strings in encoding <i>enc</i>\n</p>"
    },
    {
        "ustrfrom": "<p>\n<b>ustrfrom(</b><i>s</i><b>,</b><i>enc</i><b>,</b><i>mode</i><b>)</b> \n       Description:  converts the string <i>s</i> in encoding <i>enc</i> to a UTF-8 encoded\n                     Unicode string\n        \n                     <i>mode</i> controls how invalid byte sequences in <i>s</i> are\n                     handled.  The possible values are <b>1</b>, which substitutes\n                     an invalid byte sequence with a Unicode replacement\n                     character <b>\\ufffd</b>; <b>2</b>, which skips any invalid byte\n                     sequences; <b>3</b>, which stops at the first invalid byte\n                     sequence and returns an empty string; or <b>4</b>, which\n                     replaces any byte in an invalid sequence with an escaped\n                     hex digit sequence <b>%Xhh</b>.  Any other values are treated\n                     as <b>1</b>. A good use of value <b>4</b> is to check what invalid\n                     bytes a Unicode string <i>ust</i> contains by examining the\n                     result of <b>ustrfrom(ust, \"utf-8\", 4)</b>.\n</p><p>\n                     Also see <a href=\"/help.cgi?ustrto()\"><b>ustrto()</b></a>.\n</p><p>\n<b>ustrfrom(\"caf\"+char(233), \"latin1\", 1)</b> = <b>\"caf\u00e9\"</b>\n<b>ustrfrom(\"caf\"+char(233), \"utf-8\", 1)</b> =\n                         <b>\"caf\"+ustrunescape(\"\\ufffd\")</b>\n<b>ustrfrom(\"caf\"+char(233), \"utf-8\", 2)</b> = <b>\"caf\"</b>\n<b>ustrfrom(\"caf\"+char(233), \"utf-8\", 3)</b> = <b>\"\"</b>\n<b>ustrfrom(\"caf\"+char(233), \"utf-8\", 4)</b> = <b>\"caf%XE9\"</b>\n       Domain <i>s</i>:     strings in encoding <i>enc</i>\n       Domain <i>enc</i>:   Unicode strings\n       Domain <i>mode</i>:  integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrlen": "<p>\n<b>ustrlen(</b><i>s</i><b>)</b>\n       Description:  the number of characters in the Unicode string <i>s</i>\n</p><p>\n                     An invalid UTF-8 sequence is counted as one Unicode\n                     character.  An invalid UTF-8 sequence may contain one\n                     byte or multiple bytes.  Note that any Unicode character\n                     beyond the plain ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00e9</b> takes 2 bytes.\n</p><p>\n<b>ustrlen(\"m\u00e9diane\")</b> = <b>7</b>\n<b>strlen(\"m\u00e9diane\")</b> = <b>8</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        integers <u>&gt;</u> 0\n</p>"
    },
    {
        "ustrinvalidcnt": "<p>\n<b>ustrinvalidcnt(</b><i>s</i><b>)</b>\n       Description:  the number of invalid UTF-8 sequences in <i>s</i>\n</p><p>\n                     An invalid UTF-8 sequence may contain one byte or\n                     multiple bytes.\n</p><p>\n<b>ustrinvalidcnt(\"m\u00e9diane\")</b> = <b>0</b>\n<b>ustrinvalidcnt(\"m\u00e9diane\"+char(229))</b> = <b>1</b>\n<b>ustrinvalidcnt(\"m\u00e9diane\"+char(229)+char(174))</b> = <b>1</b>\n<b>ustrinvalidcnt(\"m\u00e9diane\"+char(174)+char(158))</b> = <b>2</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "usubstr": "<p>\n<b>usubstr(</b><i>s</i><b>,</b><i>n1</i><b>,</b><i>n2</i><b>)</b>\n       Description:  the Unicode substring of <i>s</i>, starting at <i>n1</i>, for a length\n                     of <i>n2</i>\n        \n                     If <i>n1</i> &lt; 0, <i>n1</i> is interpreted as the distance from the\n                     last character of the <i>s</i>; if <i>n2</i> = <b>.</b> (<i>missing</i>), the\n                     remaining portion of the Unicode string is returned.\n        \n                     <b>usubstr(\"m\u00e9diane\",2,3)</b> = <b>\"\u00e9di\"</b>\n<b>usubstr(\"m\u00e9diane\",-3,2)</b> = <b>\"an\"</b>\n<b>usubstr(\"m\u00e9diane\",2,.)</b> = <b>\"\u00e9diane\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n1</i>:    integers <u>&gt;</u> 1 and <u>&lt;</u> -1\n       Domain <i>n2</i>:    integers <u>&gt;</u> 1\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrleft": "<p>\n<b>ustrleft(</b><i>s</i><b>,</b><i>n</i><b>)</b>\n       Description:  the first <i>n</i> Unicode characters of the Unicode string <i>s</i>\n        \n                     An invalid UTF-8 sequence is replaced with a Unicode\n                     replacement character <b>\\ufffd</b>.\n</p><p>\n<b>ustrleft(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",3)</b> = <b>\"\u042d\u043a\u0441\"</b>\n<b>ustrleft(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",5)</b> = <b>\"\u042d\u043a\u0441\u043f\u0435\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrright": "<p>\n<b>ustrright(</b><i>s</i><b>,</b><i>n</i><b>)</b>\n       Description:  the last <i>n</i> Unicode characters of the Unicode string <i>s</i>\n</p><p>\n                     An invalid UTF-8 sequence is replaced with a Unicode\n                     replacement character <b>\\ufffd</b>.\n</p><p>\n<b>ustrright(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",3)</b> = <b>\"\u043d\u044b\u0435\"</b>\n<b>ustrright(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",5)</b> = <b>\"\u043b\u044c\u043d\u044b\u0435\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        Unicode strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use function <a href=\"/help.cgi?udsubstr()\"><b>udsubstr()</b></a> to extract a substring based on display columns.\n    Use function <a href=\"/help.cgi?substr()\"><b>substr()</b></a> to extract a substring based on bytes.\n</p>"
    },
    {
        "ustrlen": "<p>\n<b>ustrlen(</b><i>s</i><b>)</b>\n       Description:  the number of characters in the Unicode string <i>s</i>\n</p><p>\n                     An invalid UTF-8 sequence is counted as one Unicode\n                     character.  An invalid UTF-8 sequence may contain one\n                     byte or multiple bytes.  Note that any Unicode character\n                     beyond the plain ASCII range (code point greater than\n                     127) takes more than 1 byte in the UTF-8 encoding; for\n                     example, <b>\u00e9</b> takes 2 bytes.\n</p><p>\n<b>ustrlen(\"m\u00e9diane\")</b> = <b>7</b>\n<b>strlen(\"m\u00e9diane\")</b> = <b>8</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        integers <u>&gt;</u> 0\n</p>"
    },
    {
        "ustrinvalidcnt": "<p>\n<b>ustrinvalidcnt(</b><i>s</i><b>)</b>\n       Description:  the number of invalid UTF-8 sequences in <i>s</i>\n</p><p>\n                     An invalid UTF-8 sequence may contain one byte or\n                     multiple bytes.\n</p><p>\n<b>ustrinvalidcnt(\"m\u00e9diane\")</b> = <b>0</b>\n<b>ustrinvalidcnt(\"m\u00e9diane\"+char(229))</b> = <b>1</b>\n<b>ustrinvalidcnt(\"m\u00e9diane\"+char(229)+char(174))</b> = <b>1</b>\n<b>ustrinvalidcnt(\"m\u00e9diane\"+char(174)+char(158))</b> = <b>2</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "ustrupper": "<p>\n<b>ustrupper(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  uppercase all characters in string <i>s</i> under the given\n                     locale <i>loc</i>\n</p><p>\n                     If <i>loc</i> is not specified, the default locale is used.\n                     The same <i>s</i> but a different <i>loc</i> may produce different\n                     results; for example, the uppercase letter of \"i\" is \"I\"\n                     in English, but \"I\" with a dot in Turkish.  The result\n                     can be longer or shorter than the input string in bytes;\n                     for example, the uppercase form of the German letter \u00df\n                     (code point <b>\\u00df</b>) is two capital letters \"SS\".\n</p><p>\n<b>ustrupper(\"m\u00e9diane\",\"fr\")</b> = <b>\"M\u00c9DIANE\"</b>\n<b>ustrupper(\"Ru\u00dfland\", \"de\")</b> = <b>\"RUSSLAND\"</b>\n<b>ustrupper(\"istanbul\", \"tr\")</b> = <b>\"\u0130STANBUL\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   locale name\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrlower": "<p>\n<b>ustrlower(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  lowercase all characters of Unicode string <i>s</i> under the\n                     given locale <i>loc</i>\n        \n                     If <i>loc</i> is not specified, the default locale is used.\n                     The same <i>s</i> but different <i>loc</i> may produce different\n                     results; for example, the lowercase letter of \"I\" is \"i\"\n                     in English but a dotless \"i\" in Turkish.  The same\n                     Unicode character can be mapped to different Unicode\n                     characters based on its surrounding characters; for\n                     example, Greek capital letter sigma \u03a3 has two\n                     lowercases: \u03c2, if it is the final character of a word,\n                     or \u03c3.  The result can be longer or shorter than the\n                     input Unicode string in bytes.\n</p><p>\n<b>ustrlower(\"M\u00c9DIANE\",\"fr\")</b> = <b>\"m\u00e9diane\"</b>\n<b>ustrlower(\"ISTANBUL\",\"tr\")</b> = <b>\"\u0131stanbul\"</b>\n<b>ustrlower(\"\u1f48\u0394\u03a5\u03a3\u03a3\u0395\u038e\u03a3\")</b> = <b>\"\u1f40\u03b4\u03c5\u03c3\u03c3\u03b5\u03cd\u03c2\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   locale name\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrtitle": "<p>\n<b>ustrtitle(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  a string with the first characters of Unicode words\n                     titlecased and other characters lowercased\n</p><p>\n                     If <i>loc</i> is not specified, the default locale is used.\n                     Note that a Unicode word is different from a Stata word\n                     produced by function <a href=\"/help.cgi?word()\"><b>word()</b></a>.  The Stata word is a\n                     space-separated token.  A Unicode word is a language\n                     unit based on either a set of word-boundary rules or\n                     dictionaries for some languages (Chinese, Japanese, and\n                     Thai).  The titlecase is also locale dependent and\n                     context sensitive; for example, lowercase \"ij\" is\n                     considered a digraph in Dutch. Its titlecase is \"IJ\".\n</p><p>\n<b>ustrtitle(\"vous \u00eates\", \"fr\")</b> = <b>\"Vous \u00cates\"</b>\n<b>ustrtitle(\"mR. joHn a. sMitH\")</b> = <b>\"Mr. John A. Smith\"</b>\n<b>ustrtitle(\"ijmuiden\", \"en\")</b> = <b>\"Ijmuiden\"</b>\n<b>ustrtitle(\"ijmuiden\", \"nl\")</b> = <b>\"IJmuiden\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        Unicode strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?strupper()\"><b>strupper()</b></a> and <a href=\"/help.cgi?strlower()\"><b>strlower()</b></a> to convert only ASCII letters to\n    uppercase and lowercase.\n</p>"
    },
    {
        "ustrtrim": "<p>\n<b>ustrtrim(</b><i>s</i><b>)</b>\n       Description:  removes leading and trailing Unicode whitespace\n                     characters and blanks from the Unicode string <i>s</i>\n</p><p>\n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     considered whitespace characters in the Unicode\n                     standard.\n</p><p>\n<b>ustrtrim(\" this \")</b> = <b>\"this\"</b>\n<b>ustrtrim(char(11)+\" this \")+char(13)</b> = <b>\"this\"</b>\n<b>ustrtrim(\" this \"+ustrunescape(\"\\u2000\"))</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrltrim": "<p>\n<b>ustrltrim(</b><i>s</i><b>)</b>\n       Description:  removes the leading Unicode whitespace characters and\n                     blanks from the Unicode string <i>s</i>\n        \n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     whitespace characters in Unicode standard.\n</p><p>\n<b>ustrltrim(\" this\")</b> = <b>\"this\"</b>\n<b>ustrltrim(char(9)+\"this\")</b> = <b>\"this\"</b>\n<b>ustrltrim(ustrunescape(\"\\u1680\")+\" this\")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrrtrim": "<p>\n<b>ustrrtrim(</b><i>s</i><b>)</b>\n       Description:  remove trailing Unicode whitespace characters and blanks\n                     from the Unicode string <i>s</i>\n        \n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     considered whitespace characters in the Unicode\n                     standard.\n</p><p>\n<b>ustrrtrim(\"this \")</b> = <b>\"this\"</b>\n<b>ustrltrim(\"this\"+char(10))</b> = <b>\"this\"</b>\n<b>ustrrtrim(\"this \"+ustrunescape(\"\\u2000\"))</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p><p>\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?strtrim()\"><b>strtrim()</b></a>, <a href=\"/help.cgi?stritrim()\"><b>stritrim()</b></a>, <a href=\"/help.cgi?strltrim()\"><b>strltrim()</b></a>, and <a href=\"/help.cgi?strrtrim()\"><b>strrtrim()</b></a> to trim\n    only the ASCII space character <b>char(32)</b>.\n</p>"
    },
    {
        "ustrnormalize": "<p>\n<b>ustrnormalize(</b><i>s</i><b>,</b><i>norm</i><b>)</b>\n       Description:  normalizes Unicode string <i>s</i> to one of the five\n                     normalization forms specified by <i>norm</i>\n</p><p>\n                     The normalization forms are <b>nfc</b>, <b>nfd</b>, <b>nfkc</b>, <b>nfkd</b>, or\n                     <b>nfkcc</b>.  The function returns an empty string for any\n                     other value of <i>norm</i>.  Unicode normalization removes the\n                     Unicode string differences caused by Unicode character\n                     equivalence.  <b>nfc</b> specifies <b>Normalization Form C</b>, which\n                     normalizes decomposed Unicode code points to a\n                     composited form.  <b>nfd</b> specifies <b>Normalization Form D</b>,\n                     which normalizes composited Unicode code points to a\n                     decomposed form.  <b>nfc</b> and <b>nfd</b> produce canonical\n                     equivalent form.  <b>nfkc</b> and <b>nfkd</b> are similar to <b>nfc</b> and\n                     <b>nfd</b> but produce compatibility equivalent forms.  <b>nfkcc</b>\n                     specifies <b>nfkc</b> with casefolding.  This normalization and\n                     casefolding implement the Unicode Character Database.\n</p><p>\n                     In the Unicode standard, both \"i\" (<b>\\u0069</b> followed by a\n                     diaeresis <b>\\u0308</b>) and the composite character <b>\\u00ef</b>\n                     represent \"i\" with 2 dots as in \"na\u00efve\".  Hence, the\n                     code-point sequence <b>\\u0069\\u0308</b> and the code point\n                     <b>\\u00ef</b> are considered Unicode equivalent.  According to\n                     the Unicode standard, they should be treated as the same\n                     single character in Unicode string operations, such as\n                     in display, comparison, and selection.  However, Stata\n                     does not support multiple code-point characters; each\n                     code point is considered a separate Unicode character.\n                     Hence, <b>\\u0069\\u0308</b> is displayed as two characters in\n                     the Results window.  <b>ustrnormalize()</b> can be used with\n                     <b>\"nfc\"</b> to normalize <b>\\u0069\\u0308</b> to the canonical\n                     equivalent composited code point <b>\\u00ef</b>.\n</p><p>\n<b>ustrnormalize(ustrunescape(\"\\u0069\\u0308\"), \"nfc\")</b> = <b>\"\u00ef\"</b>\n</p><p>\n                     The decomposed form <b>nfd</b> can be used to removed\n                     diacritical marks from base letters.  First, normalize\n                     the Unicode string to canonical decomposed form, and\n                     then call <a href=\"/help.cgi?f_ustrto\"><b>ustrto()</b></a> with mode <b>skip</b> to skip all non-ASCII\n                     characters.\n</p><p>\n                     Also see <a href=\"/help.cgi?f_ustrfrom\"><b>ustrfrom()</b></a>.\n</p><p>\n<b>ustrto(ustrnormalize(\"caf\u00e9\", \"nfd\"), \"ascii\", 2)</b> =\n                         <b>\"cafe\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>norm</i>:  Unicode strings\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrpos": "<p>\n<b>ustrpos(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>n</i>]<b>)</b>\n       Description:  the position in <i>s1</i> at which <i>s2</i> is first found;\n                     otherwise, <b>0</b>\n        \n                     If <i>n</i> is specified and is greater than 0, the search\n                     starts at the <i>n</i>th Unicode character of <i>s1</i>.  An invalid\n                     UTF-8 sequence in either <i>s1</i> or <i>s2</i> is replaced with a\n                     Unicode replacement character <b>\\ufffd</b> before the search\n                     is performed.\n</p><p>\n<b>ustrpos(\"m\u00e9diane\", \"\u00e9di\")</b> = <b>2</b>\n<b>ustrpos(\"m\u00e9diane\", \"\u00e9di\", 3)</b> = <b>0</b>\n<b>ustrpos(\"m\u00e9diane\", \"\u00e9ci\")</b> = <b>0</b>\n       Domain <i>s1</i>:    Unicode strings (to be searched)\n       Domain <i>s2</i>:    Unicode strings (to search for)\n       Domain <i>n</i>:     integers\n       Range:        integers\n</p>"
    },
    {
        "ustrrpos": "<p>\n<b>ustrrpos(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>n</i>]<b>)</b>\n       Description:  the position in <i>s1</i> at which <i>s2</i> is last found; otherwise,\n                     <b>0</b>\n        \n                     If <i>n</i> is specified and is greater than 0, only the part\n                     between the first Unicode character and the <i>n</i>th Unicode\n                     character of <i>s1</i> is searched.  An invalid UTF-8 sequence\n                     in either <i>s1</i> or <i>s2</i> is replaced with a Unicode\n                     replacement character <b>\\ufffd</b> before the search is\n                     performed.\n</p><p>\n<b>ustrrpos(\"enchant\u00e9\", \"n\")</b> = <b>6</b>\n<b>ustrrpos(\"enchant\u00e9\", \"n\", 5)</b> = <b>2</b>\n<b>ustrrpos(\"enchant\u00e9\", \"n\", 6)</b> = <b>6</b>\n<b>ustrrpos(\"enchant\u00e9\", \"ne\")</b> = <b>0</b>\n       Domain <i>s1</i>:    Unicode strings (to be searched)\n       Domain <i>s2</i>:    Unicode strings (to search for)\n       Domain <i>n</i>:     integers\n       Range:        integers\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?strpos()\"><b>strpos()</b></a> and <a href=\"/help.cgi?strrpos()\"><b>strrpos()</b></a> to find the byte-based location of a\n    substring in a string.\n</p>"
    },
    {
        "ustrregexm": "<p>\n<b>ustrregexm(</b><i>s</i><b>,</b><i>re</i>[<b>,</b><i>noc</i>]<b>)</b> \n       Description:  performs a match of a regular expression and evaluates\n                     to <b>1</b> if regular expression <i>re</i> is satisfied by the\n                     Unicode string <i>s</i>; otherwise, <b>0</b>\n</p><p>\n                     If <i>noc</i> is specified and not 0, a case-insensitive match\n                     is performed.  The function may return a negative\n                     integer if an error occurs.\n</p><p>\n<b>ustrregexm(\"12345\", \"([0-9]){5}\")</b> = <b>1</b>\n<b>ustrregexm(\"de TR\u00c8S pr\u00e8s\", \"r\u00e8s\")</b> = <b>1</b>\n<b>ustrregexm(\"de TR\u00c8S pr\u00e8s\", \"R\u00e8s\")</b> = <b>0</b>\n<b>ustrregexm(\"de TR\u00c8S pr\u00e8s\", \"R\u00e8s\", 1)</b> = <b>1</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>re</i>:    Unicode regular expressions\n       Domain <i>noc</i>:   integers\n       Range:        integers\n</p>"
    },
    {
        "ustrregexrf": "<p>\n<b>ustrregexrf(</b><i>s1</i><b>,</b><i>re</i><b>,</b><i>s2</i>[<b>,</b><i>noc</i>]<b>)</b>\n       Description:  replaces the first substring within the Unicode string\n                     <i>s1</i> that matches <i>re</i> with <i>s2</i> and returns the resulting\n                     string\n        \n                     If <i>noc</i> is specified and not 0, a case-insensitive match\n                     is performed. The function may return an empty string if\n                     an error occurs.\n</p><p>\n<b>ustrregexrf(\"tr\u00e8s pr\u00e8s\", \"r\u00e8s\", \"X\")</b> = <b>\"tX pr\u00e8s\"</b>\n<b>ustrregexrf(\"TR\u00c8S pr\u00e8s\", \"R\u00e8s\", \"X\")</b> = <b>\"TR\u00c8S pr\u00e8s\"</b>\n<b>ustrregexrf(\"TR\u00c8S pr\u00e8s\", \"R\u00e8s\", \"X\", 1)</b> = <b>\"TX pr\u00e8s\"</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>re</i>:    Unicode regular expressions\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>noc</i>:   integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrregexra": "<p>\n<b>ustrregexra(</b><i>s1</i><b>,</b><i>re</i><b>,</b><i>s2</i>[<b>,</b><i>noc</i>]<b>)</b>\n       Description:  replaces all substrings within the Unicode string <i>s1</i>\n                     that match <i>re</i> with <i>s2</i> and returns the resulting string\n        \n                     If <i>noc</i> is specified and not 0, a case-insensitive match\n                     is performed.  The function may return an empty string\n                     if an error occurs.\n</p><p>\n<b>ustrregexra(\"tr\u00e8s pr\u00e8s\", \"r\u00e8s\", \"X\")</b> = <b>\"tX pX\"</b>\n<b>ustrregexra(\"TR\u00c8S pr\u00e8s\", \"R\u00e8s\", \"X\")</b> = <b>\"TR\u00c8S pr\u00e8s\"</b>\n<b>ustrregexra(\"TR\u00c8S pr\u00e8s\", \"R\u00e8s\", \"X\", 1)</b> = <b>\"TX pX\"</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>re</i>:    Unicode regular expressions\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>noc</i>:   integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrregexs": "<p>\n<b>ustrregexs(</b><i>n</i><b>)</b>\n       Description:  subexpression <i>n</i> from a previous <b>ustrregexm()</b> match\n        \n                     Subexpression 0 is reserved for the entire string that\n                     satisfied the regular expression. The function may\n                     return an empty string if <i>n</i> is larger than the maximum\n                     count of subexpressions from the previous match or if an\n                     error occurs.\n       Domain <i>n</i>:     integers <u>&gt;</u> 0\n       Range:        strings\n</p>"
    },
    {
        "ustrreverse": "<p>\n<b>ustrreverse(</b><i>s</i><b>)</b>\n       Description:  reverses the Unicode string <i>s</i>\n</p><p>\n                     The function does not take Unicode character equivalence\n                     into consideration.  Hence, a Unicode character in a\n                     decomposed form will not be reversed as one unit.  An\n                     invalid UTF-8 sequence is replaced with a Unicode\n                     replacement character <b>\\ufffd</b>.\n</p><p>\n<b>ustrreverse(\"m\u00e9diane\")</b> = <b>\"enaid\u00e9m\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        reversed Unicode strings\n</p>"
    },
    {
        "usubstr": "<p>\n<b>usubstr(</b><i>s</i><b>,</b><i>n1</i><b>,</b><i>n2</i><b>)</b>\n       Description:  the Unicode substring of <i>s</i>, starting at <i>n1</i>, for a length\n                     of <i>n2</i>\n        \n                     If <i>n1</i> &lt; 0, <i>n1</i> is interpreted as the distance from the\n                     last character of the <i>s</i>; if <i>n2</i> = <b>.</b> (<i>missing</i>), the\n                     remaining portion of the Unicode string is returned.\n        \n                     <b>usubstr(\"m\u00e9diane\",2,3)</b> = <b>\"\u00e9di\"</b>\n<b>usubstr(\"m\u00e9diane\",-3,2)</b> = <b>\"an\"</b>\n<b>usubstr(\"m\u00e9diane\",2,.)</b> = <b>\"\u00e9diane\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n1</i>:    integers <u>&gt;</u> 1 and <u>&lt;</u> -1\n       Domain <i>n2</i>:    integers <u>&gt;</u> 1\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrleft": "<p>\n<b>ustrleft(</b><i>s</i><b>,</b><i>n</i><b>)</b>\n       Description:  the first <i>n</i> Unicode characters of the Unicode string <i>s</i>\n        \n                     An invalid UTF-8 sequence is replaced with a Unicode\n                     replacement character <b>\\ufffd</b>.\n</p><p>\n<b>ustrleft(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",3)</b> = <b>\"\u042d\u043a\u0441\"</b>\n<b>ustrleft(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",5)</b> = <b>\"\u042d\u043a\u0441\u043f\u0435\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrright": "<p>\n<b>ustrright(</b><i>s</i><b>,</b><i>n</i><b>)</b>\n       Description:  the last <i>n</i> Unicode characters of the Unicode string <i>s</i>\n</p><p>\n                     An invalid UTF-8 sequence is replaced with a Unicode\n                     replacement character <b>\\ufffd</b>.\n</p><p>\n<b>ustrright(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",3)</b> = <b>\"\u043d\u044b\u0435\"</b>\n<b>ustrright(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",5)</b> = <b>\"\u043b\u044c\u043d\u044b\u0435\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        Unicode strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use function <a href=\"/help.cgi?udsubstr()\"><b>udsubstr()</b></a> to extract a substring based on display columns.\n    Use function <a href=\"/help.cgi?substr()\"><b>substr()</b></a> to extract a substring based on bytes.\n</p>"
    },
    {
        "ustrpos": "<p>\n<b>ustrpos(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>n</i>]<b>)</b>\n       Description:  the position in <i>s1</i> at which <i>s2</i> is first found;\n                     otherwise, <b>0</b>\n        \n                     If <i>n</i> is specified and is greater than 0, the search\n                     starts at the <i>n</i>th Unicode character of <i>s1</i>.  An invalid\n                     UTF-8 sequence in either <i>s1</i> or <i>s2</i> is replaced with a\n                     Unicode replacement character <b>\\ufffd</b> before the search\n                     is performed.\n</p><p>\n<b>ustrpos(\"m\u00e9diane\", \"\u00e9di\")</b> = <b>2</b>\n<b>ustrpos(\"m\u00e9diane\", \"\u00e9di\", 3)</b> = <b>0</b>\n<b>ustrpos(\"m\u00e9diane\", \"\u00e9ci\")</b> = <b>0</b>\n       Domain <i>s1</i>:    Unicode strings (to be searched)\n       Domain <i>s2</i>:    Unicode strings (to search for)\n       Domain <i>n</i>:     integers\n       Range:        integers\n</p>"
    },
    {
        "ustrrpos": "<p>\n<b>ustrrpos(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>n</i>]<b>)</b>\n       Description:  the position in <i>s1</i> at which <i>s2</i> is last found; otherwise,\n                     <b>0</b>\n        \n                     If <i>n</i> is specified and is greater than 0, only the part\n                     between the first Unicode character and the <i>n</i>th Unicode\n                     character of <i>s1</i> is searched.  An invalid UTF-8 sequence\n                     in either <i>s1</i> or <i>s2</i> is replaced with a Unicode\n                     replacement character <b>\\ufffd</b> before the search is\n                     performed.\n</p><p>\n<b>ustrrpos(\"enchant\u00e9\", \"n\")</b> = <b>6</b>\n<b>ustrrpos(\"enchant\u00e9\", \"n\", 5)</b> = <b>2</b>\n<b>ustrrpos(\"enchant\u00e9\", \"n\", 6)</b> = <b>6</b>\n<b>ustrrpos(\"enchant\u00e9\", \"ne\")</b> = <b>0</b>\n       Domain <i>s1</i>:    Unicode strings (to be searched)\n       Domain <i>s2</i>:    Unicode strings (to search for)\n       Domain <i>n</i>:     integers\n       Range:        integers\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?strpos()\"><b>strpos()</b></a> and <a href=\"/help.cgi?strrpos()\"><b>strrpos()</b></a> to find the byte-based location of a\n    substring in a string.\n</p>"
    },
    {
        "ustrtrim": "<p>\n<b>ustrtrim(</b><i>s</i><b>)</b>\n       Description:  removes leading and trailing Unicode whitespace\n                     characters and blanks from the Unicode string <i>s</i>\n</p><p>\n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     considered whitespace characters in the Unicode\n                     standard.\n</p><p>\n<b>ustrtrim(\" this \")</b> = <b>\"this\"</b>\n<b>ustrtrim(char(11)+\" this \")+char(13)</b> = <b>\"this\"</b>\n<b>ustrtrim(\" this \"+ustrunescape(\"\\u2000\"))</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrltrim": "<p>\n<b>ustrltrim(</b><i>s</i><b>)</b>\n       Description:  removes the leading Unicode whitespace characters and\n                     blanks from the Unicode string <i>s</i>\n        \n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     whitespace characters in Unicode standard.\n</p><p>\n<b>ustrltrim(\" this\")</b> = <b>\"this\"</b>\n<b>ustrltrim(char(9)+\"this\")</b> = <b>\"this\"</b>\n<b>ustrltrim(ustrunescape(\"\\u1680\")+\" this\")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrrtrim": "<p>\n<b>ustrrtrim(</b><i>s</i><b>)</b>\n       Description:  remove trailing Unicode whitespace characters and blanks\n                     from the Unicode string <i>s</i>\n        \n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     considered whitespace characters in the Unicode\n                     standard.\n</p><p>\n<b>ustrrtrim(\"this \")</b> = <b>\"this\"</b>\n<b>ustrltrim(\"this\"+char(10))</b> = <b>\"this\"</b>\n<b>ustrrtrim(\"this \"+ustrunescape(\"\\u2000\"))</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p><p>\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?strtrim()\"><b>strtrim()</b></a>, <a href=\"/help.cgi?stritrim()\"><b>stritrim()</b></a>, <a href=\"/help.cgi?strltrim()\"><b>strltrim()</b></a>, and <a href=\"/help.cgi?strrtrim()\"><b>strrtrim()</b></a> to trim\n    only the ASCII space character <b>char(32)</b>.\n</p>"
    },
    {
        "ustrcompare": "<p>\n<b>ustrcompare(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  compares two Unicode strings\n</p><p>\n                     The function returns <b>-1</b>, <b>1</b>, or <b>0</b> if <i>s1</i> is less than,\n                     greater than, or equal to <i>s2</i>.  The function may return a\n                     negative number other than -1 if an error happens.  The\n                     comparison is locale dependent.  For example, z &lt; \u00f6 in\n                     Swedish but \u00f6 &lt; z in German.  If <i>loc</i> is not specified,\n                     the default locale is used.  The comparison is diacritic\n                     and case sensitive.  If you need different behavior, for\n                     example, case-insensitive comparison, you should use the\n                     extended comparison function <b>ustrcompareex()</b>.  Unicode\n                     string comparison compares Unicode strings in a\n                     language-sensitive manner.  On the other hand, the <a href=\"/help.cgi?sort\"><b>sort</b></a>\n                     command compares strings in code-point (binary) order.\n                     For example, uppercase \"Z\" (code-point value 90) comes\n                     before lowercase \"a\" (code-point value 97) in code-point\n                     order but comes after \"a\" in any English dictionary.\n</p><p>\n<b>ustrcompare(\"z\", \"\u00f6\", \"sv\")</b> = <b>-1</b>\n<b>ustrcompare(\"z\", \"\u00f6\", \"de\")</b> =<b> 1</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "ustrsortkey": "<p>\n<b>ustrsortkey(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  generates a null-terminated byte array that can be used\n                     by the <a href=\"/help.cgi?sort\"><b>sort</b></a> command to produce the same order as\n                     <b>ustrcompare()</b>\n</p><p>\n                     The function may return an empty array if an error\n                     occurs.  The result is locale dependent.  If <i>loc</i> is not\n                     specified, the default locale is used.  The result is\n                     also diacritic and case sensitive.  If you need\n                     different behavior, for example, case-insensitive\n                     results, you should use the extended function\n                     <b>ustrsortkeyex()</b>. See <b>[U] 12.4.2.5 Sorting strings</b>\n<b>containing Unicode characters</b> for details and examples.\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        null-terminated byte array\n</p>"
    },
    {
        "ustrcompareex": "<p>\n<b>ustrcompareex(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>loc</i><b>,</b><i>st</i><b>,</b><i>case</i><b>,</b><i>cslv</i><b>,</b><i>norm</i><b>,</b><i>num</i><b>,</b><i>alt</i><b>,</b><i>fr</i><b>)</b>\n       Description:  compares two Unicode strings\n</p><p>\n                     The function returns <b>-1</b>, <b>1</b>, or <b>0</b> if <i>s1</i> is less than,\n                     greater than, or equal to <i>s2</i>.  The function may return a\n                     negative number other than <b>-1</b> if an error occurs.  The\n                     comparison is locale dependent.  For example, z &lt; \u00f6 in\n                     Swedish but \u00f6 &lt; z in German.  If <i>loc</i> is not specified,\n                     the default locale is used.\n</p><p>\n<i>st</i> controls the strength of the comparison.  Possible\n                     values are <b>1</b> (primary), <b>2</b> (secondary), <b>3</b> (tertiary), <b>4</b>\n                     (quaternary), or <b>5</b> (identical).  <b>-1</b> means to use the\n                     default value for the locale.  Any other numbers are\n                     treated as tertiary.  The primary difference represents\n                     base letter differences; for example, letter \"a\" and\n                     letter \"b\" have primary differences.  The secondary\n                     difference represents diacritical differences on the\n                     same base letter; for example, letters \"a\" and \"\u00e4\" have\n                     secondary differences.  The tertiary difference\n                     represents case differences of the same base letter; for\n                     example, letters \"a\" and \"A\" have tertiary differences.\n                     Quaternary strength is useful to distinguish between\n                     Katakana and Hiragana for the JIS 4061 collation\n                     standard.  Identical strength is essentially the\n                     code-point order of the string, hence, is rarely useful.\n</p><p>\n<b>ustrcompareex(\"caf\u00e9\",\"cafe\",\"fr\", 1, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>0</b>\n<b>ustrcompareex(\"caf\u00e9\",\"cafe\",\"fr\", 2, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", 3, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n</p><p>\n<i>case</i> controls the uppercase and lowercase letter order.\n                     Possible values are <b>0</b> (use order specified in tertiary\n                     strength), <b>1</b> (uppercase first), or <b>2</b> (lowercase first).\n                     <b>-1</b> means to use the default value for the locale.  Any\n                     other values are treated as <b>0</b>.\n</p><p>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", -1, 1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>-1</b>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", -1, 2, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n</p><p>\n<i>cslv</i> controls whether an extra case level between the\n                     secondary level and the tertiary level is generated.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  Combining this setting to be \"on\" and the\n                     strength setting to be primary can achieve the effect of\n                     ignoring the diacritical differences but preserving the\n                     case differences.  If the setting is \"on\", the result is\n                     also affected by the <i>case</i> setting.\n</p><p>\n<b>ustrcompareex(\"caf\u00e9\",\"Cafe\",\"fr\", 1, -1, 1, -1, -1, -1,</b>\n<b>-1)</b>=<b>-1</b>\n<b>ustrcompareex(\"caf\u00e9\",\"Cafe\",\"fr\", 1, 1, 1, -1, -1, -1,</b>\n<b>-1)</b>=<b>1</b>\n</p><p>\n<i>norm</i> controls whether the normalization check and\n                     normalizations are performed.  Possible values are <b>0</b>\n                     (off) or <b>1</b> (on).  <b>-1</b> means to use the default value for\n                     the locale.  Any other values are treated as <b>0</b>.  Most\n                     languages do not require normalization for comparison.\n                     Normalization is needed in languages that use multiple\n                     combining characters such as Arabic, ancient Greek, or\n                     Hebrew.\n</p><p>\n<i>num</i> controls how contiguous digit substrings are sorted.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  If the setting is \"on\", substrings\n                     consisting of digits are sorted based on the numeric\n                     value.  For example, \"100\" is after value \"20\" instead\n                     of before it.  Note that the digit substring is limited\n                     to 254 digits, and plus/minus signs, decimals, or\n                     exponents are not supported.\n</p><p>\n<b>ustrcompareex(\"100\", \"20\",\"en\", -1, -1, -1, -1, 0, -1,</b>\n<b>-1)</b>=<b>-1</b>\n<b>ustrcompareex(\"100\", \"20\",\"en\", -1, -1, -1, -1, 1, -1,</b>\n<b>-1)</b>=<b>1</b>\n</p><p>\n<i>alt</i> controls how spaces and punctuation characters are\n                     handled.  Possible values are <b>0</b> (use primary strength)\n                     or <b>1</b> (alternative handling).  Any other values are\n                     treated as <b>0</b>.  If the setting is <b>1</b> (alternative\n                     handling), \"onsite\", \"on-site\", and \"on site\" are\n                     considered equals.\n</p><p>\n<b>ustrcompareex(\"onsite\", \"on-site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 1, -1)</b>=<b>0</b>\n<b>ustrcompareex(\"onsite\", \"on site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 1, -1)</b>=<b>0</b>\n<b>ustrcompareex(\"onsite\", \"on-site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 0, -1)</b>=<b>1</b>\n</p><p>\n<i>fr</i> controls the direction of the secondary strength.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  All other values are\n                     treated as \"off\".  If the setting is \"on\", the\n                     diacritical letters are sorted backward.  Note that the\n                     setting is \"on\" by default only for Canadian French\n                     (locale <b>fr_CA</b>).\n</p><p>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,0)</b> = <b>-1</b>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,1)</b> = <b>1</b>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,-1)</b> = <b>1</b>\n<b>ustrcompareex(\"cot\u00e9\", \"c\u00f4te\",\"fr\",-1,-1,-1,-1,-1,-1,-1)</b>\n                         = <b>1</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>st</i>:    integers\n       Domain <i>case</i>:  integers\n       Domain <i>cslv</i>:  integers\n       Domain <i>norm</i>:  integers\n       Domain <i>num</i>:   integers\n       Domain <i>alt</i>:   integers\n       Domain <i>fr</i>:    integers\n       Range:        integers\n</p>"
    },
    {
        "ustrsortkeyex": "<p>\n<b>ustrsortkeyex(</b><i>s</i><b>,</b><i>loc</i><b>,</b><i>st</i><b>,</b><i>case</i><b>,</b><i>cslv</i><b>,</b><i>norm</i><b>,</b><i>num</i><b>,</b><i>alt</i><b>,</b><i>fr</i><b>)</b>\n       Description:  generates a null-terminated byte array that can be used\n                     by the <a href=\"/help.cgi?sort\"><b>sort</b></a> command to produce the same order as\n                     <b>ustrcompare()</b>\n        \n                     The function may return an empty array if an error\n                     occurs. The result is locale dependent.  If <i>loc</i> is not\n                     specified, the default locale is used.  See <b>[U] 12.4.2.5</b>\n<b>Sorting strings containing Unicode characters</b> for\n                     details and examples.\n</p><p>\n<i>st</i> controls the strength of the comparison.  Possible\n                     values are <b>1</b> (primary), <b>2</b> (secondary), <b>3</b> (tertiary), <b>4</b>\n                     (quaternary), or <b>5</b> (identical).  <b>-1</b> means to use the\n                     default value for the locale.  Any other numbers are\n                     treated as tertiary.  The primary difference represents\n                     base letter differences; for example, letter \"a\" and\n                     letter \"b\" have primary differences.  The secondary\n                     difference represents diacritical differences on the\n                     same base letter; for example, letters \"a\" and \"\u00e4\" have\n                     secondary differences.  The tertiary difference\n                     represents case differences of the same base letters;\n                     for example, letters \"a\" and \"A\" have tertiary\n                     differences.  Quaternary strength is useful to\n                     distinguish between Katakana and Hiragana for the JIS\n                     4061 collation standard.  Identical strength is\n                     essentially the code-point order of the string and,\n                     hence, is rarely useful.\n</p><p>\n<i>case</i> controls the uppercase and lowercase letter order.\n                     Possible values are <b>0</b> (use order specified in tertiary\n                     strength), <b>1</b> (uppercase first), or <b>2</b> (lowercase first).\n                     <b>-1</b> means to use the default value for the locale.  Any\n                     other values are treated as <b>0</b>.\n</p><p>\n<i>cslv</i> controls if an extra case level between the\n                     secondary level and the tertiary level is generated.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  Combining this setting to be \"on\" and the\n                     strength setting to be primary can achieve the effect of\n                     ignoring the diacritical differences but preserving the\n                     case differences.  If the setting is \"on\", the result is\n                     also affected by the <i>case</i> setting.\n</p><p>\n<i>norm</i> controls whether the normalization check and\n                     normalizations are performed.  Possible values are <b>0</b>\n                     (off) or <b>1</b> (on).  <b>-1</b> means to use the default value for\n                     the locale.  Any other values are treated as <b>0</b>.  Most\n                     languages do not require normalization for comparison.\n                     Normalization is needed in languages that use multiple\n                     combining characters such as Arabic, ancient Greek, or\n                     Hebrew.\n</p><p>\n<i>num</i> controls how contiguous digit substrings are sorted.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  If the setting is \"on\", substrings\n                     consisting of digits are sorted based on the numeric\n                     value.  For example, \"100\" is after \"20\" instead of\n                     before it.  Note that the digit substring is limited to\n                     254 digits, and plus/minus signs, decimals, or exponents\n                     are not supported.\n</p><p>\n<i>alt</i> controls how spaces and punctuation characters are\n                     handled.  Possible values are <b>0</b> (use primary strength)\n                     or <b>1</b> (alternative handling).  Any other values are\n                     treated as <b>0</b>.  If the setting is <b>1</b> (alternative\n                     handling), \"onsite\", \"on-site\", and \"on site\" are\n                     considered equals.\n</p><p>\n<i>fr</i> controls the direction of the secondary strength.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  All other values are\n                     treated as \"off\".  If the setting is \"on\", the\n                     diacritical letters are sorted backward.  Note that the\n                     setting is \"on\" by default only for Canadian French\n                     (locale <b>fr_CA</b>).\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>st</i>:    integers\n       Domain <i>case</i>:  integers\n       Domain <i>cslv</i>:  integers\n       Domain <i>norm</i>:  integers\n       Domain <i>num</i>:   integers\n       Domain <i>alt</i>:   integers\n       Domain <i>fr</i>:    integers\n       Range:        null-terminated byte array\n</p>"
    },
    {
        "ustrcompare": "<p>\n<b>ustrcompare(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  compares two Unicode strings\n</p><p>\n                     The function returns <b>-1</b>, <b>1</b>, or <b>0</b> if <i>s1</i> is less than,\n                     greater than, or equal to <i>s2</i>.  The function may return a\n                     negative number other than -1 if an error happens.  The\n                     comparison is locale dependent.  For example, z &lt; \u00f6 in\n                     Swedish but \u00f6 &lt; z in German.  If <i>loc</i> is not specified,\n                     the default locale is used.  The comparison is diacritic\n                     and case sensitive.  If you need different behavior, for\n                     example, case-insensitive comparison, you should use the\n                     extended comparison function <b>ustrcompareex()</b>.  Unicode\n                     string comparison compares Unicode strings in a\n                     language-sensitive manner.  On the other hand, the <a href=\"/help.cgi?sort\"><b>sort</b></a>\n                     command compares strings in code-point (binary) order.\n                     For example, uppercase \"Z\" (code-point value 90) comes\n                     before lowercase \"a\" (code-point value 97) in code-point\n                     order but comes after \"a\" in any English dictionary.\n</p><p>\n<b>ustrcompare(\"z\", \"\u00f6\", \"sv\")</b> = <b>-1</b>\n<b>ustrcompare(\"z\", \"\u00f6\", \"de\")</b> =<b> 1</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "ustrsortkey": "<p>\n<b>ustrsortkey(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  generates a null-terminated byte array that can be used\n                     by the <a href=\"/help.cgi?sort\"><b>sort</b></a> command to produce the same order as\n                     <b>ustrcompare()</b>\n</p><p>\n                     The function may return an empty array if an error\n                     occurs.  The result is locale dependent.  If <i>loc</i> is not\n                     specified, the default locale is used.  The result is\n                     also diacritic and case sensitive.  If you need\n                     different behavior, for example, case-insensitive\n                     results, you should use the extended function\n                     <b>ustrsortkeyex()</b>. See <b>[U] 12.4.2.5 Sorting strings</b>\n<b>containing Unicode characters</b> for details and examples.\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        null-terminated byte array\n</p>"
    },
    {
        "ustrcompareex": "<p>\n<b>ustrcompareex(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>loc</i><b>,</b><i>st</i><b>,</b><i>case</i><b>,</b><i>cslv</i><b>,</b><i>norm</i><b>,</b><i>num</i><b>,</b><i>alt</i><b>,</b><i>fr</i><b>)</b>\n       Description:  compares two Unicode strings\n</p><p>\n                     The function returns <b>-1</b>, <b>1</b>, or <b>0</b> if <i>s1</i> is less than,\n                     greater than, or equal to <i>s2</i>.  The function may return a\n                     negative number other than <b>-1</b> if an error occurs.  The\n                     comparison is locale dependent.  For example, z &lt; \u00f6 in\n                     Swedish but \u00f6 &lt; z in German.  If <i>loc</i> is not specified,\n                     the default locale is used.\n</p><p>\n<i>st</i> controls the strength of the comparison.  Possible\n                     values are <b>1</b> (primary), <b>2</b> (secondary), <b>3</b> (tertiary), <b>4</b>\n                     (quaternary), or <b>5</b> (identical).  <b>-1</b> means to use the\n                     default value for the locale.  Any other numbers are\n                     treated as tertiary.  The primary difference represents\n                     base letter differences; for example, letter \"a\" and\n                     letter \"b\" have primary differences.  The secondary\n                     difference represents diacritical differences on the\n                     same base letter; for example, letters \"a\" and \"\u00e4\" have\n                     secondary differences.  The tertiary difference\n                     represents case differences of the same base letter; for\n                     example, letters \"a\" and \"A\" have tertiary differences.\n                     Quaternary strength is useful to distinguish between\n                     Katakana and Hiragana for the JIS 4061 collation\n                     standard.  Identical strength is essentially the\n                     code-point order of the string, hence, is rarely useful.\n</p><p>\n<b>ustrcompareex(\"caf\u00e9\",\"cafe\",\"fr\", 1, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>0</b>\n<b>ustrcompareex(\"caf\u00e9\",\"cafe\",\"fr\", 2, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", 3, -1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n</p><p>\n<i>case</i> controls the uppercase and lowercase letter order.\n                     Possible values are <b>0</b> (use order specified in tertiary\n                     strength), <b>1</b> (uppercase first), or <b>2</b> (lowercase first).\n                     <b>-1</b> means to use the default value for the locale.  Any\n                     other values are treated as <b>0</b>.\n</p><p>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", -1, 1, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>-1</b>\n<b>ustrcompareex(\"Caf\u00e9\",\"caf\u00e9\",\"fr\", -1, 2, -1, -1, -1, -1,</b>\n<b>-1)</b> = <b>1</b>\n</p><p>\n<i>cslv</i> controls whether an extra case level between the\n                     secondary level and the tertiary level is generated.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  Combining this setting to be \"on\" and the\n                     strength setting to be primary can achieve the effect of\n                     ignoring the diacritical differences but preserving the\n                     case differences.  If the setting is \"on\", the result is\n                     also affected by the <i>case</i> setting.\n</p><p>\n<b>ustrcompareex(\"caf\u00e9\",\"Cafe\",\"fr\", 1, -1, 1, -1, -1, -1,</b>\n<b>-1)</b>=<b>-1</b>\n<b>ustrcompareex(\"caf\u00e9\",\"Cafe\",\"fr\", 1, 1, 1, -1, -1, -1,</b>\n<b>-1)</b>=<b>1</b>\n</p><p>\n<i>norm</i> controls whether the normalization check and\n                     normalizations are performed.  Possible values are <b>0</b>\n                     (off) or <b>1</b> (on).  <b>-1</b> means to use the default value for\n                     the locale.  Any other values are treated as <b>0</b>.  Most\n                     languages do not require normalization for comparison.\n                     Normalization is needed in languages that use multiple\n                     combining characters such as Arabic, ancient Greek, or\n                     Hebrew.\n</p><p>\n<i>num</i> controls how contiguous digit substrings are sorted.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  If the setting is \"on\", substrings\n                     consisting of digits are sorted based on the numeric\n                     value.  For example, \"100\" is after value \"20\" instead\n                     of before it.  Note that the digit substring is limited\n                     to 254 digits, and plus/minus signs, decimals, or\n                     exponents are not supported.\n</p><p>\n<b>ustrcompareex(\"100\", \"20\",\"en\", -1, -1, -1, -1, 0, -1,</b>\n<b>-1)</b>=<b>-1</b>\n<b>ustrcompareex(\"100\", \"20\",\"en\", -1, -1, -1, -1, 1, -1,</b>\n<b>-1)</b>=<b>1</b>\n</p><p>\n<i>alt</i> controls how spaces and punctuation characters are\n                     handled.  Possible values are <b>0</b> (use primary strength)\n                     or <b>1</b> (alternative handling).  Any other values are\n                     treated as <b>0</b>.  If the setting is <b>1</b> (alternative\n                     handling), \"onsite\", \"on-site\", and \"on site\" are\n                     considered equals.\n</p><p>\n<b>ustrcompareex(\"onsite\", \"on-site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 1, -1)</b>=<b>0</b>\n<b>ustrcompareex(\"onsite\", \"on site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 1, -1)</b>=<b>0</b>\n<b>ustrcompareex(\"onsite\", \"on-site\",\"en\", -1, -1, -1, -1,</b>\n<b>-1, 0, -1)</b>=<b>1</b>\n</p><p>\n<i>fr</i> controls the direction of the secondary strength.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  All other values are\n                     treated as \"off\".  If the setting is \"on\", the\n                     diacritical letters are sorted backward.  Note that the\n                     setting is \"on\" by default only for Canadian French\n                     (locale <b>fr_CA</b>).\n</p><p>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,0)</b> = <b>-1</b>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,1)</b> = <b>1</b>\n<b>ustrcompareex(\"cot\u00e9\",</b>\n<b>\"c\u00f4te\",\"fr_CA\",-1,-1,-1,-1,-1,-1,-1)</b> = <b>1</b>\n<b>ustrcompareex(\"cot\u00e9\", \"c\u00f4te\",\"fr\",-1,-1,-1,-1,-1,-1,-1)</b>\n                         = <b>1</b>\n       Domain <i>s1</i>:    Unicode strings\n       Domain <i>s2</i>:    Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>st</i>:    integers\n       Domain <i>case</i>:  integers\n       Domain <i>cslv</i>:  integers\n       Domain <i>norm</i>:  integers\n       Domain <i>num</i>:   integers\n       Domain <i>alt</i>:   integers\n       Domain <i>fr</i>:    integers\n       Range:        integers\n</p>"
    },
    {
        "ustrsortkeyex": "<p>\n<b>ustrsortkeyex(</b><i>s</i><b>,</b><i>loc</i><b>,</b><i>st</i><b>,</b><i>case</i><b>,</b><i>cslv</i><b>,</b><i>norm</i><b>,</b><i>num</i><b>,</b><i>alt</i><b>,</b><i>fr</i><b>)</b>\n       Description:  generates a null-terminated byte array that can be used\n                     by the <a href=\"/help.cgi?sort\"><b>sort</b></a> command to produce the same order as\n                     <b>ustrcompare()</b>\n        \n                     The function may return an empty array if an error\n                     occurs. The result is locale dependent.  If <i>loc</i> is not\n                     specified, the default locale is used.  See <b>[U] 12.4.2.5</b>\n<b>Sorting strings containing Unicode characters</b> for\n                     details and examples.\n</p><p>\n<i>st</i> controls the strength of the comparison.  Possible\n                     values are <b>1</b> (primary), <b>2</b> (secondary), <b>3</b> (tertiary), <b>4</b>\n                     (quaternary), or <b>5</b> (identical).  <b>-1</b> means to use the\n                     default value for the locale.  Any other numbers are\n                     treated as tertiary.  The primary difference represents\n                     base letter differences; for example, letter \"a\" and\n                     letter \"b\" have primary differences.  The secondary\n                     difference represents diacritical differences on the\n                     same base letter; for example, letters \"a\" and \"\u00e4\" have\n                     secondary differences.  The tertiary difference\n                     represents case differences of the same base letters;\n                     for example, letters \"a\" and \"A\" have tertiary\n                     differences.  Quaternary strength is useful to\n                     distinguish between Katakana and Hiragana for the JIS\n                     4061 collation standard.  Identical strength is\n                     essentially the code-point order of the string and,\n                     hence, is rarely useful.\n</p><p>\n<i>case</i> controls the uppercase and lowercase letter order.\n                     Possible values are <b>0</b> (use order specified in tertiary\n                     strength), <b>1</b> (uppercase first), or <b>2</b> (lowercase first).\n                     <b>-1</b> means to use the default value for the locale.  Any\n                     other values are treated as <b>0</b>.\n</p><p>\n<i>cslv</i> controls if an extra case level between the\n                     secondary level and the tertiary level is generated.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  Combining this setting to be \"on\" and the\n                     strength setting to be primary can achieve the effect of\n                     ignoring the diacritical differences but preserving the\n                     case differences.  If the setting is \"on\", the result is\n                     also affected by the <i>case</i> setting.\n</p><p>\n<i>norm</i> controls whether the normalization check and\n                     normalizations are performed.  Possible values are <b>0</b>\n                     (off) or <b>1</b> (on).  <b>-1</b> means to use the default value for\n                     the locale.  Any other values are treated as <b>0</b>.  Most\n                     languages do not require normalization for comparison.\n                     Normalization is needed in languages that use multiple\n                     combining characters such as Arabic, ancient Greek, or\n                     Hebrew.\n</p><p>\n<i>num</i> controls how contiguous digit substrings are sorted.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  Any other values are\n                     treated as <b>0</b>.  If the setting is \"on\", substrings\n                     consisting of digits are sorted based on the numeric\n                     value.  For example, \"100\" is after \"20\" instead of\n                     before it.  Note that the digit substring is limited to\n                     254 digits, and plus/minus signs, decimals, or exponents\n                     are not supported.\n</p><p>\n<i>alt</i> controls how spaces and punctuation characters are\n                     handled.  Possible values are <b>0</b> (use primary strength)\n                     or <b>1</b> (alternative handling).  Any other values are\n                     treated as <b>0</b>.  If the setting is <b>1</b> (alternative\n                     handling), \"onsite\", \"on-site\", and \"on site\" are\n                     considered equals.\n</p><p>\n<i>fr</i> controls the direction of the secondary strength.\n                     Possible values are <b>0</b> (off) or <b>1</b> (on).  <b>-1</b> means to use\n                     the default value for the locale.  All other values are\n                     treated as \"off\".  If the setting is \"on\", the\n                     diacritical letters are sorted backward.  Note that the\n                     setting is \"on\" by default only for Canadian French\n                     (locale <b>fr_CA</b>).\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>st</i>:    integers\n       Domain <i>case</i>:  integers\n       Domain <i>cslv</i>:  integers\n       Domain <i>norm</i>:  integers\n       Domain <i>num</i>:   integers\n       Domain <i>alt</i>:   integers\n       Domain <i>fr</i>:    integers\n       Range:        null-terminated byte array\n</p>"
    },
    {
        "ustrupper": "<p>\n<b>ustrupper(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  uppercase all characters in string <i>s</i> under the given\n                     locale <i>loc</i>\n</p><p>\n                     If <i>loc</i> is not specified, the default locale is used.\n                     The same <i>s</i> but a different <i>loc</i> may produce different\n                     results; for example, the uppercase letter of \"i\" is \"I\"\n                     in English, but \"I\" with a dot in Turkish.  The result\n                     can be longer or shorter than the input string in bytes;\n                     for example, the uppercase form of the German letter \u00df\n                     (code point <b>\\u00df</b>) is two capital letters \"SS\".\n</p><p>\n<b>ustrupper(\"m\u00e9diane\",\"fr\")</b> = <b>\"M\u00c9DIANE\"</b>\n<b>ustrupper(\"Ru\u00dfland\", \"de\")</b> = <b>\"RUSSLAND\"</b>\n<b>ustrupper(\"istanbul\", \"tr\")</b> = <b>\"\u0130STANBUL\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   locale name\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrlower": "<p>\n<b>ustrlower(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  lowercase all characters of Unicode string <i>s</i> under the\n                     given locale <i>loc</i>\n        \n                     If <i>loc</i> is not specified, the default locale is used.\n                     The same <i>s</i> but different <i>loc</i> may produce different\n                     results; for example, the lowercase letter of \"I\" is \"i\"\n                     in English but a dotless \"i\" in Turkish.  The same\n                     Unicode character can be mapped to different Unicode\n                     characters based on its surrounding characters; for\n                     example, Greek capital letter sigma \u03a3 has two\n                     lowercases: \u03c2, if it is the final character of a word,\n                     or \u03c3.  The result can be longer or shorter than the\n                     input Unicode string in bytes.\n</p><p>\n<b>ustrlower(\"M\u00c9DIANE\",\"fr\")</b> = <b>\"m\u00e9diane\"</b>\n<b>ustrlower(\"ISTANBUL\",\"tr\")</b> = <b>\"\u0131stanbul\"</b>\n<b>ustrlower(\"\u1f48\u0394\u03a5\u03a3\u03a3\u0395\u038e\u03a3\")</b> = <b>\"\u1f40\u03b4\u03c5\u03c3\u03c3\u03b5\u03cd\u03c2\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   locale name\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrtitle": "<p>\n<b>ustrtitle(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  a string with the first characters of Unicode words\n                     titlecased and other characters lowercased\n</p><p>\n                     If <i>loc</i> is not specified, the default locale is used.\n                     Note that a Unicode word is different from a Stata word\n                     produced by function <a href=\"/help.cgi?word()\"><b>word()</b></a>.  The Stata word is a\n                     space-separated token.  A Unicode word is a language\n                     unit based on either a set of word-boundary rules or\n                     dictionaries for some languages (Chinese, Japanese, and\n                     Thai).  The titlecase is also locale dependent and\n                     context sensitive; for example, lowercase \"ij\" is\n                     considered a digraph in Dutch. Its titlecase is \"IJ\".\n</p><p>\n<b>ustrtitle(\"vous \u00eates\", \"fr\")</b> = <b>\"Vous \u00cates\"</b>\n<b>ustrtitle(\"mR. joHn a. sMitH\")</b> = <b>\"Mr. John A. Smith\"</b>\n<b>ustrtitle(\"ijmuiden\", \"en\")</b> = <b>\"Ijmuiden\"</b>\n<b>ustrtitle(\"ijmuiden\", \"nl\")</b> = <b>\"IJmuiden\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        Unicode strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?strupper()\"><b>strupper()</b></a> and <a href=\"/help.cgi?strlower()\"><b>strlower()</b></a> to convert only ASCII letters to\n    uppercase and lowercase.\n</p>"
    },
    {
        "ustrto": "<p>\n<b>ustrto(</b><i>s</i><b>,</b><i>enc</i><b>,</b><i>mode</i><b>)</b> \n       Description:  converts the Unicode string <i>s</i> in UTF-8 encoding to a\n                     string in encoding <i>enc</i>\n        \n                     See <a href=\"/help.cgi?unicode_encoding\"><b>[D] unicode encoding</b></a> for details on available\n                     encodings.  Any invalid sequence in <i>s</i> is replaced with a\n                     Unicode replacement character <b>\\ufffd</b>.  <i>mode</i> controls how\n                     unsupported Unicode characters in the encoding <i>enc</i> are\n                     handled.  The possible values are <b>1</b>, which substitutes\n                     any unsupported characters with the <i>enc</i>'s substitution\n                     strings (the substitution character for both <b>ascii</b> and\n                     <b>latin1</b> is <b>char(26)</b>); <b>2</b>, which skips any unsupported\n                     characters; <b>3</b>, which stops at the first unsupported\n                     character and returns an empty string; or <b>4</b>, which\n                     replaces any unsupported character with an escaped hex\n                     digit sequence <b>\\uhhhh</b> or <b>\\Uhhhhhhhh</b>.  The hex digit\n                     sequence contains either 4 or 8 hex digits, depending if\n                     the Unicode character's code-point value is less than or\n                     greater than <b>\\uffff</b>.  Any other values are treated as <b>1</b>.\n</p><p>\n<b>ustrto(\"caf\u00e9\", \"ascii\", 1)</b> = <b>\"caf\"+char(26)</b>\n<b>ustrto(\"caf\u00e9\", \"ascii\", 2)</b> = <b>\"caf\"</b>\n<b>ustrto(\"caf\u00e9\", \"ascii\", 3)</b> = <b>\"\"</b>\n<b>ustrto(\"caf\u00e9\", \"ascii\", 4)</b> = <b>\"caf\\u00E9\"</b>\n<b>ustrto()</b> can be used to removed diacritical marks from\n                     base letters.  First, normalize the Unicode string to\n                     <b>NFD</b> form using <b>ustrnormalize()</b>, and then call <b>ustrto()</b>\n                     with value <b>2</b> to skip all non-ASCII characters.\n</p><p>\n                     Also see <a href=\"/help.cgi?ustrfrom()\"><b>ustrfrom()</b></a>.\n</p><p>\n<b>ustrto(ustrnormalize(\"caf\u00e9\", \"nfd\"), \"ascii\", 2)</b> =\n                         <b>\"cafe\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>enc</i>:   Unicode strings\n       Domain <i>mode</i>:  integers\n       Range:        strings in encoding <i>enc</i>\n</p>"
    },
    {
        "ustrfrom": "<p>\n<b>ustrfrom(</b><i>s</i><b>,</b><i>enc</i><b>,</b><i>mode</i><b>)</b> \n       Description:  converts the string <i>s</i> in encoding <i>enc</i> to a UTF-8 encoded\n                     Unicode string\n        \n                     <i>mode</i> controls how invalid byte sequences in <i>s</i> are\n                     handled.  The possible values are <b>1</b>, which substitutes\n                     an invalid byte sequence with a Unicode replacement\n                     character <b>\\ufffd</b>; <b>2</b>, which skips any invalid byte\n                     sequences; <b>3</b>, which stops at the first invalid byte\n                     sequence and returns an empty string; or <b>4</b>, which\n                     replaces any byte in an invalid sequence with an escaped\n                     hex digit sequence <b>%Xhh</b>.  Any other values are treated\n                     as <b>1</b>. A good use of value <b>4</b> is to check what invalid\n                     bytes a Unicode string <i>ust</i> contains by examining the\n                     result of <b>ustrfrom(ust, \"utf-8\", 4)</b>.\n</p><p>\n                     Also see <a href=\"/help.cgi?ustrto()\"><b>ustrto()</b></a>.\n</p><p>\n<b>ustrfrom(\"caf\"+char(233), \"latin1\", 1)</b> = <b>\"caf\u00e9\"</b>\n<b>ustrfrom(\"caf\"+char(233), \"utf-8\", 1)</b> =\n                         <b>\"caf\"+ustrunescape(\"\\ufffd\")</b>\n<b>ustrfrom(\"caf\"+char(233), \"utf-8\", 2)</b> = <b>\"caf\"</b>\n<b>ustrfrom(\"caf\"+char(233), \"utf-8\", 3)</b> = <b>\"\"</b>\n<b>ustrfrom(\"caf\"+char(233), \"utf-8\", 4)</b> = <b>\"caf%XE9\"</b>\n       Domain <i>s</i>:     strings in encoding <i>enc</i>\n       Domain <i>enc</i>:   Unicode strings\n       Domain <i>mode</i>:  integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrunescape": "<p>\n<b>ustrunescape(</b><i>s</i><b>)</b> \n       Description:  the Unicode string corresponding to the escaped\n                     sequences of <i>s</i>\n        \n                     The following escape sequences are recognized: 4 hex\n                     digit form <b>\\uhhhh</b>; 8 hex digit form <b>\\Uhhhhhhhh</b>; 1-2 hex\n                     digit form <b>\\xhh</b>; and 1-3 octal digit form <b>\\ooo</b>, where <b>h</b>\n                     is <b>[0-9A-Fa-f]</b> and <b>o</b> is <b>[0-7]</b>.  The standard ANSI C\n                     escapes <b>\\a</b>, <b>\\b</b>, <b>\\t</b>, <b>\\n</b>, <b>\\v</b>, <b>\\f</b>, <b>\\r</b>, <b>\\e</b>, <b>\\\"</b>, <b>\\'</b>, <b>\\?</b>, <b>\\\\</b>\n                     are recognized as well.  The function returns an empty\n                     string if an escape sequence is badly formed.  Note that\n                     the 8 hex digit form <b>\\Uhhhhhhhh</b> begins with a capital\n                     letter \"U\".\n</p><p>\n                     Also see <a href=\"/help.cgi?ustrtohex()\"><b>ustrtohex()</b></a>.\n</p><p>\n<b>ustrunescape(\"\\u043d\\u0443\\u043b\\u044e\")</b> = <b>\"\u043d\u0443\u043b\u044e\"</b>\n       Domain <i>s</i>:     strings of escaped hex values\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrtohex": "<p>\n<b>ustrtohex(</b><i>s</i>[<b>,</b><i>n</i>]<b>)</b> \n       Description:  escaped hex digit string of <i>s</i> up to 200 Unicode\n                     characters\n        \n                     The escaped hex digit string is in the form of <b>\\uhhhh</b>\n                     for code points less than <b>\\uffff</b> or <b>\\Uhhhhhhhh</b> for code\n                     points greater than <b>\\uffff</b>.  The function starts at the\n                     <i>n</i>th Unicode character of <i>s</i> if <i>n</i> is specified and larger\n                     than 0.  Any invalid UTF-8 sequence is replaced with a\n                     Unicode replacement character <b>\\ufffd</b>.  Note that the\n                     null terminator <b>char(0)</b> is a valid Unicode character.\n                     Function <a href=\"/help.cgi?f_ustrunescape\"><b>ustrunescape()</b></a> can be applied on the result to\n                     get back the original Unicode string <i>s</i> if <i>s</i> does not\n                     contain any invalid UTF-8 sequences.\n</p><p>\n                     Also see <a href=\"/help.cgi?ustrunescape()\"><b>ustrunescape()</b></a>.\n</p><p>\n<b>ustrtohex(\"\u043d\u0443\u043b\u044e\")</b> = <b>\"\\u043d\\u0443\\u043b\\u044e\"</b>\n<b>ustrtohex(\"\u043d\u0443\u043b\u044e\", 2)</b> = <b>\"\\u0443\\u043b\\u044e\"</b>\n<b>ustrtohex(\"i\"+char(200)+char(0)+\"s\")</b> =\n                     <b>\"\\u0069\\ufffd\\u0000\\u0073\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers &gt;= 1\n       Range:        strings\n</p>"
    },
    {
        "ustrtoname": "<p>\n<b>ustrtoname(</b><i>s</i>[<b>,</b><i>p</i>]<b>)</b> \n       Description:  string <i>s</i> translated into a Stata name\n</p><p>\n<b>ustrtoname()</b> results in a name that is truncated to 32\n                     characters.  Each character in <i>s</i> that is not allowed in\n                     a Stata name is converted to an underscore character, <b>_</b>.\n                     If the first character in <i>s</i> is a numeric character and <i>p</i>\n                     is not 0, then the result is prefixed with an\n                     underscore.\n</p><p>\n<b>ustrtoname(\"name\",1)</b> = <b>\"name\"</b>\n<b>ustrtoname(\"the m\u00e9diane\")</b> = <b>\"the_m\u00e9diane\"</b>\n<b>ustrtoname(\"0m\u00e9diane\")</b> = <b>\"_0m\u00e9diane\"</b>\n<b>ustrtoname(\"0m\u00e9diane\", 1)</b> = <b>\"_0m\u00e9diane\"</b>\n<b>ustrtoname(\"0m\u00e9diane\", 0)</b> = <b>\"0m\u00e9diane\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>p</i>:     integers 0 or 1\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrtrim": "<p>\n<b>ustrtrim(</b><i>s</i><b>)</b>\n       Description:  removes leading and trailing Unicode whitespace\n                     characters and blanks from the Unicode string <i>s</i>\n</p><p>\n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     considered whitespace characters in the Unicode\n                     standard.\n</p><p>\n<b>ustrtrim(\" this \")</b> = <b>\"this\"</b>\n<b>ustrtrim(char(11)+\" this \")+char(13)</b> = <b>\"this\"</b>\n<b>ustrtrim(\" this \"+ustrunescape(\"\\u2000\"))</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrltrim": "<p>\n<b>ustrltrim(</b><i>s</i><b>)</b>\n       Description:  removes the leading Unicode whitespace characters and\n                     blanks from the Unicode string <i>s</i>\n        \n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     whitespace characters in Unicode standard.\n</p><p>\n<b>ustrltrim(\" this\")</b> = <b>\"this\"</b>\n<b>ustrltrim(char(9)+\"this\")</b> = <b>\"this\"</b>\n<b>ustrltrim(ustrunescape(\"\\u1680\")+\" this\")</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrrtrim": "<p>\n<b>ustrrtrim(</b><i>s</i><b>)</b>\n       Description:  remove trailing Unicode whitespace characters and blanks\n                     from the Unicode string <i>s</i>\n        \n                     Note that, in addition to <b>char(32)</b>, ASCII characters\n                     <b>char(9)</b>, <b>char(10)</b>, <b>char(11)</b>, <b>char(12)</b>, and <b>char(13)</b> are\n                     considered whitespace characters in the Unicode\n                     standard.\n</p><p>\n<b>ustrrtrim(\"this \")</b> = <b>\"this\"</b>\n<b>ustrltrim(\"this\"+char(10))</b> = <b>\"this\"</b>\n<b>ustrrtrim(\"this \"+ustrunescape(\"\\u2000\"))</b> = <b>\"this\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Range:        Unicode strings\n</p><p>\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?strtrim()\"><b>strtrim()</b></a>, <a href=\"/help.cgi?stritrim()\"><b>stritrim()</b></a>, <a href=\"/help.cgi?strltrim()\"><b>strltrim()</b></a>, and <a href=\"/help.cgi?strrtrim()\"><b>strrtrim()</b></a> to trim\n    only the ASCII space character <b>char(32)</b>.\n</p>"
    },
    {
        "ustrunescape": "<p>\n<b>ustrunescape(</b><i>s</i><b>)</b> \n       Description:  the Unicode string corresponding to the escaped\n                     sequences of <i>s</i>\n        \n                     The following escape sequences are recognized: 4 hex\n                     digit form <b>\\uhhhh</b>; 8 hex digit form <b>\\Uhhhhhhhh</b>; 1-2 hex\n                     digit form <b>\\xhh</b>; and 1-3 octal digit form <b>\\ooo</b>, where <b>h</b>\n                     is <b>[0-9A-Fa-f]</b> and <b>o</b> is <b>[0-7]</b>.  The standard ANSI C\n                     escapes <b>\\a</b>, <b>\\b</b>, <b>\\t</b>, <b>\\n</b>, <b>\\v</b>, <b>\\f</b>, <b>\\r</b>, <b>\\e</b>, <b>\\\"</b>, <b>\\'</b>, <b>\\?</b>, <b>\\\\</b>\n                     are recognized as well.  The function returns an empty\n                     string if an escape sequence is badly formed.  Note that\n                     the 8 hex digit form <b>\\Uhhhhhhhh</b> begins with a capital\n                     letter \"U\".\n</p><p>\n                     Also see <a href=\"/help.cgi?ustrtohex()\"><b>ustrtohex()</b></a>.\n</p><p>\n<b>ustrunescape(\"\\u043d\\u0443\\u043b\\u044e\")</b> = <b>\"\u043d\u0443\u043b\u044e\"</b>\n       Domain <i>s</i>:     strings of escaped hex values\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrtohex": "<p>\n<b>ustrtohex(</b><i>s</i>[<b>,</b><i>n</i>]<b>)</b> \n       Description:  escaped hex digit string of <i>s</i> up to 200 Unicode\n                     characters\n        \n                     The escaped hex digit string is in the form of <b>\\uhhhh</b>\n                     for code points less than <b>\\uffff</b> or <b>\\Uhhhhhhhh</b> for code\n                     points greater than <b>\\uffff</b>.  The function starts at the\n                     <i>n</i>th Unicode character of <i>s</i> if <i>n</i> is specified and larger\n                     than 0.  Any invalid UTF-8 sequence is replaced with a\n                     Unicode replacement character <b>\\ufffd</b>.  Note that the\n                     null terminator <b>char(0)</b> is a valid Unicode character.\n                     Function <a href=\"/help.cgi?f_ustrunescape\"><b>ustrunescape()</b></a> can be applied on the result to\n                     get back the original Unicode string <i>s</i> if <i>s</i> does not\n                     contain any invalid UTF-8 sequences.\n</p><p>\n                     Also see <a href=\"/help.cgi?ustrunescape()\"><b>ustrunescape()</b></a>.\n</p><p>\n<b>ustrtohex(\"\u043d\u0443\u043b\u044e\")</b> = <b>\"\\u043d\\u0443\\u043b\\u044e\"</b>\n<b>ustrtohex(\"\u043d\u0443\u043b\u044e\", 2)</b> = <b>\"\\u0443\\u043b\\u044e\"</b>\n<b>ustrtohex(\"i\"+char(200)+char(0)+\"s\")</b> =\n                     <b>\"\\u0069\\ufffd\\u0000\\u0073\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers &gt;= 1\n       Range:        strings\n</p>"
    },
    {
        "ustrupper": "<p>\n<b>ustrupper(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  uppercase all characters in string <i>s</i> under the given\n                     locale <i>loc</i>\n</p><p>\n                     If <i>loc</i> is not specified, the default locale is used.\n                     The same <i>s</i> but a different <i>loc</i> may produce different\n                     results; for example, the uppercase letter of \"i\" is \"I\"\n                     in English, but \"I\" with a dot in Turkish.  The result\n                     can be longer or shorter than the input string in bytes;\n                     for example, the uppercase form of the German letter \u00df\n                     (code point <b>\\u00df</b>) is two capital letters \"SS\".\n</p><p>\n<b>ustrupper(\"m\u00e9diane\",\"fr\")</b> = <b>\"M\u00c9DIANE\"</b>\n<b>ustrupper(\"Ru\u00dfland\", \"de\")</b> = <b>\"RUSSLAND\"</b>\n<b>ustrupper(\"istanbul\", \"tr\")</b> = <b>\"\u0130STANBUL\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   locale name\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrlower": "<p>\n<b>ustrlower(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  lowercase all characters of Unicode string <i>s</i> under the\n                     given locale <i>loc</i>\n        \n                     If <i>loc</i> is not specified, the default locale is used.\n                     The same <i>s</i> but different <i>loc</i> may produce different\n                     results; for example, the lowercase letter of \"I\" is \"i\"\n                     in English but a dotless \"i\" in Turkish.  The same\n                     Unicode character can be mapped to different Unicode\n                     characters based on its surrounding characters; for\n                     example, Greek capital letter sigma \u03a3 has two\n                     lowercases: \u03c2, if it is the final character of a word,\n                     or \u03c3.  The result can be longer or shorter than the\n                     input Unicode string in bytes.\n</p><p>\n<b>ustrlower(\"M\u00c9DIANE\",\"fr\")</b> = <b>\"m\u00e9diane\"</b>\n<b>ustrlower(\"ISTANBUL\",\"tr\")</b> = <b>\"\u0131stanbul\"</b>\n<b>ustrlower(\"\u1f48\u0394\u03a5\u03a3\u03a3\u0395\u038e\u03a3\")</b> = <b>\"\u1f40\u03b4\u03c5\u03c3\u03c3\u03b5\u03cd\u03c2\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   locale name\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrtitle": "<p>\n<b>ustrtitle(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b> \n       Description:  a string with the first characters of Unicode words\n                     titlecased and other characters lowercased\n</p><p>\n                     If <i>loc</i> is not specified, the default locale is used.\n                     Note that a Unicode word is different from a Stata word\n                     produced by function <a href=\"/help.cgi?word()\"><b>word()</b></a>.  The Stata word is a\n                     space-separated token.  A Unicode word is a language\n                     unit based on either a set of word-boundary rules or\n                     dictionaries for some languages (Chinese, Japanese, and\n                     Thai).  The titlecase is also locale dependent and\n                     context sensitive; for example, lowercase \"ij\" is\n                     considered a digraph in Dutch. Its titlecase is \"IJ\".\n</p><p>\n<b>ustrtitle(\"vous \u00eates\", \"fr\")</b> = <b>\"Vous \u00cates\"</b>\n<b>ustrtitle(\"mR. joHn a. sMitH\")</b> = <b>\"Mr. John A. Smith\"</b>\n<b>ustrtitle(\"ijmuiden\", \"en\")</b> = <b>\"Ijmuiden\"</b>\n<b>ustrtitle(\"ijmuiden\", \"nl\")</b> = <b>\"IJmuiden\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        Unicode strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use functions <a href=\"/help.cgi?strupper()\"><b>strupper()</b></a> and <a href=\"/help.cgi?strlower()\"><b>strlower()</b></a> to convert only ASCII letters to\n    uppercase and lowercase.\n</p>"
    },
    {
        "ustrword": "<p>\n<b>ustrword(</b><i>s</i><b>,</b><i>n</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  the <i>n</i>th Unicode word in the Unicode string <i>s</i>\n        \n                     Positive <i>n</i> counts Unicode words from the beginning of <i>s</i>,\n                     and negative <i>n</i> counts Unicode words from the end of <i>s</i>.\n                     For examples, <i>n</i> equal to 1 returns the first word in <i>s</i>,\n                     and <i>n</i> equal to -1 returns the last word in <i>s</i>.  If <i>loc</i> is\n                     not specified, the default locale is used.  A Unicode\n                     word is different from a Stata word produced by the\n                     <a href=\"/help.cgi?f_word\"><b>word()</b></a> function.  A Stata word is a space-separated\n                     token.  A Unicode word is a language unit based on\n                     either a set of word-boundary rules or dictionaries for\n                     some languages (Chinese, Japanese, and Thai). The\n                     function returns <i>missing</i> (<b>\"\"</b>) if <i>n</i> is greater than <i>cnt</i>\n                     or less than <i>-cnt</i>, where <i>cnt</i> is the number of words <i>s</i>\n                     contains.  <i>cnt</i> can be obtained from <b>ustrwordcount()</b>.\n                     The function also returns <i>missing</i> (<b>\"\"</b>) if an error\n                     occurs.\n</p><p>\n<b>ustrword(\"Parlez-vous fran\u00e7ais\", 1, \"fr\")</b> = <b>\"Parlez\"</b>\n<b>ustrword(\"Parlez-vous fran\u00e7ais\", 2, \"fr\")</b> = <b>\"-\"</b>\n<b>ustrword(\"Parlez-vous fran\u00e7ais\",-1, \"fr\")</b> = <b>\"fran\u00e7ais\"</b>\n<b>ustrword(\"Parlez-vous fran\u00e7ais\",-2, \"fr\")</b> = <b>\"vous\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrwordcount": "<p>\n<b>ustrwordcount(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  the number of nonempty Unicode words in the Unicode\n                     string <i>s</i>\n        \n                     An empty Unicode word is a Unicode word consisting of\n                     only Unicode whitespace characters.  If <i>loc</i> is not\n                     specified, the default locale is used.  A Unicode word\n                     is different from a Stata word produced by the <a href=\"/help.cgi?f_word\"><b>word()</b></a>\n                     function.  A Stata word is a space-separated token.  A\n                     Unicode word is a language unit based on either a set of\n                     word-boundary rules or dictionaries for some languages\n                     (Chinese, Japanese, and Thai).  The function may return\n                     a negative number if an error occurs.\n</p><p>\n<b>ustrwordcount(\"Parlez-vous fran\u00e7ais\", \"fr\")</b> = <b>4</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "ustrword": "<p>\n<b>ustrword(</b><i>s</i><b>,</b><i>n</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  the <i>n</i>th Unicode word in the Unicode string <i>s</i>\n        \n                     Positive <i>n</i> counts Unicode words from the beginning of <i>s</i>,\n                     and negative <i>n</i> counts Unicode words from the end of <i>s</i>.\n                     For examples, <i>n</i> equal to 1 returns the first word in <i>s</i>,\n                     and <i>n</i> equal to -1 returns the last word in <i>s</i>.  If <i>loc</i> is\n                     not specified, the default locale is used.  A Unicode\n                     word is different from a Stata word produced by the\n                     <a href=\"/help.cgi?f_word\"><b>word()</b></a> function.  A Stata word is a space-separated\n                     token.  A Unicode word is a language unit based on\n                     either a set of word-boundary rules or dictionaries for\n                     some languages (Chinese, Japanese, and Thai). The\n                     function returns <i>missing</i> (<b>\"\"</b>) if <i>n</i> is greater than <i>cnt</i>\n                     or less than <i>-cnt</i>, where <i>cnt</i> is the number of words <i>s</i>\n                     contains.  <i>cnt</i> can be obtained from <b>ustrwordcount()</b>.\n                     The function also returns <i>missing</i> (<b>\"\"</b>) if an error\n                     occurs.\n</p><p>\n<b>ustrword(\"Parlez-vous fran\u00e7ais\", 1, \"fr\")</b> = <b>\"Parlez\"</b>\n<b>ustrword(\"Parlez-vous fran\u00e7ais\", 2, \"fr\")</b> = <b>\"-\"</b>\n<b>ustrword(\"Parlez-vous fran\u00e7ais\",-1, \"fr\")</b> = <b>\"fran\u00e7ais\"</b>\n<b>ustrword(\"Parlez-vous fran\u00e7ais\",-2, \"fr\")</b> = <b>\"vous\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrwordcount": "<p>\n<b>ustrwordcount(</b><i>s</i>[<b>,</b><i>loc</i>]<b>)</b>\n       Description:  the number of nonempty Unicode words in the Unicode\n                     string <i>s</i>\n        \n                     An empty Unicode word is a Unicode word consisting of\n                     only Unicode whitespace characters.  If <i>loc</i> is not\n                     specified, the default locale is used.  A Unicode word\n                     is different from a Stata word produced by the <a href=\"/help.cgi?f_word\"><b>word()</b></a>\n                     function.  A Stata word is a space-separated token.  A\n                     Unicode word is a language unit based on either a set of\n                     word-boundary rules or dictionaries for some languages\n                     (Chinese, Japanese, and Thai).  The function may return\n                     a negative number if an error occurs.\n</p><p>\n<b>ustrwordcount(\"Parlez-vous fran\u00e7ais\", \"fr\")</b> = <b>4</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>loc</i>:   Unicode strings\n       Range:        integers\n</p>"
    },
    {
        "usubinstr": "<p>\n<b>usubinstr(</b><i>s1</i><b>,</b><i>s2</i><b>,</b><i>s3</i><b>,</b><i>n</i><b>)</b>\n       Description:  replaces the first <i>n</i> occurrences of the Unicode string\n                     <i>s2</i> with the Unicode string <i>s3</i> in <i>s1</i>\n        \n                     If <i>n</i> is <i>missing</i>, all occurrences are replaced.  An\n                     invalid UTF-8 sequence in <i>s1</i>, <i>s2</i>, or <i>s3</i> is replaced with\n                     a Unicode replacement character <b>\\ufffd</b> before\n                     replacement is performed.\n</p><p>\n<b>usubinstr(\"de tr\u00e8s pr\u00e8s\",\"\u00e8s\",\"es\",1)</b> = <b>\"de tres pr\u00e8s\"</b>\n<b>usubinstr(\"de tr\u00e8s pr\u00e8s\",\"\u00e8s\",\"X\",2)</b> = <b>\"de trX prX\"</b>\n       Domain <i>s1</i>:    Unicode strings (to be substituted into)\n       Domain <i>s2</i>:    Unicode strings (to be substituted from)\n       Domain <i>s3</i>:    Unicode strings (to be substituted with)\n       Domain <i>n</i>:     integers <u>&gt;</u> 0 or <i>missing</i>\n       Range:        Unicode strings\n</p>"
    },
    {
        "usubstr": "<p>\n<b>usubstr(</b><i>s</i><b>,</b><i>n1</i><b>,</b><i>n2</i><b>)</b>\n       Description:  the Unicode substring of <i>s</i>, starting at <i>n1</i>, for a length\n                     of <i>n2</i>\n        \n                     If <i>n1</i> &lt; 0, <i>n1</i> is interpreted as the distance from the\n                     last character of the <i>s</i>; if <i>n2</i> = <b>.</b> (<i>missing</i>), the\n                     remaining portion of the Unicode string is returned.\n        \n                     <b>usubstr(\"m\u00e9diane\",2,3)</b> = <b>\"\u00e9di\"</b>\n<b>usubstr(\"m\u00e9diane\",-3,2)</b> = <b>\"an\"</b>\n<b>usubstr(\"m\u00e9diane\",2,.)</b> = <b>\"\u00e9diane\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n1</i>:    integers <u>&gt;</u> 1 and <u>&lt;</u> -1\n       Domain <i>n2</i>:    integers <u>&gt;</u> 1\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrleft": "<p>\n<b>ustrleft(</b><i>s</i><b>,</b><i>n</i><b>)</b>\n       Description:  the first <i>n</i> Unicode characters of the Unicode string <i>s</i>\n        \n                     An invalid UTF-8 sequence is replaced with a Unicode\n                     replacement character <b>\\ufffd</b>.\n</p><p>\n<b>ustrleft(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",3)</b> = <b>\"\u042d\u043a\u0441\"</b>\n<b>ustrleft(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",5)</b> = <b>\"\u042d\u043a\u0441\u043f\u0435\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        Unicode strings\n</p>"
    },
    {
        "ustrright": "<p>\n<b>ustrright(</b><i>s</i><b>,</b><i>n</i><b>)</b>\n       Description:  the last <i>n</i> Unicode characters of the Unicode string <i>s</i>\n</p><p>\n                     An invalid UTF-8 sequence is replaced with a Unicode\n                     replacement character <b>\\ufffd</b>.\n</p><p>\n<b>ustrright(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",3)</b> = <b>\"\u043d\u044b\u0435\"</b>\n<b>ustrright(\"\u042d\u043a\u0441\u043f\u0435\u0440\u0438\u043c\u0435\u043d\u0442\u0430\u043b\u044c\u043d\u044b\u0435\",5)</b> = <b>\"\u043b\u044c\u043d\u044b\u0435\"</b>\n       Domain <i>s</i>:     Unicode strings\n       Domain <i>n</i>:     integers\n       Range:        Unicode strings\n</p><p>\n</p><p>\n<a name=\"remarks\"></a><b><u>Remarks</u></b>\n</p><p>\n    Use function <a href=\"/help.cgi?udsubstr()\"><b>udsubstr()</b></a> to extract a substring based on display columns.\n    Use function <a href=\"/help.cgi?substr()\"><b>substr()</b></a> to extract a substring based on bytes.\n</p>"
    },
    {
        "vec": "<p>\n<b>vec(</b><i>M</i><b>)</b>\n       Description:  a column vector formed by listing the elements of <i>M</i>,\n                     starting with the first column and proceeding column by\n                     column\n       Domain:       matrices\n       Range:        column vectors (<i>n</i> x 1 matrices)\n</p>"
    },
    {
        "vecdiag": "<p>\n<b>vecdiag(</b><i>M</i><b>)</b>\n       Description:  the row vector containing the diagonal of matrix <i>M</i>\n</p><p>\n<b>vecdiag()</b> is the opposite of <a href=\"/help.cgi?diag()\"><b>diag()</b></a>.  The row name is\n                     set to <b>r1</b>; the column names are obtained from the column\n                     names of <i>M</i>.\n       Domain:       <i>n</i> x <i>n</i> matrices\n       Range:        1 x <i>n</i> vectors\n</p>"
    },
    {
        "week": "<p>\n<b>week(</b><i>e_d</i><b>)</b>\n       Description:  the numeric week of the year corresponding to date <i>e_d</i>,\n                     the <b>%td</b> encoded date (days since 01jan1960)\n</p><p>\n                     Note: The first week of a year is the first 7-day period\n                     of the year.\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        integers 1 to 52 or <i>missing</i>\n</p>"
    },
    {
        "weekly": "<p>\n<b>weekly(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_w</i> weekly date (weeks since 1960w1) corresponding\n                     to <i>s1</i> based on <i>s2</i> and <i>Y</i>; <i>Y</i> specifies <i>topyear</i>; see <a href=\"/help.cgi?date()\"><b>date()</b></a>\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings <b>\"WY\"</b> and <b>\"YW\"</b>; <b>Y</b> may be prefixed with <i>##</i>\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        <b>%tw</b> dates 0100w1 to 9999w52 (integers -96,720 to\n                     418,079) or <i>missing</i>\n</p>"
    },
    {
        "weibull": "<p>\n<b>weibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative Weibull distribution with shape <i>a</i> and\n                     scale <i>b</i>\n</p><p>\n<b>weibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <b>weibull(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>x</i><b>)</b>, where <i>a</i> is the shape,\n                     <i>b</i> is the scale, and <i>x</i> is the value of the Weibull random\n                     variable.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     1e-323 to 8e+307\n       Range:        0 to 1\n</p><p>\n<b>weibull(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative Weibull distribution with shape <i>a</i>, scale\n                     <i>b</i>, and location <i>g</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> <i>g</i>\n       Range:        0 to 1\n</p>"
    },
    {
        "weibullden": "<p>\n<b>weibullden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density function of the Weibull\n                     distribution with shape <i>a</i> and scale <i>b</i>\n</p><p>\n<b>weibullden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <b>weibullden(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>x</i><b>)</b>, where <i>a</i> is the\n                     shape, <i>b</i> is the scale, and <i>x</i> is the value of the Weibull\n                     random variable.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     1e-323 to 8e+307\n       Range:        0 to 8e+307\n</p><p>\n<b>weibullden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density function of the Weibull\n                     distribution with shape <i>a</i>, scale <i>b</i>, and location <i>g</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> <i>g</i>\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "weibullph": "<p>\n<b>weibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative Weibull (proportional hazards)\n                     distribution with shape <i>a</i> and scale <i>b</i>\n</p><p>\n<b>weibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <b>weibullph(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>x</i><b>)</b>, where <i>a</i> is the\n                     shape, <i>b</i> is the scale, and <i>x</i> is the value of the Weibull\n                     random variable.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     1e-323 to 8e+307\n       Range:        0 to 1\n</p><p>\n<b>weibullph(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b>\n       Description:  the cumulative Weibull (proportional hazards)\n                     distribution with shape <i>a</i>, scale <i>b</i>, and location <i>g</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> <i>g</i>\n       Range:        0 to 1\n</p>"
    },
    {
        "weibullphden": "<p>\n<b>weibullphden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density function of the Weibull\n                     (proportional hazards) distribution with shape <i>a</i> and\n                     scale <i>b</i>\n</p><p>\n<b>weibullphden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <b>weibullphden(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>x</i><b>)</b>, where <i>a</i> is\n                     the shape, <i>b</i> is the scale, and <i>x</i> is the value of the\n                     Weibull (proportional hazards) random variable.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     1e-323 to 8e+307\n       Range:        0 to 8e+307\n</p><p>\n<b>weibullphden(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b>\n       Description:  the probability density function of the Weibull\n                     (proportional hazards) distribution with shape <i>a</i>, scale\n                     <i>b</i>, and location <i>g</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> <i>g</i>\n       Range:        0 to 8e+307\n</p>"
    },
    {
        "weibullphtail": "<p>\n<b>weibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative Weibull (proportional hazards)\n                     distribution with shape <i>a</i> and scale <i>b</i>\n</p><p>\n<b>weibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <b>weibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>x</i><b>)</b>, where <i>a</i>\n                     is the shape, <i>b</i> is the scale, and <i>x</i> is the value of the\n                     Weibull (proportional hazards) random variable.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     1e-323 to 8e+307\n       Range:        0 to 1\n</p><p>\n<b>weibullphtail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative Weibull (proportional hazards)\n                     distribution with shape <i>a</i>, scale <i>b</i>, and location <i>g</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> <i>g</i>\n       Range:        0 to 1\n</p>"
    },
    {
        "weibulltail": "<p>\n<b>weibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative Weibull distribution with shape <i>a</i>\n                     and scale <i>b</i>\n</p><p>\n<b>weibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>x</i><b>)</b> = <b>weibulltail(</b><i>a</i><b>,</b><i>b</i><b>,0,</b><i>x</i><b>)</b>, where <i>a</i> is\n                     the shape, <i>b</i> is the scale, and <i>x</i> is the value of a\n                     Weibull random variable.\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>x</i>:     1e-323 to 8e+307\n       Range:        0 to 1\n</p><p>\n<b>weibulltail(</b><i>a</i><b>,</b><i>b</i><b>,</b><i>g</i><b>,</b><i>x</i><b>)</b>\n       Description:  the reverse cumulative Weibull distribution with shape\n                     <i>a</i>, scale <i>b</i>, and location <i>g</i>\n       Domain <i>a</i>:     1e-323 to 8e+307\n       Domain <i>b</i>:     1e-323 to 8e+307\n       Domain <i>g</i>:     -8e+307 to 8e+307\n       Domain <i>x</i>:     -8e+307 to 8e+307; interesting domain is <i>x</i> <u>&gt;</u> <i>g</i>\n       Range:        0 to 1\n</p>"
    },
    {
        "wofd": "<p>\n<b>wofd(</b><i>e_d</i><b>)</b>\n       Description:  the <i>e_w</i> weekly date (weeks since 1960w1) containing date\n                     <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        <b>%tw</b> dates 0100w1 to 9999w52 (integers -96,720 to\n                     418,079)\n</p>"
    },
    {
        "word": "<p>\n<b>word(</b><i>s</i><b>,</b><i>n</i><b>)</b>\n       Description:  the <i>n</i>th word in <i>s</i>; <i>missing</i> (<b>\"\"</b>) if <i>n</i> is missing\n</p><p>\n                     Positive numbers count words from the beginning of <i>s</i>,\n                     and negative numbers count words from the end of <i>s</i>.  (<b>1</b>\n                     is the first word in <i>s</i>, and <b>-1</b> is the last word in <i>s</i>.) A\n                     word is a set of characters that start and terminate\n                     with spaces.  This is different from a Unicode word,\n                     which is a language unit based on either a set of\n                     word-boundary rules or dictionaries for several\n                     languages (Chinese, Japanese, and Thai).\n       Domain <i>s</i>:     strings\n       Domain <i>n</i>:     integers\n       Range:        strings\n</p><p>\n<b>wordcount(</b><i>s</i><b>)</b>\n       Description:  the number of words in <i>s</i>\n</p><p>\n                     A word is a set of characters that starts and terminates\n                     with spaces, starts with the beginning of the string, or\n                     terminates with the end of the string.  This is\n                     different from a Unicode word, which is a language unit\n                     based on either a set of word-boundary rules or\n                     dictionaries for several languages (Chinese, Japanese,\n                     and Thai).\n       Domain <i>s</i>:     strings\n       Range:        nonnegative integers 0, 1, 2, ...\n</p>"
    },
    {
        "wordbreaklocale": "<p>\n<b>wordbreaklocale(</b><i>loc</i><b>,</b><i>type</i><b>)</b> \n       Description:  the most closely related locale supported by ICU from\n                     <i>loc</i> if <i>type</i> is <b>1</b>, the actual locale where the\n                     word-boundary analysis data come from if <i>type</i> is <b>2</b>; or\n                     an empty string is returned for any other <i>type</i>\n</p><p>\n<b>wordbreaklocale(\"en_us_texas\", 1)</b> = <b>en_US</b>\n<b>wordbreaklocale(\"en_us_texas\", 2)</b> = <b>root</b>\n       Domain <i>loc</i>:   strings of locale name\n       Domain <i>type</i>:  integers\n       Range:        strings\n</p>"
    },
    {
        "word": "<p>\n<b>word(</b><i>s</i><b>,</b><i>n</i><b>)</b>\n       Description:  the <i>n</i>th word in <i>s</i>; <i>missing</i> (<b>\"\"</b>) if <i>n</i> is missing\n</p><p>\n                     Positive numbers count words from the beginning of <i>s</i>,\n                     and negative numbers count words from the end of <i>s</i>.  (<b>1</b>\n                     is the first word in <i>s</i>, and <b>-1</b> is the last word in <i>s</i>.) A\n                     word is a set of characters that start and terminate\n                     with spaces.  This is different from a Unicode word,\n                     which is a language unit based on either a set of\n                     word-boundary rules or dictionaries for several\n                     languages (Chinese, Japanese, and Thai).\n       Domain <i>s</i>:     strings\n       Domain <i>n</i>:     integers\n       Range:        strings\n</p><p>\n<b>wordcount(</b><i>s</i><b>)</b>\n       Description:  the number of words in <i>s</i>\n</p><p>\n                     A word is a set of characters that starts and terminates\n                     with spaces, starts with the beginning of the string, or\n                     terminates with the end of the string.  This is\n                     different from a Unicode word, which is a language unit\n                     based on either a set of word-boundary rules or\n                     dictionaries for several languages (Chinese, Japanese,\n                     and Thai).\n       Domain <i>s</i>:     strings\n       Range:        nonnegative integers 0, 1, 2, ...\n</p>"
    },
    {
        "year": "<p>\n<b>year(</b><i>e_d</i><b>)</b>\n       Description:  the numeric year corresponding to date <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        integers 0100 to 9999 (but probably 1800 to 2100)\n</p>"
    },
    {
        "yearly": "<p>\n<b>yearly(</b><i>s1</i><b>,</b><i>s2</i>[<b>,</b><i>Y</i>]<b>)</b>\n       Description:  the <i>e_y</i> yearly date (year) corresponding to <i>s1</i> based on\n                     <i>s2</i> and <i>Y</i>; <i>Y</i> specifies <i>topyear</i>; see <a href=\"/help.cgi?date()\"><b>date()</b></a>\n       Domain <i>s1</i>:    strings\n       Domain <i>s2</i>:    strings <b>\"Y\"</b>; <b>Y</b> may be prefixed with <i>##</i>\n       Domain <i>Y</i>:     integers 1000 to 9998 (but probably 2001 to 2099)\n       Range:        <b>%ty</b> dates 0100 to 9999 (integers 0100 to 9999) or\n                     <i>missing</i>\n</p>"
    },
    {
        "yh": "<p>\n<b>yh(</b><i>Y</i><b>,</b><i>H</i><b>)</b>\n       Description:  the <i>e_h</i> half-yearly date (half-years since 1960h1)\n                     corresponding to year <i>Y</i>, half-year <i>H</i>\n       Domain <i>Y</i>:     integers 1000 to 9999 (but probably 1800 to 2100)\n       Domain <i>H</i>:     integers 1, 2\n       Range:        <b>%th</b> dates 1000h1 to 9999h2 (integers -1,920 to 16,079)\n</p>"
    },
    {
        "ym": "<p>\n<b>ym(</b><i>Y</i><b>,</b><i>M</i><b>)</b>\n       Description:  the <i>e_m</i> monthly date (months since 1960m1) corresponding\n                     to year <i>Y</i>, month <i>M</i>\n       Domain <i>Y</i>:     integers 1000 to 9999 (but probably 1800 to 2100)\n       Domain <i>M</i>:     integers 1 to 12\n       Range:        <b>%tm</b> dates 1000m1 to 9999m12 (integers -11,520 to 96,479)\n</p>"
    },
    {
        "yofd": "<p>\n<b>yofd(</b><i>e_d</i><b>)</b>\n       Description:  the <i>e_y</i> yearly date (year) containing date <i>e_d</i>\n       Domain <i>e_d</i>:   <b>%td</b> dates 01jan0100 to 31dec9999 (integers -679,350 to\n                     2,936,549)\n       Range:        <b>%ty</b> dates 0100 to 9999 (integers 0100 to 9999)\n</p>"
    },
    {
        "yq": "<p>\n<b>yq(</b><i>Y</i><b>,</b><i>Q</i><b>)</b>\n       Description:  the <i>e_q</i> quarterly date (quarters since 1960q1)\n                     corresponding to year <i>Y</i>, quarter <i>Q</i>\n       Domain <i>Y</i>:     integers 1000 to 9999 (but probably 1800 to 2100)\n       Domain <i>Q</i>:     integers 1 to 4\n       Range:        <b>%tq</b> dates 1000q1 to 9999q4 (integers -3,840 to 32,159)\n</p>"
    },
    {
        "yw": "<p>\n<b>yw(</b><i>Y</i><b>,</b><i>W</i><b>)</b>\n       Description:  the <i>e_w</i> weekly date (weeks since 1960w1) corresponding\n                     to year <i>Y</i>, week <i>W</i>\n       Domain <i>Y</i>:     integers 1000 to 9999 (but probably 1800 to 2100)\n       Domain <i>W</i>:     integers 1 to 52\n       Range:        <b>%tw</b> dates 1000w1 to 9999w52 (integers -49,920 to\n                     418,079)\n</p>"
    }
]